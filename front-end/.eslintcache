[{"C:\\Users\\PRODIPTO\\Downloads\\Front-end\\GrammyWammy\\front-end\\src\\index.js":"1","C:\\Users\\PRODIPTO\\Downloads\\Front-end\\GrammyWammy\\front-end\\src\\reportWebVitals.js":"2","C:\\Users\\PRODIPTO\\Downloads\\Front-end\\GrammyWammy\\front-end\\src\\App.js":"3","C:\\Users\\PRODIPTO\\Downloads\\Front-end\\GrammyWammy\\front-end\\src\\components\\common\\logger.js":"4","C:\\Users\\PRODIPTO\\Downloads\\Front-end\\GrammyWammy\\front-end\\src\\components\\layouts\\AppLayout.js":"5","C:\\Users\\PRODIPTO\\Downloads\\Front-end\\GrammyWammy\\front-end\\src\\routes\\AppRoute.js":"6","C:\\Users\\PRODIPTO\\Downloads\\Front-end\\GrammyWammy\\front-end\\src\\components\\modules\\Auth\\ForgotPassword.js":"7","C:\\Users\\PRODIPTO\\Downloads\\Front-end\\GrammyWammy\\front-end\\src\\components\\modules\\Auth\\NotFound.js":"8","C:\\Users\\PRODIPTO\\Downloads\\Front-end\\GrammyWammy\\front-end\\src\\components\\modules\\Main\\Dashboard.js":"9","C:\\Users\\PRODIPTO\\Downloads\\Front-end\\GrammyWammy\\front-end\\src\\components\\modules\\Setting\\setting.js":"10","C:\\Users\\PRODIPTO\\Downloads\\Front-end\\GrammyWammy\\front-end\\src\\components\\modules\\AutoResponder\\autoResponder.js":"11","C:\\Users\\PRODIPTO\\Downloads\\Front-end\\GrammyWammy\\front-end\\src\\components\\modules\\Auth\\logout.js":"12","C:\\Users\\PRODIPTO\\Downloads\\Front-end\\GrammyWammy\\front-end\\src\\components\\modules\\AutoResponder\\autoResponderCreate.js":"13","C:\\Users\\PRODIPTO\\Downloads\\Front-end\\GrammyWammy\\front-end\\src\\components\\modules\\AutoResponder\\autoResponderEdit.js":"14","C:\\Users\\PRODIPTO\\Downloads\\Front-end\\GrammyWammy\\front-end\\src\\components\\modules\\Auth\\Login.js":"15","C:\\Users\\PRODIPTO\\Downloads\\Front-end\\GrammyWammy\\front-end\\src\\config.js":"16","C:\\Users\\PRODIPTO\\Downloads\\Front-end\\GrammyWammy\\front-end\\src\\helper\\helper.js":"17","C:\\Users\\PRODIPTO\\Downloads\\Front-end\\GrammyWammy\\front-end\\src\\services\\authService.js":"18","C:\\Users\\PRODIPTO\\Downloads\\Front-end\\GrammyWammy\\front-end\\src\\services\\autoResponderServices.js":"19","C:\\Users\\PRODIPTO\\Downloads\\Front-end\\GrammyWammy\\front-end\\src\\helper\\loginHelper.js":"20","C:\\Users\\PRODIPTO\\Downloads\\Front-end\\GrammyWammy\\front-end\\src\\services\\setting.js":"21","C:\\Users\\PRODIPTO\\Downloads\\Front-end\\GrammyWammy\\front-end\\src\\components\\modules\\Common\\header.js":"22","C:\\Users\\PRODIPTO\\Downloads\\Front-end\\GrammyWammy\\front-end\\src\\components\\modules\\Common\\footer.js":"23","C:\\Users\\PRODIPTO\\Downloads\\Front-end\\GrammyWammy\\front-end\\src\\components\\modules\\Setting\\DefaultMessageSettings\\defaultMessageSettings.js":"24","C:\\Users\\PRODIPTO\\Downloads\\Front-end\\GrammyWammy\\front-end\\src\\components\\modules\\Setting\\ResponseSetting\\responseSetting.js":"25","C:\\Users\\PRODIPTO\\Downloads\\Front-end\\GrammyWammy\\front-end\\src\\components\\modules\\Common\\sidebar.js":"26","C:\\Users\\PRODIPTO\\Downloads\\Front-end\\GrammyWammy\\front-end\\src\\components\\modules\\Setting\\ResponseSetting\\IndividualComponents\\defaultMessage.js":"27","C:\\Users\\PRODIPTO\\Downloads\\Front-end\\GrammyWammy\\front-end\\src\\components\\modules\\Setting\\ResponseSetting\\IndividualComponents\\autoResponder.js":"28","C:\\Users\\PRODIPTO\\Downloads\\Front-end\\GrammyWammy\\front-end\\src\\components\\modules\\Setting\\DefaultMessageSettings\\IndividualComponents\\segment.js":"29","C:\\Users\\PRODIPTO\\Downloads\\Front-end\\GrammyWammy\\front-end\\src\\components\\modules\\Setting\\DefaultMessageSettings\\IndividualComponents\\group.js":"30","C:\\Users\\PRODIPTO\\Downloads\\Front-end\\GrammyWammy\\front-end\\src\\services\\segmentServices.js":"31","C:\\Users\\PRODIPTO\\Downloads\\Front-end\\GrammyWammy\\front-end\\src\\services\\groupServices.js":"32"},{"size":537,"mtime":1619594609000,"results":"33","hashOfConfig":"34"},{"size":362,"mtime":1619594609000,"results":"35","hashOfConfig":"34"},{"size":338,"mtime":1619594609000,"results":"36","hashOfConfig":"34"},{"size":211,"mtime":1619594609000,"results":"37","hashOfConfig":"34"},{"size":313,"mtime":1619594609000,"results":"38","hashOfConfig":"34"},{"size":2009,"mtime":1619594609000,"results":"39","hashOfConfig":"34"},{"size":7719,"mtime":1619594609000,"results":"40","hashOfConfig":"34"},{"size":277,"mtime":1619594609000,"results":"41","hashOfConfig":"34"},{"size":6490,"mtime":1620424078000,"results":"42","hashOfConfig":"34"},{"size":1978,"mtime":1619594609000,"results":"43","hashOfConfig":"34"},{"size":7985,"mtime":1620424078000,"results":"44","hashOfConfig":"34"},{"size":1581,"mtime":1620986429672,"results":"45","hashOfConfig":"34"},{"size":7862,"mtime":1619594609000,"results":"46","hashOfConfig":"34"},{"size":9323,"mtime":1619594609000,"results":"47","hashOfConfig":"34"},{"size":9352,"mtime":1620372987000,"results":"48","hashOfConfig":"34"},{"size":265,"mtime":1620574356383,"results":"49","hashOfConfig":"34"},{"size":1992,"mtime":1619594609000,"results":"50","hashOfConfig":"34"},{"size":2175,"mtime":1619594609000,"results":"51","hashOfConfig":"34"},{"size":4085,"mtime":1619594609000,"results":"52","hashOfConfig":"34"},{"size":3739,"mtime":1620992729135,"results":"53","hashOfConfig":"34"},{"size":3409,"mtime":1619594609000,"results":"54","hashOfConfig":"34"},{"size":11805,"mtime":1620992665780,"results":"55","hashOfConfig":"34"},{"size":765,"mtime":1619594609000,"results":"56","hashOfConfig":"34"},{"size":2258,"mtime":1619594609000,"results":"57","hashOfConfig":"34"},{"size":2086,"mtime":1619594609000,"results":"58","hashOfConfig":"34"},{"size":4048,"mtime":1619594609000,"results":"59","hashOfConfig":"34"},{"size":10940,"mtime":1620989829115,"results":"60","hashOfConfig":"34"},{"size":26387,"mtime":1620989789259,"results":"61","hashOfConfig":"34"},{"size":23370,"mtime":1620989618714,"results":"62","hashOfConfig":"34"},{"size":28730,"mtime":1620989699917,"results":"63","hashOfConfig":"34"},{"size":2694,"mtime":1619594609000,"results":"64","hashOfConfig":"34"},{"size":2674,"mtime":1619594609000,"results":"65","hashOfConfig":"34"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"lqmlml",{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"108","messages":"109","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"113","messages":"114","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"118","messages":"119","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":27,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"123","messages":"124","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":26,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":40,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":44,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152"},"C:\\Users\\PRODIPTO\\Downloads\\Front-end\\GrammyWammy\\front-end\\src\\index.js",[],"C:\\Users\\PRODIPTO\\Downloads\\Front-end\\GrammyWammy\\front-end\\src\\reportWebVitals.js",[],"C:\\Users\\PRODIPTO\\Downloads\\Front-end\\GrammyWammy\\front-end\\src\\App.js",[],"C:\\Users\\PRODIPTO\\Downloads\\Front-end\\GrammyWammy\\front-end\\src\\components\\common\\logger.js",[],"C:\\Users\\PRODIPTO\\Downloads\\Front-end\\GrammyWammy\\front-end\\src\\components\\layouts\\AppLayout.js",[],"C:\\Users\\PRODIPTO\\Downloads\\Front-end\\GrammyWammy\\front-end\\src\\routes\\AppRoute.js",["153"],"import React, { lazy, Suspense } from \"react\";\nimport { Route, Switch, withRouter } from \"react-router-dom\";\nimport log from \"../components/common/logger\";\nimport { Container } from \"reactstrap\";\nimport classNames from \"classnames\";\n\n\n\nconst Login = lazy(() => import(\"../components/modules/Auth/Login\"));\nconst ForgotPassword = lazy(() => import(\"../components/modules/Auth/ForgotPassword\"));\nconst NotFound = lazy(() => import(\"../components/modules/Auth/NotFound\"));\nconst Dashboard = lazy(() => import(\"../components/modules/Main/Dashboard\"));\nconst Setting = lazy(() => import(\"../components/modules/Setting/setting\"));\nconst AutoResponder = lazy(() => import(\"../components/modules/AutoResponder/autoResponder\"));\nconst AutoResponderCreate = lazy(() =>  import(\"../components/modules/AutoResponder/autoResponderCreate\"))\nconst AutoResponderEdit = lazy(() =>  import(\"../components/modules/AutoResponder/autoResponderEdit\"));\n\nconst Logout  = lazy(() =>  import(\"../components/modules/Auth/logout\"));\nconst AppRoute = ({ sidebarIsOpen, toggleSidebar }) => {\n  log.info(\"**** AppRoute ****\");\n\n  return (\n    <Suspense fallback={<div />}>\n      <Container\n        fluid\n        className={classNames(\"content\", { \"is-open\": sidebarIsOpen })}\n      >\n        {/* <Topbar toggleSidebar={toggleSidebar} /> */}\n        <Switch>\n        <Route exact path=\"/\" test=\"abc\" component={Login} />\n        <Route exact path=\"/forgotPassword\" component={ForgotPassword} />\n        <Route  exact  path=\"/dashboard\" component={Dashboard} />\n        <Route  exact  path=\"/setting\" component={Setting} />\n        <Route  exact  path=\"/autoresponder\" component={AutoResponder} />\n        <Route  exact  path=\"/autorespondercreate\" component={AutoResponderCreate} />\n        <Route  exact  path=\"/autoresponderedit/:idfy\"  component={AutoResponderEdit} />\n        \n        <Route  exact  path=\"/logout\"  component={Logout} />\n        </Switch>\n      </Container>\n    </Suspense>\n  );\n};\nexport default withRouter(AppRoute);\n","C:\\Users\\PRODIPTO\\Downloads\\Front-end\\GrammyWammy\\front-end\\src\\components\\modules\\Auth\\ForgotPassword.js",["154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","169"],"import React, { Component} from \"react\";\nimport { Redirect, withRouter } from 'react-router-dom';\n\nimport {kyubiExtensionId}  from \"../../../config\";\nimport \"./login.css\";\nimport AuthServices from \"../../../services/authService\";\nimport loginHelper from \"../../../helper/loginHelper\";\nimport { NavLink } from \"react-router-dom\";\nimport LoaderLogo from \"../../../images/Loader.gif\";\nimport logo from \"../../../images/Logo_White.svg\";\nimport mail from \"../../../images/mail.svg\";\nimport messanger from \"../../../images/Messanger.svg\";\nimport path from \"../../../images/Path3.svg\";\nclass ForgotPassword extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n          email:\"\",\n          password:\"\",\n          loader:false,\n          error:false,\n          errorMessage:\"\",\n          loadingstatus:false\n        }\n        \n\n      }\n    /**\n    * @inputChangeHandller \n    * getting input field values\n    */\n    inputChangeHandller = (event) => {\n       this.setState({ [event.target.name]: event.target.value })\n    }\n    /**\n    * @checkBackgroundFetching \n    * Check  Wether Background Fetching is  done or not\n    */\n    checkBackgroundFetching() {\n            // setInterval(() => {\n            //     let inBackgroundFetching=localStorage.getItem('inBackgroundFetching');\n            //     console.log(\"This check ++++++++++\",inBackgroundFetching);\n            //     if(inBackgroundFetching !== \"true\"){\n            //         console.log(\"This check 111++++++++++\",inBackgroundFetching);\n            //         this.props.history.push('/dashboard');       \n                               \n            //     }\n            // },2000);\n        }\n    /**\n    * @handleLoginFormValidation \n    * email and password field blank validation\n    */\n       handleForgotPasswordFormValidation() {\n        let fields = {\n        email: this.state.email,\n        };\n        \n        let formIsValid = true;\n        let emailRegex = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n        let checkResult = emailRegex.test(String(this.state.email).toLowerCase());\n        if (!fields[\"email\"]) {\n        formIsValid = false;\n        this.setState({errorMessage:\"Email Is Required\"});\n        return formIsValid;\n        } else if (checkResult === false) {\n        formIsValid = false;\n        this.setState({errorMessage:\"Please enter a proper email\"});\n        return formIsValid;\n        }\n        else{\n            formIsValid = true;\n            return formIsValid;\n        }\n        \n        return formIsValid;\n    }\n     /**\n    * @loginHandler \n    * in this function we are checking the email id, password\n    * and if the details are correct then login them and also take care about the remember password one\n    */\n        forgotPasswordHandler = async (event) => {\n        event.preventDefault();\n        event.preventDefault();\n        console.log(this.state.email);\n        let payload = {\n        email: this.state.email\n        }\n        if (this.handleForgotPasswordFormValidation()) {\n            this.setState({ error:false});\n            this.setState({errorMessage:\"\"});\n            let payload  ={\n                extId: kyubiExtensionId,\n                email: this.state.email\n            }\n            await AuthServices.forgotPassword(payload).then(async result=>{\n                console.log(\"This I gggggggg\",result);\n                localStorage.setItem('token', result.data.token);\n                localStorage.setItem('inBackgroundFetching', true);\n                if(result.data.code === 1){\n\n                    this.setState({ loader: false });\n                    this.setState({successMessage:result.data.message});\n                    this.setState({ success:true});\n                    this.setState({ error:false});\n                    \n                }else{\n                this.setState({ loader: false });\n                this.setState({errorMessage:\"User not found or In-Active\"});\n                this.setState({ error:true});\n                this.setState({ success:false});\n                }\n                \n                //this.checkBackgroundFetching();\n                 //console.log(LC);\n                 \n                //history.push(\"/dashboard\");\n            }).catch(error=>{\n                console.log(error);\n                this.setState({ loader: false });\n                this.setState({errorMessage:\"User not found or In-Active\"});\n                this.setState({ error:true});\n            });\n            \n\n\n        }else{\n            this.setState({ error:true});\n\n        }\n        //this.setState({ loader: false });\n    }\n\n    componentDidMount(){\n        this.setState({ loader: true });\n        let token=localStorage.getItem('token');\n        let inBackgroundFetching=localStorage.getItem('inBackgroundFetching');\n        if(token){\n            if(inBackgroundFetching !== \"true\"){\n                this.props.history.push('/dashboard');    \n            }else{\n                this.setState({ loader: false });\n            }\n        }else{\n            this.setState({ loader: false });\n        }\n        \n    }\n\n    render() {\n        \n        return (\n            <div>\n            {this.state.loader && (   \n            <div class=\"after_login_refresh\"><img src={LoaderLogo} alt=\"\"/></div>\n            )}\n            <div className=\"loginscreen\">\n            <div className=\"graphics1\"></div>\n            <div className=\"graphics2\"></div>\n            <div className=\"logo\"><img src={logo} /></div>\n            <div className=\"login_container\">\n                <div className=\"login_welcome_block\">\n                    Welcome,\n                    <h3>Please provide your email!</h3>\n                </div>\n                <div className=\"login_block\">\n                        <form>\n                            <label>\n                                <span><img src={mail}/></span>\n                                <input \n                                name=\"email\"\n                                id=\"email\"\n                                type=\"email\"\n                                placeholder=\"Email Address\"\n                                onChange={this.inputChangeHandller}\n                                />\n                            </label>\n                            \n                            <div className=\"text-right gap1\">\n                                <NavLink  to=\"/\">\n                                    <p className=\"link\">Login</p>\n                                </NavLink>\n                            </div>\n                            <button type=\"button\" className=\"blue_btn\" onClick={this.forgotPasswordHandler} >SUBMIT</button>\n                            <div className=\"login_signup\">\n                                Don’t have an account? <a href=\"#\">Sign up</a>\n                            </div>\n                            {this.state.error && ( \n                                <div className=\"error\"> {this.state.errorMessage} *</div>\n                            )}\n                            {this.state.success && ( \n                                <div class=\"text-success\">{this.state.successMessage}</div> \n                            )}  \n                        </form>\n                </div>  \n                <div className=\"footer\">\n                    <p>Powered by <a href=\"#\">Tier5</a> and the <a href=\"#\">Tier5 Partnership</a></p>\n                    <a href=\"#\"><img src={path}/></a> <a href=\"#\"><img src={messanger}/></a>\n                </div>\n            </div>\n        </div>\n        </div>\n        );\n    }\n}\nexport default ForgotPassword;","C:\\Users\\PRODIPTO\\Downloads\\Front-end\\GrammyWammy\\front-end\\src\\components\\modules\\Auth\\NotFound.js",["170","171"],"import React, { Component } from 'react';\nimport { Redirect, withRouter } from 'react-router-dom'\n\nclass NotFound extends Component {\n    render() {\n        return (\n          <div className=\"\">\n          Hello Login\n          </div>\n        );\n    }\n}\nexport default NotFound;","C:\\Users\\PRODIPTO\\Downloads\\Front-end\\GrammyWammy\\front-end\\src\\components\\modules\\Main\\Dashboard.js",["172","173","174","175","176","177","178","179","180","181"],"import React, { Component } from 'react';\nimport { Redirect, withRouter } from 'react-router-dom'\nimport  {OpenFacebookInTab,CheckUserInfoFromFaccebook,OpenFacebookProfileInTab} from  '../../../helper/helper'\nimport Header from \"../Common/header\";\nimport Footer from \"../Common/footer\";\nimport settingService from \"../../../services/setting\";\nimport AuthServices from \"../../../services/authService\";\nimport biglogo from \"../../../images/biglogo.svg\";\nimport RefreshLogo from \"../../../images/layer1.svg\";\nimport FaceBookLogo from \"../../../images/Instagram.png\";\nimport IconLogo from \"../../../images/icon.svg\";\nimport AvatarLogo from \"../../../images/Avatar.png\";\nimport LoaderLogo from \"../../../images/Loader.gif\"\nclass Dashboard extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      fb_image:AvatarLogo,\n      fb_name:\"XXXXX\",\n      fb_username:\"\",\n      fb_id:\"\",\n      fb_logged_id:\"\",\n      autoresponder:\"0\",\n      default_message:\"0\",\n      loader:true,\n      is_user_logged_in_facebook:\"false\"\n    }\n  }\n\n  fbHandler = async (event) => {\n    event.preventDefault();\n    let fb_logged_id=localStorage.getItem('insta_logged_id');\n    console.log(\"You Are Loged in\",fb_logged_id);\n    if(fb_logged_id === \"false\"){\n      OpenFacebookInTab();\n    }else{\n      OpenFacebookProfileInTab();\n    }\n  }\n  autoresponderHandler  = async (event) =>{\n  }\n  refreshHandler  = async (event) =>  {\n    event.preventDefault();\n    this.setState({\n      loader:true\n    })\n   // CheckUserInfoFromFaccebook();\n    setTimeout(() => {\n\n      let fb_image=localStorage.getItem('insta_image');\n      let fb_username=localStorage.getItem('insta_username');\n      let fb_name=localStorage.getItem('insta_name');\n      let fb_id=localStorage.getItem('insta_id');\n      \n      this.setState({\n        fb_image:fb_image,\n        fb_username:fb_username,\n        fb_name:fb_name,\n        fb_id:fb_id,\n        is_user_logged_in_facebook:localStorage.getItem('insta_logged_id'),\n        loader:false\n      })\n\n    }, 4000);\n  }\n  componentDidMount(){\n    let  params ={\n      user_rec    :   localStorage.getItem('kyubi_user_token')\n      };\n      AuthServices.userRetrive(params).then(result=>{\n        console.log(\"This I got From backGround SUSSSSS\",result);\n        if(result.data.code==1){\n                  let responsenewvalue =result.data;\n                  localStorage.setItem('kyubi_user_token', responsenewvalue.payload.UserInfo.kyubi_user_token);\n                  localStorage.setItem('user_id', responsenewvalue.payload.UserInfo.user_id);\n                  localStorage.setItem('insta_id', responsenewvalue.payload.UserInfo.instagram_fbid);\n                  localStorage.setItem('insta_username', responsenewvalue.payload.UserInfo.instagram_profile_name);\n                  localStorage.setItem('insta_name', responsenewvalue.payload.UserInfo.instagram_name);\n                  localStorage.setItem('insta_image', responsenewvalue.payload.UserInfo.instagram_image);\n                  \n                  if(responsenewvalue.payload.UserSettings.default_message){\n                    localStorage.setItem('default_message', responsenewvalue.payload.UserSettings.default_message);\n                  }else{\n                    localStorage.setItem('default_message', 0);\n                  }\n                  if(responsenewvalue.payload.UserSettings.default_message_text){\n                    localStorage.setItem('default_message_text', responsenewvalue.payload.UserSettings.default_message_text);\n                  }else{\n                    localStorage.setItem('default_message_text',\"\");\n                  }\n                  if(responsenewvalue.payload.UserSettings.autoresponder){\n                    localStorage.setItem('autoresponder', responsenewvalue.payload.UserSettings.autoresponder);\n                    \n                  }else{\n                    localStorage.setItem('autoresponder', 0);\n                  }\n                  if(responsenewvalue.payload.UserSettings.default_time_delay){\n                    localStorage.setItem('default_time_delay', responsenewvalue.payload.UserSettings.default_time_delay);\n                  }\n                  \n                  localStorage.setItem('keywordsTally', JSON.stringify(responsenewvalue.payload.AutoResponderKeywords));\n                  this.setState({\n                        fb_image:localStorage.getItem('insta_image'),\n                        fb_name:localStorage.getItem('insta_name'),\n                        fb_username:localStorage.getItem('insta_username'),\n                        is_user_logged_in_facebook:localStorage.getItem('insta_logged_id')\n                  })\n        }else{\n          this.setState({\n            fb_image:localStorage.getItem('insta_image'),\n            fb_name:localStorage.getItem('insta_name'),\n            fb_username:localStorage.getItem('insta_username'),\n            is_user_logged_in_facebook:localStorage.getItem('insta_logged_id')\n          })\n        }\n        this.setState({\n          loader:false\n        })\n      }).catch(error=>{\n        console.log(\"This I got From backGround EROOOOOO\",error);\n      })\n    \n  }\n    render() {\n        return (\n          <div>\n            {this.state.loader && (   \n                <div className=\"after_login_refresh\"><img src={LoaderLogo} alt=\"\"/></div>\n            )}\n            <div className=\"dashboard\">\n              <Header selectedtab=\"dashboard\"></Header>\n              <div className=\"after_log_profile\">\n                <img src={this.state.fb_image != \"\" ? this.state.fb_image : AvatarLogo} alt=\"\"/>\n                <p>Welcome</p>\n                <h3>{this.state.fb_name}</h3>\n              </div>\n              <div className=\"fb_login_request\">\n                {this.state.is_user_logged_in_facebook == \"true\" ?\n                \"\" \n                :\n                <div className=\"login_caution\">\n                  <img src={IconLogo} alt=\"\"/>\n                  Please login to your Instagram profile and click the refresh button below to proceed further.\n                </div>\n                }\n                \n                <a onClick={this.refreshHandler}  href=\"#\" className=\"bluebtn\"><img src={RefreshLogo} alt=\"\"/> Refresh</a>\n                <a  onClick={this.fbHandler} href=\"#\" className=\"whitebtn\"><img src={FaceBookLogo} alt=\"\"/> Instagram</a>\n              </div>\n              <Footer></Footer>\n            </div>\n          </div>\n        );\n    }\n}\nexport default Dashboard;","C:\\Users\\PRODIPTO\\Downloads\\Front-end\\GrammyWammy\\front-end\\src\\components\\modules\\Setting\\setting.js",["182","183","184"],"import React, { Component } from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport Header from \"../Common/header\";\nimport Footer from \"../Common/footer\";\nimport biglogo from \"../../../images/biglogo.svg\";\nimport ResponseSetting from \"../Setting/ResponseSetting/responseSetting\";\nimport MessageSetting  from \"../Setting/DefaultMessageSettings/defaultMessageSettings\"\nclass setting extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n          responseSetting:1,\n          messageSetting:0,\n          loader:false\n        }\n      }\n      activateResponseSetting  = async (event) =>  {\n        event.preventDefault();\n        this.setState({\n            responseSetting:1,\n            messageSetting:0\n        })\n        \n      }\n      activateMessageSetting  = async (event) =>  {\n        event.preventDefault();\n        this.setState({\n            responseSetting:0,\n            messageSetting:1\n        })\n        \n      }\n      render() {\n        return (\n            <div>\n                {this.state.loader && (   \n                    <div className=\"after_login_refresh\"><img src={biglogo} alt=\"\"/></div>\n                )}\n                <div className=\"dashboard\">\n                <Header selectedtab=\"setting\"></Header>\n                <ul class=\"maintab\">\n                    <li><a href=\"\" onClick={this.activateResponseSetting} id=\"responce\" className={this.state.responseSetting ?\"active\":\"\"}>Response Settings</a></li>\n                    <li><a href=\"\" onClick={this.activateMessageSetting} id=\"message\" className={this.state.messageSetting ?\"active\":\"\"}>Message Settings</a></li>\n                </ul>\n                {this.state.responseSetting ?\n                <ResponseSetting></ResponseSetting>\n                :\n                <MessageSetting></MessageSetting>\n                }\n                <Footer></Footer>\n                </div>\n            </div>\n\n        )\n                }\n}\nexport default setting;","C:\\Users\\PRODIPTO\\Downloads\\Front-end\\GrammyWammy\\front-end\\src\\components\\modules\\AutoResponder\\autoResponder.js",["185"],"import React, { Component } from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport Sidebar from \"../Common/sidebar\";\nimport AutoResponderService from  \"../../../services/autoResponderServices\";\nimport settingService   from  \"../../../services/setting\";\nclass autoResponnder extends Component {\n    constructor(props) {\n      super(props)\n      this.state = {\n        autoresponderList :[],\n        loader:true\n      }\n    }\n    componentDidMount(){\n        let UserToken=localStorage.getItem(\"kyubi_user_token\");\n        //this.setState({autoresponderList:autoresponderList})\n        let payload ={\n            user_id:UserToken\n        }\n        AutoResponderService.listAutoResponder(payload).then(async response =>{\n          console.log(\"This is what i Got\",response);\n          if(response.data.payload !=  \"\" ){\n            console.log(\"This is what i Got\",response.data.payload);\n            if(response.data.payload.autokey.length>0){\n                console.log(\"This is what i Got\",response.data.payload.autokey);\n                this.setState({autoresponderList:response.data.payload.autokey})\n            }\n            \n          }\n          \n            this.setState({loader:false});\n        }).catch(error=>{\n            this.setState({loader:false});\n        });\n\n    \n    \n          let user_id=localStorage.getItem('user_id');\n          let Newpayload   ={user_id:user_id }\n          settingService.getUserDetails(Newpayload).then(result  =>{\n            console.log(\"This is what i111 Got\",result);\n            localStorage.setItem('kyubi_user_token', result.data.payload.UserInfo.kyubi_user_token);\n                      localStorage.setItem('user_id', result.data.payload.UserInfo.user_id);\n                      localStorage.setItem('insta_id', result.data.payload.UserInfo.instagram_id);\n                      localStorage.setItem('insta_username', result.data.payload.UserInfo.instagram_name);\n                      localStorage.setItem('insta_name', result.data.payload.UserInfo.instagram_profile_name);\n                      localStorage.setItem('fb_image', result.data.payload.UserInfo.instagram_image);\n                      \n\n                      if(result.data.payload.UserSettings.default_message){\n                        localStorage.setItem('default_message', result.data.payload.UserSettings.default_message);\n                      }\n                      if(result.data.payload.UserSettings.default_message_text){\n                        localStorage.setItem('default_message_text', result.data.payload.UserSettings.default_message_text);\n                      }\n                      if(result.data.payload.UserSettings.autoresponder){\n                        localStorage.setItem('autoresponder', result.data.payload.UserSettings.autoresponder);\n                      }\n                      if(result.data.payload.UserSettings.default_time_delay){\n                        localStorage.setItem('default_time_delay', result.data.payload.UserSettings.default_time_delay);\n                      }\n                      \n                      localStorage.setItem('keywordsTally', JSON.stringify(result.data.payload.AutoResponderKeywords));\n          }).catch(error=>{\n            console.log(\"This is what i222 Got\",error);\n          })\n\n    \n    }\n    render() {\n        return (\n            <div className=\"wrapper\">\n                {this.state.loader && (   \n                <div className=\"overlay\">\n                <i className=\"fas fa-2x fa-sync-alt fa-spin\"></i>\n                </div>\n                )}\n                <Sidebar  selectedtab=\"setting\"></Sidebar>\n                <div className=\"content-wrapper\">\n                <section className=\"content-header\">\n                    <div className=\"container-fluid\">\n                        <div className=\"row mb-12\">\n                            <div className=\"col-sm-6\">\n                            <h1>Auto-Responder</h1>\n                            \n                            <NavLink  to=\"/autorespondercreate\"  class=\"btn btn-app\">\n                                <i class=\"fas fa-plus-square\"></i> Create New Auto-Responder\n                            </NavLink>\n                            </div>\n                        </div>\n                    </div>\n                </section>\n                <section className=\"content\">\n                    <div className=\"container-fluid\">\n                        <div className=\"row overflow-auto\">\n                            <div className=\"col-md-12\">\n                            {Object.keys(this.state.autoresponderList).length > 0 ?\n                            (this.state.autoresponderList.map((data, i) => {\n                                let editlink= \"/autoresponderedit/\"+data._id;\n                            return(\n                                \n                            <div className={data.status ===  1 ? \"card card-success shadow-none\" : \"card card-danger shadow-none\" }>\n                                <div className=\"card-header\">\n                                    <h3 className=\"card-title\">{data.auto_responder_name}</h3>\n                                    <div className=\"card-tools\">\n                                        <button type=\"button\" className=\"btn btn-tool\" data-card-widget=\"collapse\">\n                                        <NavLink  to={editlink}><i className=\"far fa-edit\"></i></NavLink>\n                                        </button>\n                                    </div>\n                                </div>\n                                <div className=\"card-body\" >\n                                    <div className={data.status ===  1 ? \"callout callout-success\" : \"callout callout-danger\" }>\n                                        <h6>Response Message :</h6>\n                                        <p>{data.message}</p>\n                                    </div>\n                                    <div className={data.status ===  1 ? \"callout callout-success\" : \"callout callout-danger\" }>\n                                        <h6>Keywords :</h6>\n                                        <p>\n                                        {data.autoresponderkeywords.map((result, i) => {\n                                        return (\n                                            <span class=\"badge badge-info\">{result.keywords}</span>\n                                        )\n                                        })\n                                        }\n                                        \n                                        </p>\n                                    </div>\n                                </div>\n                            </div>\n                            \n                            )\n                            }))\n                            :\n                            (this.state.loader ? \" \": \n                            <div className=\"card card-danger shadow-none\">\n                            <div className=\"card-header\">\n                                <h3 className=\"card-title\">Oops !</h3>\n                                <div className=\"card-tools\">\n                                    \n                                </div>\n                            </div>\n                            <div className=\"card-body\" >\n                                <div className=\"callout callout-danger\">\n                                    <h5>Sorry There Is No Auto-Responder</h5>\n                                    \n                                </div>\n                                \n                            </div>\n                            </div> \n                                )\n                              \n                            }       \n                            \n                            </div>\n                        </div>\n                    </div>\n                </section>\n                </div>\n            </div>\n    \n        );\n    }\n}\n\nexport default autoResponnder;","C:\\Users\\PRODIPTO\\Downloads\\Front-end\\GrammyWammy\\front-end\\src\\components\\modules\\Auth\\logout.js",["186","187","188","189"],"import React, { Component} from \"react\";\nimport { Redirect, withRouter } from 'react-router-dom';\nimport loginHelper from \"../../../helper/loginHelper\";\nimport {kyubiExtensionId}  from \"../../../config\";\nimport \"./login.css\";\n\nclass logout extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n          \n        }\n        \n\n      }\n      componentDidMount(){\n        let LO = loginHelper.logout();\n        \n        \n        this.props.history.push('/');\n         \n      }\n    render() {\n        return (\n\n          <div className=\"wrapper\">\n            \n            \n\n            <div className=\"content-wrapper\">\n              <section className=\"content-header\">\n                <div className=\"container-fluid\">\n                  <div className=\"row mb-12\">\n                    <div className=\"col-sm-6\">\n                      \n                    </div>\n                  </div>\n                </div>\n              </section>\n              <section className=\"content\">\n                <div className=\"container-fluid\">\n                  <div className=\"row\">\n                    <div className=\"col-md-12\">\n                    <div class=\"alert alert-danger alert-dismissible\">\n                  \n                  <h5><i class=\"icon fas fa-ban\"></i> Alert!</h5>\n                  Thanks For Being With Us We are Loging You Out\n                </div>\n                    </div>\n                  </div>\n                </div>\n              </section>\n            </div>\n          </div>\n          \n        );\n    }\n}\nexport default logout;","C:\\Users\\PRODIPTO\\Downloads\\Front-end\\GrammyWammy\\front-end\\src\\components\\modules\\AutoResponder\\autoResponderCreate.js",["190","191","192"],"import React, { Component } from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport AutoResponderService from  \"../../../services/autoResponderServices\"\nimport Sidebar from \"../Common/sidebar\"\nimport ReactDOM from 'react-dom';\nimport { WithContext as ReactTags } from 'react-tag-input';\nconst KeyCodes = {\n    comma: 188,\n    enter: 13,\n  };\n  \nconst delimiters = [KeyCodes.comma, KeyCodes.enter];\n  \nclass autoResponderCreate extends Component {\n    constructor(props) {\n      super(props)\n      this.state = {\n        auto_responder_name:\"\",\n        auto_responder_message:\"\",\n        auto_responder_status:1,\n        loader:false,\n        auto_responder_keywords: [],\n      };\n        this.handleDelete = this.handleDelete.bind(this);\n        this.handleAddition = this.handleAddition.bind(this);\n        \n    }\n    handleDelete(i) {\n        const { auto_responder_keywords } = this.state;\n        this.setState({\n            auto_responder_keywords: auto_responder_keywords.filter((auto_responder_keyword, index) => index !== i),\n        });\n    }\n\n    handleAddition(auto_responder_keyword) {\n        this.setState(state => ({ auto_responder_keywords: [...state.auto_responder_keywords, auto_responder_keyword] }));\n    }\n\n    \n    /**\n        * @inputChangeHandller \n        * getting input field values\n    */\n    inputChangeHandller = (event) => {\n        this.setState({ [event.target.name]: event.target.value })\n    }\n    autoSetting = () => {\n        console.log(\"hiyy\",this.state.auto_responder_status )\n        if(this.state.auto_responder_status === 0){\n            this.setState({auto_responder_status:1})\n        }else{\n            this.setState({auto_responder_status:0})\n        }\n    }\n    createAutoResponderGroupHandler =  (event) =>{\n        this.setState({loader:true});\n        event.preventDefault();\n        let Token=localStorage.getItem(\"kyubi_user_token\");\n        let payload = {\n            user_id:Token,\n            auto_responder_name:this.state.auto_responder_name,\n            auto_responder_keywords:this.state.auto_responder_keywords,\n            auto_responder_message:this.state.auto_responder_message,\n            auto_responder_status:this.state.auto_responder_status\n        }\n        console.log(\"This I gottttt\",payload);\n        AutoResponderService.createAutoResponder(payload).then(response =>{\n          \n          this.setState({loader:false});\n          this.props.history.push('/autoresponder');\n        });\n      }\n    render() {\n        const { auto_responder_keywords } = this.state;\n        return (\n            <div className=\"wrapper\">\n                {this.state.loader && (   \n                    <div className=\"overlay\">\n                    <i className=\"fas fa-2x fa-sync-alt fa-spin\"></i>\n                    </div>\n                )}\n                <Sidebar  selectedtab=\"setting\"></Sidebar>\n                <div className=\"content-wrapper\">\n                <section className=\"content-header\">\n                    <div className=\"container-fluid\">\n                        <div className=\"row mb-12\">\n                            <div className=\"col-sm-6\">\n                            <h1>Auto-Responder</h1>\n                            </div>\n                        </div>\n                    </div>\n                </section>\n                <section className=\"content\">\n                    <div className=\"container-fluid\">\n                        <div className=\"row\">\n                            <div className=\"col-md-12\">\n                            \n                            <div className=\"card card-primary\">\n                                <div className=\"card-header\">\n                                    <h3 className=\"card-title\"> Create Auto-Responder</h3>\n                                </div>\n                                <form>\n                                <div className=\"card-body\">\n                                    \n                                    <div className=\"form-group\">\n                                        <label for=\"exampleInputEmail1\">Auto-Responder Name</label>\n                                        <input type=\"text\"\n                                            name=\"auto_responder_name\" \n                                            className=\"form-control\" \n                                            id=\"exampleInputEmail1\" \n                                            placeholder=\"Auto-Responder Name\" \n                                            value={this.state.auto_responder_name}\n                                            onChange={this.inputChangeHandller}\n                                        />\n                                    </div>\n                                    \n                                    <div className=\"form-group\">\n                                        <label for=\"exampleInputEmail1\">Auto-Responder Keywords</label>\n                                        <ReactTags \n                                        placeholder=\"Press enter Or Press , to Create Autoresponder Keywords\"\n                                        tags={auto_responder_keywords}\n                                        handleDelete={this.handleDelete}\n                                        handleAddition={this.handleAddition}\n                                        allowUnique={true}\n                                        delimiters={delimiters} />\n                                        \n\n\n                                        \n                                    </div>\n                                    <div className=\"form-group\">\n                                        <label for=\"exampleInputEmail1\">Auto-Responder Response Message</label>\n                                        <textarea \n                                        name=\"auto_responder_message\" \n                                        value=\"\"  \n                                        className=\"form-control\" \n                                        rows=\"3\"  \n                                        placeholder=\"Please enter the response message....\"\n                                        value={this.state.auto_responder_message}\n                                        onChange={this.inputChangeHandller}\n                                        ></textarea>\n                                    </div>\n                                    <div className=\"form-group clearfix\">\n                                        <div className=\"icheck-success d-inline\">\n                                        {this.state.auto_responder_status ?\n                                        <input type=\"checkbox\" id=\"checkboxPrimary3\" name=\"auto_responder_status\" onChange={this.autoSetting} checked/>\n                                        :\n                                        <input type=\"checkbox\" id=\"checkboxPrimary3\" name=\"auto_responder_status\" onChange={this.autoSetting}/>\n                                        }\n                                        <label for=\"checkboxPrimary3\">\n                                            Activate Auto-Responder\n                                        </label>\n                                        </div>\n                                    </div>\n                                    \n                                </div>           \n                                <div className=\"card-footer\">\n                                <button type=\"submit\" className=\"btn btn-primary\" onClick={this.createAutoResponderGroupHandler} >Submit</button>\n                                </div>\n                                </form>\n                            </div>\n\n                            </div>\n                        </div>\n                    </div>\n                </section>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default autoResponderCreate;","C:\\Users\\PRODIPTO\\Downloads\\Front-end\\GrammyWammy\\front-end\\src\\components\\modules\\AutoResponder\\autoResponderEdit.js",["193","194","195"],"import React, { Component } from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport AutoResponderService from  \"../../../services/autoResponderServices\"\nimport Sidebar from \"../Common/sidebar\"\nimport ReactDOM from 'react-dom';\nimport { WithContext as ReactTags } from 'react-tag-input';\nconst KeyCodes = {\n    comma: 188,\n    enter: 13,\n  };\n  \nconst delimiters = [KeyCodes.comma, KeyCodes.enter];\nclass autoResponderEdit extends Component {\n    constructor(props) {\n      super(props)\n      this.state = {\n        auto_responder_id:\"\",\n        auto_responder_name:\"\",\n        auto_responder_keywords: [],\n        auto_responder_message:\"\",\n        auto_responder_status:0,\n        loader:false\n      };\n      this.handleDelete = this.handleDelete.bind(this);\n        this.handleAddition = this.handleAddition.bind(this);\n    }\n    handleDelete(i) {\n        const { auto_responder_keywords } = this.state;\n        this.setState({\n            auto_responder_keywords: auto_responder_keywords.filter((auto_responder_keyword, index) => index !== i),\n        });\n    }\n\n    handleAddition(auto_responder_keyword) {\n        this.setState(state => ({ auto_responder_keywords: [...state.auto_responder_keywords, auto_responder_keyword] }));\n    }\n    /**\n        * @inputChangeHandller \n        * getting input field values\n    */\n    inputChangeHandller = (event) => {\n        this.setState({ [event.target.name]: event.target.value })\n    }\n    autoSetting = () => {\n        console.log(\"hiyy\",this.state.auto_responder_status )\n        if(this.state.auto_responder_status === 0){\n            this.setState({auto_responder_status:1})\n        }else{\n            this.setState({auto_responder_status:0})\n        }\n    }\n    updateAutoResponderGroupHandler =  (event) =>{\n        this.setState({loader:true});\n        event.preventDefault();\n        let Token=localStorage.getItem(\"kyubi_user_token\");\n        let payload = {\n            user_id:Token,\n            auto_responder_id:this.state.auto_responder_id,\n            auto_responder_name:this.state.auto_responder_name,\n            auto_responder_keywords:this.state.auto_responder_keywords,\n            auto_responder_message:this.state.auto_responder_message,\n            auto_responder_status:this.state.auto_responder_status\n        }\n        console.log(\"This I am Getting\",payload)\n        \n        AutoResponderService.updateAutoResponder(payload).then(response =>{\n          \n          this.setState({loader:false});\n           this.props.history.push('/autoresponder');\n        });\n      }\n      backAutoResponderGroupHandler =  (event) =>{\n        \n          this.props.history.push('/autoresponder');\n       \n      }\n      componentDidMount(){\n        this.setState({loader:true});\n        let payload = { Id: this.props.match.params.idfy };\n        console.log(payload);\n        AutoResponderService.editAutoResponder(payload).then(async response=>{\n            console.log(response);\n            if(response.data.code === 1){\n                let newKey=[];\n                await response.data.payload[0].autoresponderkeywords.map(async (result, i) => {\n                    console.log(result.keywords);\n                    newKey.push({\"id\":result.keywords,\"text\":result.keywords})\n                });\n                this.setState({\n                    auto_responder_id:response.data.payload[0]._id,\n                    auto_responder_name:response.data.payload[0].auto_responder_name,\n                    auto_responder_message:response.data.payload[0].message,\n                    auto_responder_status:response.data.payload[0].status,\n                    auto_responder_keywords:newKey,\n                    loader:false\n                  })\n            }\n        }).catch(error=>{\n\n        })\n      }\n    render() {\n        const { auto_responder_keywords } = this.state;\n        return (\n            <div className=\"wrapper\">\n                {this.state.loader && (   \n                    <div className=\"overlay\">\n                    <i className=\"fas fa-2x fa-sync-alt fa-spin\"></i>\n                    </div>\n                )}\n                <Sidebar  selectedtab=\"setting\"></Sidebar>\n                <div className=\"content-wrapper\">\n                <section className=\"content-header\">\n                    <div className=\"container-fluid\">\n                        <div className=\"row mb-12\">\n                            <div className=\"col-sm-6\">\n                            <h1>Auto-Responder</h1>\n                            </div>\n                        </div>\n                    </div>\n                </section>\n                <section className=\"content\">\n                    <div className=\"container-fluid\">\n                        <div className=\"row\">\n                            <div className=\"col-md-12\">\n                            \n                            <div className=\"card card-primary\">\n                                <div className=\"card-header\">\n                                    <h3 className=\"card-title\"> Create Auto-Responder</h3>\n                                </div>\n                                <form>\n                                <div className=\"card-body\">\n                                    \n                                    <div className=\"form-group\">\n                                        <label for=\"exampleInputEmail1\">Auto-Responder Name</label>\n                                        <input type=\"text\"\n                                            name=\"auto_responder_name\" \n                                            className=\"form-control\" \n                                            id=\"exampleInputEmail1\" \n                                            placeholder=\"Auto-Responder Name\" \n                                            value={this.state.auto_responder_name}\n                                            onChange={this.inputChangeHandller}\n                                        />\n                                    </div>\n                                    \n                                    <div className=\"form-group\">\n                                        <label for=\"exampleInputEmail1\">Auto-Responder Keywords</label>\n                                        <ReactTags \n                                        placeholder=\"Press enter Or Press , to Create Autoresponder Keywords\"\n                                        tags={auto_responder_keywords}\n                                        handleDelete={this.handleDelete}\n                                        handleAddition={this.handleAddition}\n                                        allowUnique={true}\n                                        delimiters={delimiters} />\n                                    </div>\n                                    <div className=\"form-group\">\n                                        <label for=\"exampleInputEmail1\">Auto-Responder Response Message</label>\n                                        <textarea \n                                        name=\"auto_responder_message\" \n                                        value=\"\"  \n                                        className=\"form-control\" \n                                        rows=\"3\"  \n                                        placeholder=\"Please enter the response message....\"\n                                        value={this.state.auto_responder_message}\n                                        onChange={this.inputChangeHandller}\n                                        ></textarea>\n                                    </div>\n                                    <div className=\"form-group clearfix\">\n                                        <div className=\"icheck-success d-inline\">\n                                        \n                                        {this.state.auto_responder_status ?\n                                        <input type=\"checkbox\" id=\"checkboxPrimary3\" name=\"auto_responder_status\" onChange={this.autoSetting} checked/>\n                                        :\n                                        <input type=\"checkbox\" id=\"checkboxPrimary3\" name=\"auto_responder_status\" onChange={this.autoSetting}/>\n                                        }\n                                        <label for=\"checkboxPrimary3\">\n                                            Activate Auto-Responder\n                                        </label>\n                                        </div>\n                                    </div>\n                                    \n                                </div>           \n                                <div className=\"card-footer\">\n                                <button type=\"submit\" className=\"btn btn-primary\" onClick={this.updateAutoResponderGroupHandler} >Update</button>\n                                <button type=\"button\" className=\"btn btn-secondary  float-right\"  onClick={this.backAutoResponderGroupHandler} ><i className=\"far fa-arrow-alt-circle-left\"></i> Back</button>\n                                </div>\n                                </form>\n                            </div>\n\n                            </div>\n                        </div>\n                    </div>\n                </section>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default autoResponderEdit;","C:\\Users\\PRODIPTO\\Downloads\\Front-end\\GrammyWammy\\front-end\\src\\components\\modules\\Auth\\Login.js",["196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215"],"import React, { Component} from \"react\";\nimport { Redirect, withRouter, NavLink } from 'react-router-dom';\n\nimport {kyubiExtensionId}  from \"../../../config\";\nimport \"./login.css\";\nimport AuthServices from \"../../../services/authService\";\nimport loginHelper from \"../../../helper/loginHelper\";\n//import logo from \"../../../images/logo1.svg\";\nimport logo from \"../../../images/Logo_White.svg\";\nimport biglogo from \"../../../images/biglogo.svg\";\nimport LoaderLogo from \"../../../images/Loader.gif\"\nimport mail from \"../../../images/mail.svg\";\nimport lock from \"../../../images/lock.svg\";\nimport instagram from \"../../../images/Instagram_Icon.svg\";\nimport messanger from \"../../../images/Messanger.svg\";\nimport path from \"../../../images/Path3.svg\";\nclass Login extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n          email:\"\",\n          password:\"\",\n          loader:false,\n          error:false,\n          errorMessage:\"\",\n          loadingstatus:false\n        }\n        \n\n      }\n    /**\n    * @inputChangeHandller \n    * getting input field values\n    */\n    inputChangeHandller = (event) => {\n        this.setState({ [event.target.name]: event.target.value })\n    }\n    /**\n    * @checkBackgroundFetching \n    * Check  Wether Background Fetching is  done or not\n    */\n    checkBackgroundFetching() {\n            // setInterval(() => {\n            //     let inBackgroundFetching=localStorage.getItem('inBackgroundFetching');\n            //     console.log(\"This check ++++++++++\",inBackgroundFetching);\n            //     if(inBackgroundFetching !== \"true\"){\n            //         console.log(\"This check 111++++++++++\",inBackgroundFetching);\n            //         this.props.history.push('/dashboard');       \n                               \n            //     }\n            // },2000);\n        }\n    /**\n    * @handleLoginFormValidation \n    * email and password field blank validation\n    */\n    handleLoginFormValidation() {\n        let fields = {\n        email: this.state.email,\n        password: this.state.password,\n        };\n        \n        let formIsValid = true;\n        let emailRegex = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n        let checkResult = emailRegex.test(String(this.state.email).toLowerCase());\n        if (!fields[\"email\"]) {\n        formIsValid = false;\n        this.setState({errorMessage:\"Email Is Required\"});\n        return formIsValid;\n        } else if (checkResult === false) {\n        formIsValid = false;\n        this.setState({errorMessage:\"Please enter a proper email\"});\n        return formIsValid;\n        }\n        else if (!fields[\"password\"]) {\n        formIsValid = false;\n        this.setState({errorMessage:\"Password Is Required\"});\n        return formIsValid;\n        }else{\n            formIsValid = true;\n            return formIsValid;\n        }\n        \n        return formIsValid;\n    }\n     /**\n    * @loginHandler \n    * in this function we are checking the email id, password\n    * and if the details are correct then login them and also take care about the remember password one\n    */\n    loginHandler = async (event) => {\n        event.preventDefault();\n        \n        this.setState({ loader: true });\n        let payload = {\n        email: this.state.email,\n        password: this.state.password,\n        }\n        if (this.handleLoginFormValidation()) {\n            this.setState({ error:false});\n            this.setState({errorMessage:\"\"});\n            let payload  ={\n                extensionId: kyubiExtensionId,\n                email: this.state.email,\n                password: this.state.password,\n            }\n            await AuthServices.login(payload).then(async result=>{\n                if(result.data.code  === 1){\n                    let token = result.data.token;\n                    let tokens = token.split(\".\");\n                    tokens =atob(tokens[1]);\n                    let myObj = JSON.parse(tokens);\n                    console.log(\"Tis Is my Obj\",myObj)\n                    localStorage.setItem('kyubi_user_token', myObj.user.id);\n                    localStorage.setItem('inBackgroundFetching', true);\n                    let LC=loginHelper.login();\n                        setTimeout(() => {\n                        this.setState({ loader: false });\n                        this.props.history.push('/dashboard');\n                        console.log(\"sorry\");\n                    }, 4000);\n                }else{\n                    this.setState({ loader: false });\n                    this.setState({errorMessage:\"User not found or In-Active\"});\n                    this.setState({ error:true});\n                }\n                \n\n            }).catch(error=>{\n                console.log(error);\n                this.setState({ loader: false });\n                this.setState({errorMessage:\"User not found or In-Active\"});\n                this.setState({ error:true});\n            });\n            \n\n\n        }else{\n            this.setState({ error:true,loader: false});\n\n        }\n        //this.setState({ loader: false });\n    }\n\n    callFrameHandler    =   async   (event) =>{\n        loginHelper.framecaller();\n    }\n    componentDidMount(){\n        this.setState({ loader: true });\n        let kyubi_user_token=localStorage.getItem('kyubi_user_token');\n        let inBackgroundFetching=localStorage.getItem('inBackgroundFetching');\n        if(kyubi_user_token){\n            // if(inBackgroundFetching !== \"true\"){\n            //     this.props.history.push('/dashboard');    \n            // }else{\n            //     this.setState({ loader: false });\n            // }\n            this.props.history.push('/dashboard');\n        //    let AutoResponderStatus = localStorage.getItem('autoresponder');\n        //    let DefaultMessageStatus = localStorage.getItem('default_message');\n        //    let homeTabStatus = localStorage.getItem('home_tab');\n        //    if((AutoResponderStatus == 1 || DefaultMessageStatus == 1) && homeTabStatus== 0 ){\n        //       window.open(\"https://www.instagram.com/\");   \n        //    }\n            //window.open(\"https://www.w3schools.com\");    \n        }else{\n            this.setState({ loader: false });\n        }\n        \n    }\n\n    render() {\n        \n        return (\n            <div>\n                {this.state.loader && (   \n                <div class=\"after_login_refresh\"><img src={LoaderLogo} alt=\"\"/></div>\n                )}\n                <div className=\"loginscreen\">\n                <div className=\"graphics1\"></div>\n                <div className=\"graphics2\"></div>\n                <div className=\"logo\"><img src={logo} /></div>\n                <div className=\"login_container\">\n                    <div className=\"login_welcome_block\">\n                        Welcome,\n                        <h3>Login to continue!</h3>\n                    </div>\n                    <div className=\"login_block\">\n                            <form>\n                                <label>\n                                    <span><img src={mail}/></span>\n                                    <input \n                                    name=\"email\"\n                                    id=\"email\"\n                                    type=\"email\"\n                                    placeholder=\"Email Address\"\n                                    onChange={this.inputChangeHandller}\n                                    />\n                                </label>\n                                <label>\n                                    <span><img src={lock} /></span>\n                                    <input \n                                        type=\"password\" \n                                        placeholder=\"**********\"\n                                        name=\"password\"\n                                        id=\"password\"\n                                        onChange={this.inputChangeHandller}\n                                    />\n                                </label>\n                                <div className=\"text-right gap1\">\n                                    <NavLink  to=\"/forgotPassword\">\n                                        <p className=\"link\">Forgot Password ?</p>\n                                    </NavLink>\n                                </div>\n                                <button type=\"button\" className=\"blue_btn\" onClick={this.loginHandler} >LOGIN</button>\n                                <div className=\"login_signup\">\n                                    Don’t have an account? <a href=\"#\">Sign up</a>\n                                </div>\n                                {this.state.error && (   \n                                    <div className=\"error\"> {this.state.errorMessage} *</div>\n                                )}\n                            </form>\n                    </div>  \n                    <div className=\"footer\">\n                        <p>Powered by <a href=\"#\">Tier5</a> and the <a href=\"#\">Tier5 Partnership</a></p>\n                        <a href=\"#\"><img src={path}/></a> <a href=\"#\"><img src={messanger}/></a>\n                    </div>\n                </div>\n            </div>\n            </div>\n        );\n    }\n}\nexport default Login;","C:\\Users\\PRODIPTO\\Downloads\\Front-end\\GrammyWammy\\front-end\\src\\config.js",[],"C:\\Users\\PRODIPTO\\Downloads\\Front-end\\GrammyWammy\\front-end\\src\\helper\\helper.js",["216"],"/* eslint-disable no-undef */\n/** \n * @OpenFacebookInTab\n * this function will open Facebook in a new  tab and will  focus  on it\n * \n*/\nexport function OpenFacebookInTab() {\n    try{\n        const myNewUrl  =   `https://www.instagram.com/`;\n            let CreateTab    =   chrome.tabs.create({\n                url: myNewUrl,\n                active: true\n              });\n              console.log(\"This is a \",CreateTab);\n              return CreateTab;\n    }catch(error){\n        console.log(\"This is a \",error);\n    }\n  }\n\n/** \n * @CheckUserInfoFromFaccebook\n * this function will open Facebook in a new Window and grab its info\n * \n*/\nexport function CheckUserInfoFromFaccebook() {\n    // try{\n    //         const myNewUrl  =   `https://www.instagram.com/`+localStorage.getItem('fb_username');\n            \n    //         let CreateWindow    = chrome.runtime.sendMessage({type: \"OpenMessageProfileToRead\", options: myNewUrl});\n    //         return CreateWindow;\n            \n    // }catch(error){\n    //     console.log(\"This is a \",error);\n    // }\n    chrome.tabs.update( parseInt(localStorage.getItem(\"profileTabId\")), { \n        url: `https://www.instagram.com/explore/people/suggested/`,\n        active: false, pinned:true});\n  }\n\n/** \n * @OpenFacebookProfileInTab\n * this function will open Facebook Profile in a new Tab\n * \n*/\nexport function OpenFacebookProfileInTab() {\n    try{\n        const myNewUrl  =   `https://www.instagram.com/`+localStorage.getItem('insta_username');\n        let CreateTab    =   chrome.tabs.create({\n            url: myNewUrl,\n            active: true\n          });\n          console.log(\"This is a \",CreateTab);\n          return CreateTab;\n    }catch(error){\n        console.log(\"This is a \",error);\n    }\n  }\nexport function framecaller()   {\n    try{\n        const myNewUrl  =   'https://www.instagram.com/'+\n        console.log(\"This is a \",myNewUrl);\n        return myNewUrl;\n    }catch(error){\n        console.log(\"This is a \",error);\n    }\n}\n","C:\\Users\\PRODIPTO\\Downloads\\Front-end\\GrammyWammy\\front-end\\src\\services\\authService.js",[],"C:\\Users\\PRODIPTO\\Downloads\\Front-end\\GrammyWammy\\front-end\\src\\services\\autoResponderServices.js",["217"],"import axios from 'axios';\nimport { host,kyubi } from '../config';\n\nconst autoResponderServices = {\n    createAutoResponder: function (payload) {\n        return new Promise((resolve, reject) => {\n            let options = {\n                method: 'POST',\n                url: host + '/api/autoresponder/create',\n                headers: {  'Accept': 'application/json', 'Content-Type': 'application/json' },\n                data: payload\n            }\n            axios(options)\n                .then(res => {\n                    console.log(\"In Success\");\n                    resolve(res)\n                })\n                .catch(err => {\n                    console.log(\"In Error\");\n                    reject(err)\n                })\n        })\n    },\n    listAutoResponder: function (payload) {\n        return new Promise((resolve, reject) => {\n            let options = {\n                method: 'POST',\n                url: host + '/api/autoresponder/list',\n                headers: {  'Accept': 'application/json', 'Content-Type': 'application/json' },\n                data: payload\n            }\n            axios(options)\n                .then(res => {\n                    console.log(\"In Success\");\n                    resolve(res)\n                })\n                .catch(err => {\n                    console.log(\"In Error\");\n                    reject(err)\n                })\n        })\n    },\n    editAutoResponder: function (payload) {\n        return new Promise((resolve, reject) => {\n            let options = {\n                method: 'POST',\n                url: host + '/api/autoresponder/edit',\n                headers: {  'Accept': 'application/json', 'Content-Type': 'application/json' },\n                data: payload\n            }\n            axios(options)\n                .then(res => {\n                    console.log(\"In Success\");\n                    resolve(res)\n                })\n                .catch(err => {\n                    console.log(\"In Error\");\n                    reject(err)\n                })\n        })\n    },\n    updateAutoResponder: function (payload) {\n        return new Promise((resolve, reject) => {\n            let options = {\n                method: 'POST',\n                url: host + '/api/autoresponder/update',\n                headers: {  'Accept': 'application/json', 'Content-Type': 'application/json' },\n                data: payload\n            }\n            axios(options)\n                .then(res => {\n                    console.log(\"In Success\");\n                    resolve(res)\n                })\n                .catch(err => {\n                    console.log(\"In Error\");\n                    reject(err)\n                })\n        })\n    },\n    updateAutoResponderStatus: function (payload) {\n        return new Promise((resolve, reject) => {\n            let options = {\n                method: 'POST',\n                url: host + '/api/autoresponder/updateStatus',\n                headers: {  'Accept': 'application/json', 'Content-Type': 'application/json' },\n                data: payload\n            }\n            axios(options)\n                .then(res => {\n                    console.log(\"In Success\");\n                    resolve(res)\n                })\n                .catch(err => {\n                    console.log(\"In Error\");\n                    reject(err)\n                })\n        })\n    },\n    deleteAutoResponderStatus: function (payload) {\n        return new Promise((resolve, reject) => {\n            let options = {\n                method: 'POST',\n                url: host + '/api/autoresponder/delete',\n                headers: {  'Accept': 'application/json', 'Content-Type': 'application/json' },\n                data: payload\n            }\n            axios(options)\n                .then(res => {\n                    console.log(\"In Success\");\n                    resolve(res)\n                })\n                .catch(err => {\n                    console.log(\"In Error\");\n                    reject(err)\n                })\n        })\n    },\n}\nexport default autoResponderServices;","C:\\Users\\PRODIPTO\\Downloads\\Front-end\\GrammyWammy\\front-end\\src\\helper\\loginHelper.js",[],"C:\\Users\\PRODIPTO\\Downloads\\Front-end\\GrammyWammy\\front-end\\src\\services\\setting.js",["218"],"import axios from 'axios';\nimport { host,kyubi } from '../config';\n\nconst settingService = {\n    setSetting: function (payload) {\n        return new Promise((resolve, reject) => {\n            let options = {\n                method: 'POST',\n                url: host + '/api/setting/setsetting',\n                headers: {  'Accept': 'application/json', 'Content-Type': 'application/json' },\n                data: payload\n            }\n            axios(options)\n                .then(res => {\n                    console.log(\"In Success\");\n                    resolve(res)\n                })\n                .catch(err => {\n                    console.log(\"In Error\");\n                    reject(err)\n                })\n        })\n    },\n    getSetting: function (payload) {\n        return new Promise((resolve, reject) => {\n            let options = {\n                method: 'POST',\n                url: host + '/api/setting/getSetting',\n                headers: {  'Accept': 'application/json', 'Content-Type': 'application/json' },\n                data: payload\n            }\n            axios(options)\n                .then(res => {\n                    console.log(\"In Success\");\n                    resolve(res)\n                })\n                .catch(err => {\n                    console.log(\"In Error\");\n                    reject(err)\n                })\n        })\n    },\n    updateAutoresponderSetting: function (payload) {\n        return new Promise((resolve, reject) => {\n            let options = {\n                method: 'POST',\n                url: host + '/api/setting/updateautoresponder',\n                headers: {  'Accept': 'application/json', 'Content-Type': 'application/json' },\n                data: payload\n            }\n            axios(options)\n                .then(res => {\n                    console.log(\"In Success\");\n                    resolve(res)\n                })\n                .catch(err => {\n                    console.log(\"In Error\");\n                    reject(err)\n                })\n        })\n    },\n    getUserDetails: function    (payload)   {\n        return new Promise((resolve, reject) => {\n            let options = {\n                method: 'POST',\n                url: host + '/api/setting/getUserDetails',\n                headers: {  'Accept': 'application/json', 'Content-Type': 'application/json' },\n                data: payload\n            }\n            axios(options)\n                .then(res => {\n                    console.log(\"In Success\");\n                    resolve(res)\n                })\n                .catch(err => {\n                    console.log(\"In Error\");\n                    reject(err)\n                })\n        })\n    },\n    updateLoadStatus: function   (payload)   {\n        return new Promise((resolve, reject) => {\n            let options = {\n                method: 'POST',\n                url: host + '/api/setting/updateLoadStatus',\n                headers: {  'Accept': 'application/json', 'Content-Type': 'application/json' },\n                data: payload\n            }\n            axios(options)\n                .then(res => {\n                    console.log(\"In Success\");\n                    resolve(res)\n                })\n                .catch(err => {\n                    console.log(\"In Error\");\n                    reject(err)\n                })\n        })\n    }\n    \n}\n\nexport default settingService;","C:\\Users\\PRODIPTO\\Downloads\\Front-end\\GrammyWammy\\front-end\\src\\components\\modules\\Common\\header.js",["219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245"],"C:\\Users\\PRODIPTO\\Downloads\\Front-end\\GrammyWammy\\front-end\\src\\components\\modules\\Common\\footer.js",["246","247","248","249","250","251","252","253"],"import React, { Component } from \"react\";\nimport logo from \"../../../images/logo.svg\";\nimport { NavLink } from \"react-router-dom\";\nimport FaceBookLogo from \"../../../images/Path3.svg\";\nimport MessenderLogo from \"../../../images/Messanger.svg\";\nclass footer extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n          \n        }\n      }\n      \n    componentDidMount(){\n        console.log(\"I am In Header\");\n    }\n    render() {\n        return (\n        <div className=\"footer\">\n            <p>Powered by <a href=\"#\">Tier5</a> and the <a href=\"#\">Tier5 Partnership</a></p>\n            <a href=\"#\"><img src={FaceBookLogo} /></a> <a href=\"#\"><img src={MessenderLogo} /></a>\n        </div>\n        )\n    }\n}\nexport default footer;","C:\\Users\\PRODIPTO\\Downloads\\Front-end\\GrammyWammy\\front-end\\src\\components\\modules\\Setting\\DefaultMessageSettings\\defaultMessageSettings.js",["254","255","256","257","258","259"],"import React, { Component } from \"react\";\nimport SegmentActiveLogo from  \"../../../../images/icon2b.svg\";\nimport SegmentInActiveLogo from  \"../../../../images/icon2a.svg\";\nimport GroupActiveLogo from  \"../../../../images/icon3b.svg\";\nimport GroupInActiveLogo from  \"../../../../images/icon3a.svg\";\nimport GroupSection from  \"../DefaultMessageSettings/IndividualComponents/group\";\nimport SegmentSection from  \"../DefaultMessageSettings/IndividualComponents/segment\";\nclass defaultMessageSettings extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n          Segment:1,\n          Group:0,\n          \n          loader:false\n        }\n      }\n      activateSegment  = async (event) =>  {\n        event.preventDefault();\n        this.setState({\n            Segment:1,\n            Group:0\n        })\n        \n      }\n      activateGroup  = async (event) =>  {\n        event.preventDefault();\n        this.setState({\n            Segment:0,\n            Group:1\n        })\n        \n      }\n      render() {\n        return (\n            <div id=\"tabResponse\" className=\"maintabcontent\">\n                <ul class=\"subtab\">\n                  <li>\n                    <a href=\"#\" onClick={this.activateSegment} className={this.state.Segment ?\"active\":\"\"}>\n                    {this.state.Segment ?\n                    <img src={SegmentActiveLogo} className=\"active\"/>\n                    :\n                    <img src={SegmentInActiveLogo} className=\"inactive\"/>\n                    }\n                    Segments</a>\n                  </li>\n                  <li>\n                    <a href=\"#\" onClick={this.activateGroup} id=\"defaultMessage\" className={this.state.Group ?\"active\":\"\"}>\n                    {this.state.Group ?\n                    <img src={GroupActiveLogo} className=\"active\"/>\n                    :\n                    <img src={GroupInActiveLogo} className=\"inactive\"/>\n                    }\n                    Groups</a>\n                  </li>\n                </ul>\n                {this.state.Segment ?\n                  <SegmentSection></SegmentSection>\n                :\n                  <GroupSection></GroupSection>\n                }\n            </div>)\n      }\n}\nexport default defaultMessageSettings;","C:\\Users\\PRODIPTO\\Downloads\\Front-end\\GrammyWammy\\front-end\\src\\components\\modules\\Setting\\ResponseSetting\\responseSetting.js",["260","261","262","263","264","265"],"import React, { Component } from \"react\";\nimport AutoResponder from \"../ResponseSetting/IndividualComponents/autoResponder\";\nimport DefaultMessage from \"../ResponseSetting/IndividualComponents/defaultMessage\";\nclass responseSetting extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n          autoResponsederSetting:1,\n          \n          DefaultMessageSetting:0,\n          \n          loader:false\n        }\n      }\n      activateAutoResponder  = async (event) =>  {\n        event.preventDefault();\n        this.setState({\n            autoResponsederSetting:1,\n            DefaultMessageSetting:0\n        })\n        \n      }\n      activateDefaultMessage  = async (event) =>  {\n        event.preventDefault();\n        this.setState({\n            autoResponsederSetting:0,\n            DefaultMessageSetting:1\n        })\n        \n      }\n      render() {\n        return (\n            <div id=\"tabResponse\" className=\"maintabcontent\">\n                <ul class=\"subtab\">\n                  <li>\n                    <a href=\"#\" onClick={this.activateAutoResponder} className={this.state.autoResponsederSetting ?\"active\":\"\"} id=\"autoResponder\">\n                    {this.state.autoResponsederSetting ?<img src=\"images/icon1a.svg\" className=\"active\"/>:<img src=\"images/icon1b.svg\" className=\"inactive\"/>}\n                    Auto Responder</a>\n                  </li>\n                  <li>\n                    <a href=\"#\" onClick={this.activateDefaultMessage} id=\"defaultMessage\" className={this.state.DefaultMessageSetting ?\"active\":\"\"}>\n                    {this.state.DefaultMessageSetting ?<img src=\"images/icon2b.svg\" className=\"active\"/>:<img src=\"images/icon2a.svg\" className=\"inactive\"/>}\n                    Default Message</a>\n                  </li>\n                </ul>\n                {this.state.autoResponsederSetting ?\n                  <AutoResponder></AutoResponder>\n                :\n                  <DefaultMessage></DefaultMessage>\n                }\n            </div>          \n        )\n      }\n}\nexport default responseSetting;","C:\\Users\\PRODIPTO\\Downloads\\Front-end\\GrammyWammy\\front-end\\src\\components\\modules\\Common\\sidebar.js",["266","267","268","269"],"import React, { Component } from \"react\";\nimport logo from \"../../../image/Logo_Side.png\";\nimport { NavLink } from \"react-router-dom\";\nimport {Animated} from \"react-animated-css\";\nclass sidebar extends Component {\n    constructor(props) {\n      super(props)\n      this.state = {\n        selected:this.props.selectedtab,\n        openSidebar:false,\n        \n      }\n    }\n    HideMenu = (event) => {\n      event.preventDefault();\n      //console.log(this.props.shownav);\n      this.setState({\n        openSidebar:false\n      })\n    }\n    ShowMenu = (event) => {\n      event.preventDefault();\n      //console.log(this.props.shownav);\n      this.setState({\n        openSidebar:true\n      })\n    }\n    componentDidMount(){\n        //console.log(this.props.shownav);\n    }\n    render() {\n        return (\n        <div>\n          <nav className=\"main-header navbar navbar-expand  navbar-dark\">\n              <ul className=\"navbar-nav\">\n                <li className=\"nav-item\">\n                  <a className=\"nav-link\" onClick={this.ShowMenu} data-widget=\"pushmenu\" href=\"#\" role=\"button\">\n                    <i className=\"fas fa-bars\"></i>\n                  </a>\n                </li>\n              </ul>\n          </nav>\n        {this.state.openSidebar ?\n                      \n                      <div className=\"main-sidebar sidebar-light-primary elevation-4 sidebar-no-expand\" id=\"navbarMenu\">\n              \n                      <a href=\"\" onClick={this.HideMenu} ><div className=\"crossbox\"><i class=\"fas fa-times\"></i></div></a>\n                      \n                        <NavLink  to=\"/dashboard\" className=\"brand-link\">\n                        \n                          <img  src={logo} className=\"Brandlogo\"></img>\n                        \n                        </NavLink>\n                        <div className=\"sidebar\">\n                          <nav className=\"mt-2\">\n                            <ul className=\"nav nav-pills nav-sidebar flex-column\" data-widget=\"treeview\" role=\"menu\" data-accordion=\"false\">\n                              <li className=\"nav-item\">\n                                  <NavLink  to=\"/dashboard\" className=\"nav-link\">\n                                    <i className=\"nav-icon fas fa-tachometer-alt\"></i>\n                                    <p>\n                                      Dashboard\n                                    </p>\n                                  </NavLink>\n                              </li>\n                              <li className=\"nav-item\">\n                                  <NavLink  to=\"/setting\" className=\"nav-link\">\n                                    <i className=\"nav-icon fas fa-cogs\"></i>\n                                    <p>\n                                      Setting\n                                    </p>\n                                  </NavLink>\n                              </li>  \n                              <li className=\"nav-item\">\n                                  <NavLink  to=\"/autoresponder\" className=\"nav-link\">\n                                    <i className=\"nav-icon fas fa-magic\"></i>\n                                    <p>\n                                      Auto-Responder\n                                    </p>\n                                  </NavLink>\n                              </li>\n                              \n                              <li className=\"nav-item\">\n                                  <NavLink  to=\"/logout\" className=\"nav-link\">\n                                    <i className=\"nav-icon fas fa-sign-out-alt\"></i>\n                                    <p>\n                                      Logout\n                                    </p>\n                                  </NavLink>\n                              </li>\n                            </ul>\n                          </nav>\n                        </div>\n                      </div>\n                   \n        :\n        \"\"\n        }\n        </div>\n          \n         \n\n          \n        );\n    }\n}\n\nexport default sidebar;","C:\\Users\\PRODIPTO\\Downloads\\Front-end\\GrammyWammy\\front-end\\src\\components\\modules\\Setting\\ResponseSetting\\IndividualComponents\\defaultMessage.js",["270","271","272","273","274","275","276","277","278","279","280"],"import React, { Component } from \"react\";\nimport AuthServices from \"../../../../../services/authService\";\nimport GroupServices from \"../../../../../services/groupServices\";\nimport SettingServices from \"../../../../../services/setting\";\nimport Select from 'react-select';\nconst options = [\n  {value:0,label:\"Text  Message\"},\n  {value:1,label:\"Message Group\"}\n];\nclass defaultMessage extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n          selectedOption:  {value:1,label:\"Message Group\"},\n          default_message_type:0,\n          MessageGroupList:[],\n          GPL:[],\n          selectedGPL:null,\n          default_message_group:\"\",\n          default_message_text:\"\",\n          default_time_delay:0,\n          loader:false\n        }\n      }\n      handleChange = selectedOption => {\n        this.setState({ selectedOption });\n        console.log(`Option selected:`, selectedOption);\n        console.log(`Opppppppppppp`, selectedOption.value);\n        this.setState({default_message_type:selectedOption.value});\n      };\n      handleChangeGPL = selectedGPL =>  {\n        this.setState({ selectedGPL });\n        console.log(`Option selected:`, selectedGPL);\n        console.log(`Opppppppppppp`, selectedGPL.value);\n        this.setState({default_message_group:selectedGPL.value});\n      }\n      /**\n        * @inputChangeHandller \n        * getting input field values\n      */\n      inputChangeHandller = (event) => {\n        this.setState({ [event.target.name]: event.target.value })\n      }\n      /**\n         * @insertTagAtMessageSegments\n         * in this function we are managing the tag in welcome message area\n        */\n      insertTagAtMessageSegments(areaId, text) {\n        var txtarea = document.getElementById(areaId);\n        if (!txtarea) {\n        return;\n        }\n        // if (txtarea.value.length < 188) {\n        var scrollPos = txtarea.scrollTop;\n        var strPos = 0;\n        var br = ((txtarea.selectionStart || txtarea.selectionStart == '0') ?\n        \"ff\" : (document.selection ? \"ie\" : false));\n        if (br == \"ie\") {\n        txtarea.focus();\n        var range = document.selection.createRange();\n        range.moveStart('character', -txtarea.value.length);\n        strPos = range.text.length;\n        } else if (br == \"ff\") {\n        strPos = txtarea.selectionStart;\n        }\n        var front = (txtarea.value).substring(0, strPos);\n        var back = (txtarea.value).substring(strPos, txtarea.value.length);\n        txtarea.value = front + text + back;\n        strPos = strPos + text.length;\n        let WelcomeMessage = txtarea.value;\n        WelcomeMessage = WelcomeMessage.replace(/{user_name}/g, \"\");\n        WelcomeMessage = WelcomeMessage.replace(/{last_name}/g, \"\");\n        WelcomeMessage = WelcomeMessage.replace(/{date}/g, \"\");\n        WelcomeMessage = WelcomeMessage.replace(/{date_time}/g, \"\");\n        //console.log(\"This is the message ========\",WelcomeMessage);\n        this.setState({ default_message_text: txtarea.value});\n        // this.setState({ welcomeContent: txtarea.value, welcomeTextLengthCount: txtarea.value });\n        if (br == \"ie\") {\n        txtarea.focus();\n        var ieRange = document.selection.createRange();\n        ieRange.moveStart('character', -txtarea.value.length);\n        ieRange.moveStart('character', strPos);\n        ieRange.moveEnd('character', 0);\n        ieRange.select();\n        } else if (br == \"ff\") {\n        txtarea.selectionStart = strPos;\n        txtarea.selectionEnd = strPos;\n        txtarea.focus();\n        }\n        txtarea.scrollTop = scrollPos;\n        // }\n      }\n      \n      submitAddDefaultMessage   =    async   (event) =>  {\n        event.preventDefault();\n        let payload =   {\n            default_message_type:this.state.default_message_type,\n            default_message_group:this.state.default_message_group,\n            default_message_text:this.state.default_message_text,\n            default_time_delay:this.state.default_time_delay,\n            kyubi_user_token:localStorage.getItem(\"kyubi_user_token\")\n        }\n        console.log(\"This I have to save in DB as Segments\",payload);\n        await SettingServices.setSetting(payload).then(async result=>{\n          if(result.data.code==1){\n                      let responsenewvalue =result.data;\n                      localStorage.setItem('kyubi_user_token', responsenewvalue.payload.UserInfo.kyubi_user_token);\n                      localStorage.setItem('user_id', responsenewvalue.payload.UserInfo.user_id);\n                      localStorage.setItem('insta_id', responsenewvalue.payload.UserInfo.instagram_id);\n                      localStorage.setItem('insta_username', responsenewvalue.payload.UserInfo.instagram_name);\n                      localStorage.setItem('insta_name', responsenewvalue.payload.UserInfo.instagram_profile_name);\n                      localStorage.setItem('insta_image', responsenewvalue.payload.UserInfo.instagram_image);\n                      \n                      if(responsenewvalue.payload.UserSettings.default_message){\n                        localStorage.setItem('default_message', responsenewvalue.payload.UserSettings.default_message);\n                      }else{\n                        localStorage.setItem('default_message', 0);\n                      }\n                      if(responsenewvalue.payload.UserSettings.default_message_text){\n                        localStorage.setItem('default_message_text', responsenewvalue.payload.UserSettings.default_message_text);\n                      }else{\n                        localStorage.setItem('default_message_text',\"\");\n                      }\n                      if(responsenewvalue.payload.UserSettings.autoresponder){\n                        localStorage.setItem('autoresponder', responsenewvalue.payload.UserSettings.autoresponder);\n                        \n                      }else{\n                        localStorage.setItem('autoresponder', 0);\n                      }\n                      if(responsenewvalue.payload.UserSettings.default_time_delay){\n                        localStorage.setItem('default_time_delay', responsenewvalue.payload.UserSettings.default_time_delay);\n                      }\n                      \n                      localStorage.setItem('keywordsTally', JSON.stringify(responsenewvalue.payload.AutoResponderKeywords));\n          }else{\n\n          }\n        })\n      }\n      componentDidMount(){\n        this.setState({loader:true})\n        let  params ={\n          user_rec    :   localStorage.getItem('kyubi_user_token')\n        };\n        let GPDID=\"\";\n        AuthServices.userRetrive(params).then(async result=>{\n          console.log(\"This I got From backGround SUSSSSS Default\",result);\n          let opt={}\n          if(result.data.payload.UserSettings.default_message_type ===1){\n            opt={value:1,label:\"Message Group\"}\n          }else{\n            opt={value:0,label:\"Text  Message\"}\n          }\n          if(result.data.payload.UserSettings.default_message_group){\n            this.setState({\n              default_message_group:result.data.payload.UserSettings.default_message_group\n            });\n            GPDID=result.data.payload.UserSettings.default_message_group;\n          }\n          this.setState({\n            default_message_type:result.data.payload.UserSettings.default_message_type,\n            selectedOption:opt,\n            default_message_text:result.data.payload.UserSettings.default_message_text,\n            default_time_delay:result.data.payload.UserSettings.default_time_delay,\n          })\n\n\n          let GroupParams = {\n            user_id    :   localStorage.getItem('user_id')\n          }\n          GroupServices.getGroup(GroupParams).then(async result=>{\n            if(result.data.code == 1){\n                let resultGroupList =  [];\n                \n                result.data.payload.map(data=>{\n                  \n                  resultGroupList.push({value:data._id,label:data.title})\n                  console.log(\"This MGP\",this.state.default_message_group);\n                  console.log(\"This GAP\",data._id);\n                  console.log(\"This GAP!\",GPDID);\n                  if(GPDID != \"\" && GPDID==data._id){\n  \n                    this.setState({\n                      selectedGPL:{value:data._id,label:data.title}\n                    });\n                  }\n                });\n                this.setState({\n                  MessageGroupList:result.data.payload,\n                  GPL:resultGroupList\n                })\n                \n                \n            }\n            \n          }).catch(error=>{\n            console.log(\"This I got From DDDDBBBBBB EROOOOOO\",error);\n          })\n\n          this.setState({loader:false})\n\n\n        }).catch(error=>{\n          this.setState({loader:false})\n          console.log(\"This I got From backGround EROOOOOO Default\",error);\n        })\n        \n\n        \n      }\n      render() {\n        const { selectedOption,selectedGPL,GPL } = this.state;\n\n        return (\n            <div id=\"tabdefaultMessage\" className=\"subtabcontent\">\n              \n            <form>\n              <div className=\"selectbox\">\n              <Select\n              \n              value={selectedOption}\n              onChange={this.handleChange}\n              options={options}\n              />\n\n              </div>\n              {this.state.default_message_type ? \n              <div className=\"selectbox\">\n              <Select\n              \n              value={selectedGPL}\n              onChange={this.handleChangeGPL}\n              options={GPL}\n              />\n              </div>\n              : \n              <div>\n                <textarea name=\"default_message_text\" value={this.state.default_message_text} onChange={this.inputChangeHandller} id=\"default_message_text\" className=\"withtag otherstyle\" placeholder=\"Build block content\">\n                        \n                </textarea>\n\n              <button type=\"button\" onClick={() => this.insertTagAtMessageSegments('default_message_text', '{user_name}')} className=\"formtag\">[ User Name ]</button> \n              <button type=\"button\" onClick={() => this.insertTagAtMessageSegments('default_message_text', '{date}')} class=\"formtag\">[ Todays Date ]</button>\n\n              </div>\n              \n              }\n\n              <label className=\"gap2\">\n                Time Interval for Default Message\n              </label>\n              <div className=\"formnumber\">\n                <input type=\"number\" name=\"default_time_delay\" value={this.state.default_time_delay} onChange={this.inputChangeHandller}  placeholder=\"Enter Time Delay\" className=\"otherstyle\" />        \n                hour (s)</div>\n\n                <button onClick={this.submitAddDefaultMessage} className=\"blue_btn\" type=\"submit\">Save Message</button>\n            </form>\n\n          </div>\n        )\n      }\n}\nexport default defaultMessage;","C:\\Users\\PRODIPTO\\Downloads\\Front-end\\GrammyWammy\\front-end\\src\\components\\modules\\Setting\\ResponseSetting\\IndividualComponents\\autoResponder.js",["281","282","283","284","285","286","287","288","289","290","291","292","293","294","295","296","297","298","299","300","301","302","303","304","305","306"],"import React, { Component } from \"react\";\nimport plusLogo from  \"../../../../../images/plus.svg\";\nimport editLogo from  \"../../../../../images/edit.svg\";\nimport deleteLogo from  \"../../../../../images/delete.svg\";\nimport EmptyFileLogo from \"../../../../../images/empty_file.svg\";\nimport LoaderLogo from \"../../../../../images/Loader.gif\"\nimport backArrowLogo from \"../../../../../images/arrow2.svg\";\nimport AutoResponderService from  \"../../../../../services/autoResponderServices\";\nimport { WithContext as ReactTags } from 'react-tag-input';\nconst KeyCodes = {\n    comma: 188,\n    enter: 13,\n  };\n  \nconst delimiters = [KeyCodes.comma, KeyCodes.enter];\nclass responseSetting extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n          autoResponsederList:1,\n          autoResponsederCreate:0,\n          autoResponsederEdit:0,\n          autoresponderListValue:[],\n          auto_responder_name:\"\",\n          auto_responder_keywords: [],\n          auto_responder_message:\"\",\n          auto_responder_status:1,\n            loader:false,\n            auto_responder_id_edit:\"\",\n            auto_responder_name_edit:\"\",\n            auto_responder_message_edit:\"\",\n            auto_responder_status_edit:1,\n            auto_responder_keywords_edits:[]\n        }\n        this.handleDelete = this.handleDelete.bind(this);\n        this.handleAddition = this.handleAddition.bind(this);\n\n        this.handleEditDelete = this.handleEditDelete.bind(this);\n        this.handleEditAddition = this.handleEditAddition.bind(this);\n    }\n    autoSetting = () => {\n        console.log(\"hiyy\",this.state.auto_responder_status )\n        if(this.state.auto_responder_status === 0){\n            this.setState({auto_responder_status:1})\n        }else{\n            this.setState({auto_responder_status:0})\n        }\n    }\n    autoSettingEdit = () => {\n        console.log(\"hiyy\",this.state.auto_responder_status_edit )\n        if(this.state.auto_responder_status_edit === 0){\n            this.setState({auto_responder_status_edit:1})\n        }else{\n            this.setState({auto_responder_status_edit:0})\n        }\n    }\n\n    handleDelete(i) {\n        const { auto_responder_keywords } = this.state;\n        this.setState({\n            auto_responder_keywords: auto_responder_keywords.filter((auto_responder_keyword, index) => index !== i),\n        });\n    }\n    handleEditDelete(i) {\n        const { auto_responder_keywords_edits } = this.state;\n        this.setState({\n            auto_responder_keywords_edits: auto_responder_keywords_edits.filter((auto_responder_keywords_edit, index) => index !== i),\n        });\n    }\n    handleAddition(auto_responder_keyword) {\n        this.setState(state => ({ auto_responder_keywords: [...state.auto_responder_keywords, auto_responder_keyword] }));\n    }\n    handleEditAddition(auto_responder_keywords_edit) {\n        this.setState(state => ({ auto_responder_keywords_edits: [...state.auto_responder_keywords_edits, auto_responder_keywords_edit] }));\n    }\n    addAutoResponderHandler  = async (event) =>  {\n        this.setState({loader:true});\n    event.preventDefault();\n    this.setState({\n        autoResponsederList:0,\n        autoResponsederCreate:1,\n        autoResponsederEdit:0,\n        loader:false\n    })\n    \n    }\n    listAutoResponderHandler  = async (event) =>  {\n        event.preventDefault();\n        this.setState({\n            autoResponsederList:1,\n            autoResponsederCreate:0,\n            autoResponsederEdit:0,\n        })\n    }\n    /**\n     * @insertTagAtMessageSegments\n     * in this function we are managing the tag in welcome message area\n    */\n    insertTagAtMessageSegments(areaId, text) {\n        console.log(\"Yo\");\n        var txtarea = document.getElementById(areaId);\n        if (!txtarea) {\n        return;\n        }\n        // if (txtarea.value.length < 188) {\n        var scrollPos = txtarea.scrollTop;\n        var strPos = 0;\n        var br = ((txtarea.selectionStart || txtarea.selectionStart == '0') ?\n        \"ff\" : (document.selection ? \"ie\" : false));\n        if (br == \"ie\") {\n        txtarea.focus();\n        var range = document.selection.createRange();\n        range.moveStart('character', -txtarea.value.length);\n        strPos = range.text.length;\n        } else if (br == \"ff\") {\n        strPos = txtarea.selectionStart;\n        }\n        var front = (txtarea.value).substring(0, strPos);\n        var back = (txtarea.value).substring(strPos, txtarea.value.length);\n        txtarea.value = front + text + back;\n        strPos = strPos + text.length;\n        let WelcomeMessage = txtarea.value;\n        WelcomeMessage = WelcomeMessage.replace(/{user_name}/g, \"\");\n        WelcomeMessage = WelcomeMessage.replace(/{last_name}/g, \"\");\n        WelcomeMessage = WelcomeMessage.replace(/{date}/g, \"\");\n        WelcomeMessage = WelcomeMessage.replace(/{date_time}/g, \"\");\n        //console.log(\"This is the message ========\",WelcomeMessage);\n        if(areaId == \"auto_responder_message\"){\n            this.setState({ auto_responder_message: txtarea.value});\n        }else{\n            this.setState({ auto_responder_message_edit: txtarea.value});\n        }\n        \n        // this.setState({ welcomeContent: txtarea.value, welcomeTextLengthCount: txtarea.value });\n        if (br == \"ie\") {\n        txtarea.focus();\n        var ieRange = document.selection.createRange();\n        ieRange.moveStart('character', -txtarea.value.length);\n        ieRange.moveStart('character', strPos);\n        ieRange.moveEnd('character', 0);\n        ieRange.select();\n        } else if (br == \"ff\") {\n        txtarea.selectionStart = strPos;\n        txtarea.selectionEnd = strPos;\n        txtarea.focus();\n        }\n        txtarea.scrollTop = scrollPos;\n        // }\n    }\n     /**\n        * @inputChangeHandller \n        * getting input field values\n    */\n    inputChangeHandller = (event) => {\n        this.setState({ [event.target.name]: event.target.value })\n    }\n    createAutoResponderGroupHandler =  (event) =>{\n        event.preventDefault();\n        let Token=localStorage.getItem(\"kyubi_user_token\");\n        let payload = {\n            user_id:Token,\n            auto_responder_name:this.state.auto_responder_name,\n            auto_responder_keywords:this.state.auto_responder_keywords,\n            auto_responder_message:this.state.auto_responder_message,\n            auto_responder_status:this.state.auto_responder_status\n        }\n      \n         AutoResponderService.createAutoResponder(payload).then(response =>{\n            console.log(\"This I gottttt\",payload);\n          if(response.data.code == 1){\n            let UserTokenNew=localStorage.getItem(\"kyubi_user_token\");\n            let payloadNew ={\n                user_id:UserTokenNew\n            }\n            AutoResponderService.listAutoResponder(payloadNew).then(async responsex =>{\n                if(responsex.data.payload !=  \"\" ){\n                    console.log(\"This is what i Got\",responsex.data.payload);\n                    if(responsex.data.payload.autokey.length>0){\n                        console.log(\"This is what i Got\",responsex.data.payload.autokey);\n                        this.setState({\n                                        autoresponderListValue:responsex.data.payload.autokey,\n                                        autoResponsederList:1,\n                                        autoResponsederCreate:0,\n                                        autoResponsederEdit:0,\n                                        auto_responder_name:\"\",\n                                        auto_responder_keywords: [],\n                                        auto_responder_message:\"\",\n                                        auto_responder_status:1,\n                        })\n                    }\n                  }\n            })\n          }\n          console.log(\"This Is I Got ====== \",response);\n        });\n    }\n    createAutoResponderGroupHandlerEdit =  (event) =>{\n        event.preventDefault();\n        this.setState({loader:true})\n        let Token=localStorage.getItem(\"kyubi_user_token\");\n        let payload = {\n            user_id:Token,\n            auto_responder_id:this.state.auto_responder_id_edit,\n            auto_responder_name:this.state.auto_responder_name_edit,\n            auto_responder_keywords:this.state.auto_responder_keywords_edits,\n            auto_responder_message:this.state.auto_responder_message_edit,\n            auto_responder_status:this.state.auto_responder_status_edit\n        }\n        console.log(\"This I am Getting\",payload)\n      \n        AutoResponderService.updateAutoResponder(payload).then(response =>{\n            console.log(\"This I gottttt\",payload);\n          if(response.data.code == 1){\n            let UserTokenNew=localStorage.getItem(\"kyubi_user_token\");\n            let payloadNew ={\n                user_id:UserTokenNew\n            }\n            AutoResponderService.listAutoResponder(payloadNew).then(async responsex =>{\n                if(responsex.data.payload !=  \"\" ){\n                    console.log(\"This is what i Got\",responsex.data.payload);\n                    if(responsex.data.payload.autokey.length>0){\n                        console.log(\"This is what i Got\",responsex.data.payload.autokey);\n                        this.setState({\n                                        autoresponderListValue:responsex.data.payload.autokey,\n                                        autoResponsederList:1,\n                                        autoResponsederCreate:0,\n                                        autoResponsederEdit:0,\n                                        auto_responder_id_edit:\"\",\n                                        auto_responder_name_edit:\"\",\n                                        auto_responder_keywords_edits:[],\n                                        auto_responder_message_edit:\"\",\n                                        auto_responder_status_edit:1,\n                                        loader:false\n                        })\n                    }\n                  }\n            })\n          }\n          console.log(\"This Is I Got ====== \",response);\n        });\n    }\n    editAutoResponder(autoresponder_id,event){\n        this.setState({loader:true})\n        event.preventDefault();\n        let payload = { \n            Id: autoresponder_id \n        }; \n        AutoResponderService.editAutoResponder(payload).then(async response=>{\n            console.log(\"O)OO)O)O\",response);\n            if(response.data.code === 1){\n                let newKey=[];\n                await response.data.payload[0].autoresponderkeywords.map(async (result, i) => {\n                    console.log(result.keywords);\n                    newKey.push({\"id\":result.keywords,\"text\":result.keywords})\n                });\n                this.setState({\n                    auto_responder_id_edit:response.data.payload[0]._id,\n                    auto_responder_name_edit:response.data.payload[0].auto_responder_name,\n                    auto_responder_message_edit:response.data.payload[0].message,\n                    auto_responder_status_edit:response.data.payload[0].status,\n                    auto_responder_keywords_edits:newKey,\n                    autoResponsederList:0,\n                    autoResponsederCreate:0,\n                    autoResponsederEdit:1,\n                    loader:false\n                  })\n            }\n        }).catch(error=>{\n\n        })\n    }\n    editAutoResponderStatus(autoresponder_id,prestatus){\n        this.setState({loader:true})\n        let status =1;\n        if(prestatus == 1){\n            status=0;\n        }else{\n            status=1;\n        }\n        let payload = {\n            autoresponder_id:autoresponder_id,\n            status:status\n        };\n        console.log(\"This is a Seeeee====>\",payload);\n        AutoResponderService.updateAutoResponderStatus(payload).then(response =>{\n            console.log(\"This I gottttt\",payload);\n          if(response.data.code == 1){\n            let UserTokenNew=localStorage.getItem(\"kyubi_user_token\");\n            let payloadNew ={\n                user_id:UserTokenNew\n            }\n            AutoResponderService.listAutoResponder(payloadNew).then(async responsex =>{\n                if(responsex.data.payload !=  \"\" ){\n                    console.log(\"This is what i Got\",responsex.data.payload);\n                    if(responsex.data.payload.autokey.length>0){\n                        console.log(\"This is what i Got\",responsex.data.payload.autokey);\n                        this.setState({\n                                        autoresponderListValue:responsex.data.payload.autokey,\n                                        autoResponsederList:1,\n                                        autoResponsederCreate:0,\n                                        autoResponsederEdit:0,\n                                        loader:false\n                                        \n                        })\n                    }\n                  }\n            })\n          }\n          console.log(\"This Is I Got ====== \",response);\n        });\n    }\n    deleteAutoResponder(autoresponder_id,event){\n        this.setState({loader:true})\n        event.preventDefault();\n        let user_id=localStorage.getItem(\"user_id\");\n        let payload = { \n            Id: autoresponder_id ,\n            user_id:user_id\n        }; \n        console.log(\"O)OO)O)O\",payload);\n        AutoResponderService.deleteAutoResponderStatus(payload).then(response =>{\n            console.log(\"This I gottttt\",payload);\n          if(response.data.code == 1){\n            let UserTokenNew=localStorage.getItem(\"kyubi_user_token\");\n            let payloadNew ={\n                user_id:UserTokenNew\n            }\n            AutoResponderService.listAutoResponder(payloadNew).then(async responsex =>{\n                if(responsex.data.payload !=  \"\" ){\n                        this.setState({\n                                        autoresponderListValue:responsex.data.payload.autokey,\n                                        autoResponsederList:1,\n                                        autoResponsederCreate:0,\n                                        autoResponsederEdit:0,\n                                        loader:false\n                                        \n                        })\n                  }\n            })\n          }\n          console.log(\"This Is I Got ====== \",response);\n        });\n    }\n    componentDidMount(){\n        this.setState({loader:true});\n        let UserToken=localStorage.getItem(\"kyubi_user_token\");\n        //this.setState({autoresponderList:autoresponderList})\n        let payload ={\n            user_id:UserToken\n        }\n        AutoResponderService.listAutoResponder(payload).then(async response =>{\n            console.log(\"This is what i Got\",response);\n            \n          if(response.data.payload !=  \"\" ){\n            console.log(\"This is what i Got\",response.data.payload);\n            if(response.data.payload.autokey.length>0){\n                console.log(\"This is what i Got\",response.data.payload.autokey);\n                this.setState({autoresponderListValue:response.data.payload.autokey,loader:false})\n            }\n            \n          }\n          this.setState({loader:false});\n        }).catch(error=>{\n            this.setState({loader:false});\n            this.setState({autoresponderListValue:[],loader:false})\n        });\n    }\n      render() {\n        const { auto_responder_keywords,auto_responder_keywords_edits } = this.state;\n        return (\n        <div>\n                {this.state.autoResponsederList ?\n                \n                <div id=\"tabautoResponder\" className=\"subtabcontent\">\n                    {this.state.loader && (   \n                                <div className=\"after_login_refresh\"><img src={LoaderLogo} alt=\"\"/></div>\n                    )}\n                    { this.state.autoresponderListValue.length != 0 ?\n\n                        <div>\n                            <div className=\"headding\">\n                                <span>Auto Responder Lists</span> <a href=\"\" onClick={this.addAutoResponderHandler} className=\"createbtn\"><img alt=\"\" src={plusLogo}/> Create New</a>\n                            </div>\n                            <div className=\"listingholder\">\n\n                            {this.state.autoresponderListValue.map((data, i) => {\n                                return(\n                                    \n                                    <div className={data.status === 1  ?  \"listing_card\" :\"listing_card inactive\"}>\n                                        <div className=\"head\">\n                                            <div className=\"txt\">{data.auto_responder_name}</div>\n                                            <div className=\"action\">\n                                                <label className=\"switch_box box_2\">\n                                                <input type=\"checkbox\" onChange={() => this.editAutoResponderStatus(data._id,data.status)} className=\"switch_2\" id=\"\" name=\"\" checked={data.status === 1  ?  \"checked\" :\"\"}  />\n                                                <div className=\"toogler\"></div>\n                                                </label>\n                                                <a href=\"#\" onClick={(event) => this.editAutoResponder(data._id,event)} ><img src={editLogo} alt=\"\"/></a> \n                                                <a href=\"#\"  onClick={(event) => this.deleteAutoResponder(data._id,event)} ><img src={deleteLogo} alt=\"\"/></a>\n                                            </div>\n                                        </div>\n                                        <div className=\"body\">\n                                                <p className=\"qn\">{data.message}</p>\n                                            <div className=\"listfooter\">\n                                                <p>Keywords:</p>\n                                                {   data.autoresponderkeywords.map((result, i) => {\n                                                        return (\n                                                            <span class=\"tags\">{result.keywords}</span>\n                                                        )\n                                                    })\n                                                }\n                                                \n                                            </div>\n                                        </div>\n                                        \n                                    </div>                                  \n\n                                )\n                            })}\n                            </div>\n\n                        </div>\n                            \n                    :\n                    <div className=\"list_no_record\">\n                        <img src={EmptyFileLogo} alt=\"\"/>\n                        <p>You haven’t created any Auto Responder yet.</p>\n                        <a href=\"\" onClick={this.addAutoResponderHandler} className=\"createbtn\"><img src={plusLogo} alt=\"\"/> Create New</a>\n                    </div>\n                    }\n                </div> \n                :\n                \"\"\n                }\n                {this.state.autoResponsederCreate ?\n                <div id=\"tabautoResponder\" className=\"subtabcontent\">\n                    {this.state.loader && (   \n                                <div className=\"after_login_refresh\"><img src={LoaderLogo} alt=\"\"/></div>\n                    )}\n                    <div className=\"headding gap1\">\n                            <span className=\"big\">Create a Auto Responder</span> \n                            <a  onClick={this.listAutoResponderHandler} href=\"#\" className=\"roundarrow\"><img src={backArrowLogo}/></a>\n                        </div>\n                   <div className=\"makeitScroll\">     \n                    <form>\n                        <label>\n                            Auto Responder Name\n                        </label>\n                            <input type=\"text\" \n                            name=\"auto_responder_name\" \n                            id=\"auto_responder_name\" \n                            placeholder=\"Auto-Responder Name\" \n                            value={this.state.auto_responder_name}\n                            onChange={this.inputChangeHandller}/>\n                        <label>\n                            Keywords\n                        </label>\n                            <ReactTags \n                            placeholder=\"Press enter Or Press , to Create Autoresponder Keywords\"\n                            tags={auto_responder_keywords}\n                            handleDelete={this.handleDelete}\n                            handleAddition={this.handleAddition}\n                            allowUnique={true}\n                            delimiters={delimiters} />\n                            \n                        <label>Auto Response Message</label>\n                            <textarea className=\"withtag\" \n                            name=\"auto_responder_message\"\n                            id=\"auto_responder_message\"\n                            rows=\"3\"  \n                            placeholder=\"Please enter the response message....\"\n                            value={this.state.auto_responder_message}\n                            onChange={this.inputChangeHandller}\n                            ></textarea>\n                            <button type=\"button\" onClick={() => this.insertTagAtMessageSegments('auto_responder_message', '{user_name}')} className=\"formtag\">[ First Name ]</button> \n                            <button type=\"button\" onClick={() => this.insertTagAtMessageSegments('auto_responder_message', '{date}')} class=\"formtag\">[ Todays Date ]</button>\n\n\n                            \n                        <label>\n                            {this.state.auto_responder_status ?\n                                <input className=\"checking\" type=\"checkbox\" id=\"checkboxPrimary3\" name=\"auto_responder_status\" onChange={this.autoSetting} checked/>\n                            :\n                                <input className=\"checking\" type=\"checkbox\" id=\"checkboxPrimary3\" name=\"auto_responder_status\" onChange={this.autoSetting}/>\n                            }\n                            Activate this Auto Responder\n                        </label>\n    \n                        <button className=\"blue_btn\" onClick={this.createAutoResponderGroupHandler} type=\"submit\">Save Auto Responder</button>\n                    </form>\n                    </div>\n                </div>\n                :\n                \"\"\n                }\n                {this.state.autoResponsederEdit?\n                <div id=\"tabautoResponder\" className=\"subtabcontent\">\n                    {this.state.loader && (   \n                                <div className=\"after_login_refresh\"><img src={LoaderLogo} alt=\"\"/></div>\n                    )}\n                    <div className=\"headding gap1\">\n                            <span className=\"big\">Edit a Auto Responder</span> \n                            <a  onClick={this.listAutoResponderHandler} href=\"#\" className=\"roundarrow\"><img src={backArrowLogo}/></a>\n                        </div>\n                <div className=\"makeitScroll\">      \n                    <form>\n                        <label>\n                            Auto Responder Name\n                        </label>\n                            <input type=\"text\" \n                            name=\"auto_responder_name_edit\" \n                            id=\"auto_responder_name_edit\" \n                            placeholder=\"Auto-Responder Name\" \n                            value={this.state.auto_responder_name_edit}\n                            onChange={this.inputChangeHandller}/>\n                        <label>\n                            Keywords\n                        </label>\n                            <ReactTags \n                            placeholder=\"Press enter Or Press , to Create Autoresponder Keywords\"\n                            tags={auto_responder_keywords_edits}\n                            handleDelete={this.handleEditDelete}\n                            handleAddition={this.handleEditAddition}\n                            allowUnique={true}\n                            delimiters={delimiters} />\n                        \n                        <label>Auto Response Message</label>\n                            <textarea className=\"withtag\" \n                            name=\"auto_responder_message_edit\"\n                            id=\"auto_responder_message_edit\"\n                            rows=\"3\"  \n                            placeholder=\"Please enter the response message....\"\n                            value={this.state.auto_responder_message_edit}\n                            onChange={this.inputChangeHandller}\n                            ></textarea>\n                            <button type=\"button\" onClick={() => this.insertTagAtMessageSegments('auto_responder_message_edit', '{user_name}')} className=\"formtag\">[ First Name ]</button> \n                            <button type=\"button\" onClick={() => this.insertTagAtMessageSegments('auto_responder_message_edit', '{date}')} class=\"formtag\">[ Todays Date ]</button>\n\n                        <label>\n                            {this.state.auto_responder_status_edit ?\n                                <input className=\"checking\" type=\"checkbox\" id=\"checkboxPrimary3\" name=\"auto_responder_status_edit\" onChange={this.autoSettingEdit} checked/>\n                            :\n                                <input className=\"checking\" type=\"checkbox\" id=\"checkboxPrimary3\" name=\"auto_responder_status_edit\" onChange={this.autoSettingEdit}/>\n                            }\n                            Activate this Auto Responder\n                        </label>\n                        <button className=\"blue_btn\" onClick={this.createAutoResponderGroupHandlerEdit} type=\"submit\">Update Auto Responder</button>\n\n                    </form>\n                    </div>\n                </div>\n                :\n                \"\"\n                }\n\n        </div>\n            \n            \n       \n        )\n      }\n}\nexport default responseSetting;","C:\\Users\\PRODIPTO\\Downloads\\Front-end\\GrammyWammy\\front-end\\src\\components\\modules\\Setting\\DefaultMessageSettings\\IndividualComponents\\segment.js",["307","308","309","310","311","312","313","314","315","316","317","318","319","320","321","322","323","324","325","326","327","328","329","330","331","332","333","334","335","336","337","338","339","340","341","342","343","344","345","346"],"import React, { Component } from \"react\";\nimport plusLogo from  \"../../../../../images/plus.svg\";\nimport editLogo from  \"../../../../../images/edit1.svg\";\nimport deleteLogo from  \"../../../../../images/delete1.svg\";\nimport viewLogo from  \"../../../../../images/view.svg\";\nimport backArrowLogo from \"../../../../../images/arrow2.svg\";\nimport SegmentServices from \"../../../../../services/segmentServices.js\";\nimport biglogo from \"../../../../../images/Loader.gif\"\nclass segment extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            segmentList:1,\n            segmentCreate:0,\n            segmentEdit:0,\n            default_message_text:\"\",\n            message_block:[],\n            hideTextbox:false,\n            sagment_name:\"\",\n            message_block_List:[],\n            sagment_name_edit:\"\",\n            message_block_edit:[],\n            sagment_id_edit:\"\",\n            hideTextboxEdit:false,\n            default_message_text_edit:\"\",\n            loader:true,\n            csn:false,\n            esn:false\n        }\n      }\n        /**\n        * @inputChangeHandller \n        * getting input field values\n        */\n        inputChangeHandller = (event) => {\n            this.setState({ [event.target.name]: event.target.value })\n        }\n        addSegmentHandler  = async (event) =>  {\n            event.preventDefault();\n            this.setState({\n                segmentList:0,\n                segmentCreate:1,\n                segmentEdit:0\n            })\n        }\n        listSegmentHandler  = async (event) =>  {\n            event.preventDefault();\n            this.setState({\n                segmentList:1,\n                segmentCreate:0,\n                segmentEdit:0\n            })\n        }\n        showTextBoxHandler  = async (event) =>  {\n            event.preventDefault();\n            this.setState({\n                hideTextbox:false\n            })\n        }\n        showTextBoxHandlerEdit  = async (event) =>  {\n            event.preventDefault();\n            this.setState({\n                hideTextboxEdit:false\n            })\n        } \n        storeInMessageBlock =   async   (event) =>  {\n            event.preventDefault();\n            let Old_message_block   =   this.state.message_block;\n            Old_message_block.push(this.state.default_message_text);\n\n            this.setState({\n                message_block:Old_message_block,\n                default_message_text:\"\",\n                hideTextbox:true,\n                cmb:false\n            });\n            console.log(\"This are the Message Blocks\",this.state.message_block)\n        }\n        storeInMessageBlockEdit =   async   (event) =>  {\n            event.preventDefault();\n            let Old_message_block_edit   =   this.state.message_block_edit;\n            Old_message_block_edit.push(this.state.default_message_text_edit);\n\n            this.setState({\n                message_block_edit:Old_message_block_edit,\n                default_message_text_edit:\"\",\n                hideTextboxEdit:true\n            });\n            console.log(\"This are the Message Blocks\",this.state.message_block_edit)\n        }\n        submitAddSegment   =    async   (event) =>  {\n            this.setState({loader:true})\n            event.preventDefault();\n            if(this.state.sagment_name == \"\"){\n                this.setState({csn:true,loader:false})\n            }else{\n                this.setState({csn:false})\n            }\n            \n            if(this.state.sagment_name !=\"\" ){\n                let payload =   {\n                    message_segments_block:this.state.message_block,\n                    message_segment_name:this.state.sagment_name,\n                    user_id:localStorage.getItem(\"user_id\")\n                }\n                console.log(\"This I have to save in DB as Segments\",payload);\n                SegmentServices.createSegment(payload).then(result=>{\n                    \n                    let  params ={\n                        user_id    :   localStorage.getItem('user_id')\n                    };\n                    SegmentServices.getSegment(params).then(result=>{\n                        if(result.data.code == 1){\n                            this.setState({\n                            message_block_List:result.data.payload,\n                            loader:false,\n                            segmentList:1,\n                            segmentCreate:0,\n                            segmentEdit:0,\n                            message_block:[],\n                            sagment_name:\"\"\n\n                            })  \n                        }else{\n                            this.setState({\n                                loader:false,\n                                segmentList:1,\n                                segmentCreate:0,\n                                segmentEdit:0,\n                                message_block:[],\n                                sagment_name:\"\"\n                                })\n                        }\n                    }).catch(error=>{\n                        console.log(\"This I got From DDDDBBBBBB EROOOOOO\",error);\n                    })\n    \n                }).catch(error=>{\n                    let  params ={\n                        user_id    :   localStorage.getItem('user_id')\n                    };\n                    SegmentServices.getSegment(params).then(result=>{\n                        if(result.data.code == 1){\n                            this.setState({\n                            message_block_List:result.data.payload,\n                            loader:false\n                            })  \n                        }else{\n                            this.setState({\n                                loader:false\n                                })\n                        }\n                    }).catch(error=>{\n                        console.log(\"This I got From DDDDBBBBBB EROOOOOO\",error);\n                    })\n    \n                })\n            }\n            \n        }\n        submitAddSegmentEdit   =    async   (event) =>  {\n            this.setState({loader:true})\n            event.preventDefault();\n            if(this.state.sagment_name_edit == \"\"){\n                this.setState({esn:true,loader:false})\n            }else{\n                this.setState({esn:false})\n            }\n            if(this.state.sagment_name_edit !=\"\" ){\n            let payload =   {\n                message_segments_block:this.state.message_block_edit,\n                message_segment_name:this.state.sagment_name_edit,\n                user_id:localStorage.getItem(\"user_id\"),\n                sagment_id_edit:this.state.sagment_id_edit\n            }\n            console.log(\"This I have to save in DB as Segments\",payload);\n            SegmentServices.UpdateSegment(payload).then(result=>{\n                console.log(\"this is more SUUUUUUCCEEEEESSSS\",result);\n                if(result.data.code == 1){\n                    this.setState({\n                    message_block_List:result.data.payload,\n                    loader:false,\n                    segmentList:1,\n                    segmentCreate:0,\n                    segmentEdit:0,\n                    message_block_edit:[],\n                    sagment_name_edit:\"\",\n                    sagment_id_edit:\"\"\n                    })  \n                }else{\n                    this.setState({\n                        loader:false,\n                        segmentList:1,\n                        segmentCreate:0,\n                        segmentEdit:0,\n                        message_block_edit:[],\n                        sagment_name_edit:\"\",\n                        sagment_id_edit:\"\"\n                        })\n                }\n            }).catch(error=>{\n                console.log(\"this is more ERRRRROOOOOORRRRRR\",error);\n            })\n            }\n        }\n        /**\n         * @insertTagAtMessageSegments\n         * in this function we are managing the tag in welcome message area\n        */\n        insertTagAtMessageSegments(areaId, text) {\n                var txtarea = document.getElementById(areaId);\n                if (!txtarea) {\n                return;\n                }\n                // if (txtarea.value.length < 188) {\n                var scrollPos = txtarea.scrollTop;\n                var strPos = 0;\n                var br = ((txtarea.selectionStart || txtarea.selectionStart == '0') ?\n                \"ff\" : (document.selection ? \"ie\" : false));\n                if (br == \"ie\") {\n                txtarea.focus();\n                var range = document.selection.createRange();\n                range.moveStart('character', -txtarea.value.length);\n                strPos = range.text.length;\n                } else if (br == \"ff\") {\n                strPos = txtarea.selectionStart;\n                }\n                var front = (txtarea.value).substring(0, strPos);\n                var back = (txtarea.value).substring(strPos, txtarea.value.length);\n                txtarea.value = front + text + back;\n                strPos = strPos + text.length;\n                let WelcomeMessage = txtarea.value;\n                WelcomeMessage = WelcomeMessage.replace(/{user_name}/g, \"\");\n                WelcomeMessage = WelcomeMessage.replace(/{last_name}/g, \"\");\n                WelcomeMessage = WelcomeMessage.replace(/{date}/g, \"\");\n                WelcomeMessage = WelcomeMessage.replace(/{date_time}/g, \"\");\n                //console.log(\"This is the message ========\",WelcomeMessage);\n                this.setState({ default_message_text: txtarea.value});\n                // this.setState({ welcomeContent: txtarea.value, welcomeTextLengthCount: txtarea.value });\n                if (br == \"ie\") {\n                txtarea.focus();\n                var ieRange = document.selection.createRange();\n                ieRange.moveStart('character', -txtarea.value.length);\n                ieRange.moveStart('character', strPos);\n                ieRange.moveEnd('character', 0);\n                ieRange.select();\n                } else if (br == \"ff\") {\n                txtarea.selectionStart = strPos;\n                txtarea.selectionEnd = strPos;\n                txtarea.focus();\n                }\n                txtarea.scrollTop = scrollPos;\n                // }\n        }\n        insertTagAtMessageSegments_edit(areaId, text) {\n            var txtarea = document.getElementById(areaId);\n            if (!txtarea) {\n            return;\n            }\n            // if (txtarea.value.length < 188) {\n            var scrollPos = txtarea.scrollTop;\n            var strPos = 0;\n            var br = ((txtarea.selectionStart || txtarea.selectionStart == '0') ?\n            \"ff\" : (document.selection ? \"ie\" : false));\n            if (br == \"ie\") {\n            txtarea.focus();\n            var range = document.selection.createRange();\n            range.moveStart('character', -txtarea.value.length);\n            strPos = range.text.length;\n            } else if (br == \"ff\") {\n            strPos = txtarea.selectionStart;\n            }\n            var front = (txtarea.value).substring(0, strPos);\n            var back = (txtarea.value).substring(strPos, txtarea.value.length);\n            txtarea.value = front + text + back;\n            strPos = strPos + text.length;\n            let WelcomeMessage = txtarea.value;\n            WelcomeMessage = WelcomeMessage.replace(/{user_name}/g, \"\");\n            WelcomeMessage = WelcomeMessage.replace(/{last_name}/g, \"\");\n            WelcomeMessage = WelcomeMessage.replace(/{date}/g, \"\");\n            WelcomeMessage = WelcomeMessage.replace(/{date_time}/g, \"\");\n            //console.log(\"This is the message ========\",WelcomeMessage);\n            this.setState({ default_message_text_edit: txtarea.value});\n            // this.setState({ welcomeContent: txtarea.value, welcomeTextLengthCount: txtarea.value });\n            if (br == \"ie\") {\n            txtarea.focus();\n            var ieRange = document.selection.createRange();\n            ieRange.moveStart('character', -txtarea.value.length);\n            ieRange.moveStart('character', strPos);\n            ieRange.moveEnd('character', 0);\n            ieRange.select();\n            } else if (br == \"ff\") {\n            txtarea.selectionStart = strPos;\n            txtarea.selectionEnd = strPos;\n            txtarea.focus();\n            }\n            txtarea.scrollTop = scrollPos;\n            // }\n        }\n        editMessageSegments(segment_id,event){\n            event.preventDefault();\n            let  params ={\n                segment_id    :   segment_id\n            };\n            SegmentServices.editSegment(params).then(result  =>{\n                if(result.data.code == 1){\n                    this.setState({\n                        sagment_name_edit:result.data.payload.title,\n                        message_block_edit:result.data.payload.message_blocks,\n                        sagment_id_edit:result.data.payload._id,\n                        segmentList:0,\n                        segmentCreate:0,\n                        segmentEdit:1\n                    })\n              }\n            })\n        }\n        RemoveMessageSegmentsBlockEdit(block_index,event){\n            event.preventDefault();\n            console.log(\"this is the Index\",block_index);\n            let  presentSegmentBlock= this.state.message_block_edit;\n            presentSegmentBlock.splice(block_index, 1);\n            this.setState({message_block_edit:presentSegmentBlock});\n\n        }\n        componentDidMount(){\n                let  params ={\n                    user_id    :   localStorage.getItem('user_id')\n                };\n                SegmentServices.getSegment(params).then(result=>{\n                  \n                \n                if(result.data.code == 1){\n                      this.setState({\n                        message_block_List:result.data.payload,\n                        loader:false\n                      })\n                }else{\n                    this.setState({\n                        loader:false\n                      })\n                }\n                }).catch(error=>{\n                    this.setState({\n                        loader:false\n                      })\n                  console.log(\"This I got From DDDDBBBBBB EROOOOOO\",error);\n                })\n        }\n      render() {\n        return (\n            <div>\n                {this.state.segmentList ?\n\n                    <div className=\"subtabcontent\">\n                            {this.state.loader && (   \n                                <div className=\"after_login_refresh\"><img src={biglogo} alt=\"\"/></div>\n                            )}\n                        { this.state.message_block_List.length != 0 ?\n                            <div>\n                                <div className=\"headding\">\n                                    <span>Message Segments</span> <a onClick={this.addSegmentHandler} className=\"createbtn\"><img src={plusLogo}/> Create New</a>\n                                </div>\n                                <div className=\"segmentlists\">\n                                {this.state.message_block_List && this.state.message_block_List.map((data, index) =>\n                                    <div className=\"segmentlist\">\n                                        <span className=\"txt\">{data.title}</span>\n                                        <span className=\"txt\">{data.message_blocks.length}<br/> Blocks </span>\n                                        <div className=\"action\">\n                                            {/* <a href=\"#\"><img src={viewLogo} alt=\"\"/></a> */}\n                                            <a href=\"#\" onClick={(event) => this.editMessageSegments(data._id,event)} ><img src={editLogo} alt=\"\"/></a>\n                                            {/* <a href=\"#\"><img src={deleteLogo} alt=\"\"/></a> */}\n                                        </div>\n                                    </div>\n                                )}\n                                </div>\n                            </div>\n                        :\n                            <div className=\"list_no_record\">\n                                <img src=\"images/empty_file.svg\" alt=\"\"/>\n                                <p>You haven’t created any Message Segment yet.</p>\n                                <a onClick={this.addSegmentHandler} className=\"createbtn\"><img src={plusLogo} alt=\"\"/> Create New</a>\n                            </div>\n                        }\n                        \n                    </div>\n                :\n                \"\"\n                }\n                {this.state.segmentCreate ?\n                    <div className=\"subtabcontent\">\n                        {this.state.loader && (   \n                                <div className=\"after_login_refresh\"><img src={biglogo} alt=\"\"/></div>\n                        )}\n                        <div className=\"headding gap1\">\n                            <span className=\"big\">Create a Message Segments</span> \n                            <a  onClick={this.listSegmentHandler} href=\"#\" className=\"roundarrow\"><img src={backArrowLogo}/></a>\n                        </div>\n                        <form>\n                            <label>Title</label>\n                            <input type=\"text\" name=\"sagment_name\" value={this.state.sagment_name} onChange={this.inputChangeHandller}  placeholder=\"Enter your message segment title\" className=\"otherstyle\" />\n                            {this.state.csn && (\n                            <div className=\"error\"> Please Provide Message Segments Title *</div>\n                            )}\n                            <label>Create message block (s)<br/>\n                                <span>Click on the </span>\"keyword\"\n                                <span> to insert into your message</span>\n                            </label>\n                                {this.state.message_block && this.state.message_block.map((data, index) =>\n                                    <span className=\"selectedBlock\">{data}<a href=\"#\" className=\"cross\">X</a></span>\n                                )}\n                            <div className=\"addblock\">\n                                {this.state.hideTextbox\n                                ?\n                                <p className=\"gap1\"><a href=\"#\" onClick={this.showTextBoxHandler} className=\"blue_link\">Add another block</a></p>\n                                :\n                                <textarea name=\"default_message_text\" value={this.state.default_message_text} onChange={this.inputChangeHandller} id=\"default_message_text\" className=\"withtag otherstyle\" placeholder=\"Build block content\">\n                        \n                                </textarea>\n                                \n                                }\n                                \n                                {this.state.default_message_text==\"\"\n                                ?\n                                \"\"\n                                :\n                                <a href=\"#\" onClick={this.storeInMessageBlock} className=\"add\">Add</a>\n                                }\n                                \n                            </div>\n                            <button type=\"button\" onClick={() => this.insertTagAtMessageSegments('default_message_text', '{user_name}')} className=\"formtag\">[ User Name ]</button> \n                            <button type=\"button\" onClick={() => this.insertTagAtMessageSegments('default_message_text', '{date}')} class=\"formtag\">[ Todays Date ]</button>\n\n                            <p>&nbsp;</p>\n\n                            <button onClick={this.submitAddSegment} className=\"blue_btn\" type=\"submit\">Save Message Segment</button>\n                        </form>  \n                    </div>\n                :\n                \"\"\n                }\n                {this.state.segmentEdit ?\n                    <div className=\"subtabcontent\">\n                        {this.state.loader && (   \n                                <div className=\"after_login_refresh\"><img src={biglogo} alt=\"\"/></div>\n                        )}\n                        <div className=\"headding gap1\">\n                            <span className=\"big\">Edit a Message Segments</span> \n                            <a  onClick={this.listSegmentHandler} href=\"#\" className=\"roundarrow\"><img src={backArrowLogo}/></a>\n                        </div>\n                        <form>\n                            <label>Title</label>\n                            <input type=\"text\" name=\"sagment_name_edit\" value={this.state.sagment_name_edit} onChange={this.inputChangeHandller}  placeholder=\"Enter your message segment title\" className=\"otherstyle\" />\n                            {this.state.esn && (\n                                <div className=\"error\"> Please Provide Message Segments Title *</div>\n                            )}\n                            <label>Edit message block (s)<br/>\n                                <span>Click on the </span>\"keyword\"\n                                <span> to insert into your message</span>\n                            </label>\n                                {this.state.message_block_edit && this.state.message_block_edit.map((data, index) =>\n                                    <span className=\"selectedBlock\">{data}<a href=\"#\"  onClick={(event) => this.RemoveMessageSegmentsBlockEdit(index,event)} className=\"cross\">X</a></span>\n                                )}\n                            <div className=\"addblock\">\n                                {this.state.hideTextboxEdit\n                                ?\n                                <p className=\"gap1\"><a href=\"#\" onClick={this.showTextBoxHandlerEdit} className=\"blue_link\">Add another block</a></p>\n                                :\n                                <textarea name=\"default_message_text_edit\" value={this.state.default_message_text_edit} onChange={this.inputChangeHandller} id=\"default_message_text_edit\" className=\"withtag otherstyle\" placeholder=\"Build block content\">\n                        \n                                </textarea>\n                                }\n                                \n                                {this.state.default_message_text_edit==\"\"\n                                ?\n                                \"\"\n                                :\n                                <a href=\"#\" onClick={this.storeInMessageBlockEdit} className=\"add\">Add</a>\n                                }\n                            </div>\n                            <button type=\"button\" onClick={() => this.insertTagAtMessageSegments_edit('default_message_text_edit', '{user_name}')} className=\"formtag\">[ User Name ]</button> \n                            <button type=\"button\" onClick={() => this.insertTagAtMessageSegments_edit('default_message_text_edit', '{date}')} class=\"formtag\">[ Todays Date ]</button>\n\n                            <p>&nbsp;</p>\n\n                            <button onClick={this.submitAddSegmentEdit} className=\"blue_btn\" type=\"submit\">Update Message Segment</button>\n                        </form>  \n                    </div>\n                :\n                \"\"\n                }\n            </div>\n        )\n      }\n}\nexport default  segment;","C:\\Users\\PRODIPTO\\Downloads\\Front-end\\GrammyWammy\\front-end\\src\\components\\modules\\Setting\\DefaultMessageSettings\\IndividualComponents\\group.js",["347","348","349","350","351","352","353","354","355","356","357","358","359","360","361","362","363","364","365","366","367","368","369","370","371","372","373","374","375","376","377","378","379","380","381","382","383","384","385","386","387","388","389","390"],"import React, { Component } from \"react\";\nimport plusLogo from  \"../../../../../images/plus.svg\";\nimport editLogo from  \"../../../../../images/edit1.svg\";\nimport deleteLogo from  \"../../../../../images/delete1.svg\";\nimport viewLogo from  \"../../../../../images/view.svg\";\nimport backArrowLogo from \"../../../../../images/arrow2.svg\";\nimport smallPlusLogo    from \"../../../../../images/smallplus.svg\";\nimport blackCrossLogo   from \"../../../../../images/black_cross.svg\";\nimport SegmentServices from \"../../../../../services/segmentServices.js\";\nimport GroupServices from \"../../../../../services/groupServices.js\";\nimport LoaderLogo from \"../../../../../images/Loader.gif\";\nclass group extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n          groupList:1,\n          groupCreate:0,\n          groupEdit:0,\n          openCreateOption:0,\n          openCreateOptionKeyWord:0,\n          openCreateOptionStaticText:0,\n          openCreateOptionSegment:0,\n          DefaultSegments:[],\n          BlockStorage:[],\n          BlockStorageEdit:[],\n          TemporaryBlockStorage:[],\n          TemporaryBlockStorageEdit:[],\n          default_message_text_add:\"\",\n          default_message_text_edit:\"\",\n          showAddButton:0,\n          message_Group_List:[],\n          group_name_edit:\"\",\n          group_block_edit:[],\n          cgn:false,\n          egn:false,\n          loader:true,\n          group_id_edit:\"\",\n            openEditOption:0,\n            openEditOptionKeyWord:0,\n            openEditOptionStaticText:0,\n            openEditOptionSegment:0,\n            showEditButton:0\n        }\n      }\n\n    addGroupHandler  = async (event) =>  {\n        event.preventDefault();\n        this.setState({\n            groupList:0,\n            groupCreate:1,\n            groupEdit:0,\n            openCreateOption:0,\n            openCreateOptionKeyWord:0,\n            openCreateOptionStaticText:0,\n            openCreateOptionSegment:0\n        })\n    }\n    editGroupHandler  = async (event) =>  {\n        event.preventDefault();\n        this.setState({\n            groupList:0,\n            groupCreate:0,\n            groupEdit:1,\n            openEditOption:0,\n            openEditOptionKeyWord:0,\n            openEditOptionStaticText:0,\n            openEditOptionSegment:0\n        })\n    }\n    addOpenOptions  = async (event) =>  {\n        event.preventDefault();\n        this.setState({\n            openCreateOption:1,\n            openCreateOptionKeyWord:0,\n            openCreateOptionStaticText:0,\n            openCreateOptionSegment:0,\n            showAddButton:0\n        })\n    }\n    editOpenOptions = async (event) =>  {\n        event.preventDefault();\n        this.setState({\n            openEditOption:1,\n            openEditOptionKeyWord:0,\n            openEditOptionStaticText:0,\n            openEditOptionSegment:0,\n            showEditButton:0\n        })\n    }\n    listGroupHandler  = async (event) =>  {\n        event.preventDefault();\n        this.setState({\n            groupList:1,\n            groupCreate:0,\n            groupEdit:0,\n        })\n    }\n    addOpenOptionsSegment  = async (event) =>  {\n        event.preventDefault();\n        this.setState({\n            openCreateOptionKeyWord:0,\n            openCreateOptionStaticText:0,\n            openCreateOptionSegment:1\n        })\n    }\n    editOpenOptionsSegment  = async (event) =>  {\n        event.preventDefault();\n        this.setState({\n            openEditOptionKeyWord:0,\n            openEditOptionStaticText:0,\n            openEditOptionSegment:1\n        })\n    }\n    addOpenOptionsText  = async (event) =>  {\n        event.preventDefault();\n        this.setState({\n            openCreateOptionKeyWord:0,\n            openCreateOptionStaticText:1,\n            openCreateOptionSegment:0\n        })\n    }\n    editOpenOptionsText  = async (event) =>  {\n        event.preventDefault();\n        this.setState({\n            openEditOptionKeyWord:0,\n            openEditOptionStaticText:1,\n            openEditOptionSegment:0\n        })\n    }\n    addOpenOptionsKeyword  = async (event) =>  {\n        event.preventDefault();\n        this.setState({\n            openCreateOptionKeyWord:1,\n            openCreateOptionStaticText:0,\n            openCreateOptionSegment:0\n        })\n    }\n    editOpenOptionsKeyword  = async (event) =>  {\n        event.preventDefault();\n        this.setState({\n            openEditOptionKeyWord:1,\n            openEditOptionStaticText:0,\n            openEditOptionSegment:0\n        })\n    }\n    insertBlockIntoTempStore    =   async (type,OptId,OptText,event)=>{\n\n        event.preventDefault();\n        let OldTemporaryBlockStorage =this.state.TemporaryBlockStorage;  \n        if(type  == 1){\n            let eachBlockSegmet ={\n                type:\"id\",\n                value:OptId,\n                contents:\"[\"+OptText+\"]\"\n\n            }\n            OldTemporaryBlockStorage.push(eachBlockSegmet);\n            this.setState({\n                TemporaryBlockStorage:OldTemporaryBlockStorage,\n                openCreateOption:0,\n                openCreateOptionKeyWord:0,\n                openCreateOptionStaticText:0,\n                openCreateOptionSegment:0,\n                showAddButton:1\n            })\n        }else if(type  == 2){\n            let eachBlockText ={\n                type:\"text\",\n                value:OptText,\n                contents:OptText\n\n            }\n            OldTemporaryBlockStorage.push(eachBlockText);\n            this.setState({\n\n                TemporaryBlockStorage:OldTemporaryBlockStorage,\n                openCreateOption:0,\n                openCreateOptionKeyWord:0,\n                openCreateOptionStaticText:0,\n                openCreateOptionSegment:0,\n                default_message_text_add:\"\",\n                showAddButton:1\n            })\n        }else{\n            let eachBlockText ={\n                type:\"text\",\n                value:OptText,\n                contents:OptText\n\n            }\n            OldTemporaryBlockStorage.push(eachBlockText);\n            this.setState({\n\n                TemporaryBlockStorage:OldTemporaryBlockStorage,\n                openCreateOption:0,\n                openCreateOptionKeyWord:0,\n                openCreateOptionStaticText:0,\n                openCreateOptionSegment:0,\n                showAddButton:1\n            })\n        }\n        console.log(\"Tis is the set\",this.state.TemporaryBlockStorage);\n        \n    }\n    insertBlockIntoTempStoreEdit    =   async (type,OptId,OptText,event)=>{\n\n        event.preventDefault();\n        let OldTemporaryBlockStorageEdit =this.state.TemporaryBlockStorageEdit;  \n        if(type  == 1){\n            let eachBlockSegmetEdit ={\n                type:\"id\",\n                value:OptId,\n                contents:\"[\"+OptText+\"]\"\n\n            }\n            OldTemporaryBlockStorageEdit.push(eachBlockSegmetEdit);\n            this.setState({\n                TemporaryBlockStorageEdit:OldTemporaryBlockStorageEdit,\n                openEditOption:0,\n                openEditOptionKeyWord:0,\n                openEditOptionStaticText:0,\n                openEditOptionSegment:0,\n                showEditButton:1\n            })\n        }else if(type  == 2){\n            let eachBlockTextEdit ={\n                type:\"text\",\n                value:OptText,\n                contents:OptText\n\n            }\n            OldTemporaryBlockStorageEdit.push(eachBlockTextEdit);\n            this.setState({\n\n                TemporaryBlockStorageEdit:OldTemporaryBlockStorageEdit,\n                openEditOption:0,\n                openEditOptionKeyWord:0,\n                openEditOptionStaticText:0,\n                openEditOptionSegment:0,\n                default_message_text_edit:\"\",\n                showEditButton:1\n            })\n        }else{\n            let eachBlockTextEdit ={\n                type:\"text\",\n                value:OptText,\n                contents:OptText\n\n            }\n            OldTemporaryBlockStorageEdit.push(eachBlockTextEdit);\n            this.setState({\n\n                TemporaryBlockStorageEdit:OldTemporaryBlockStorageEdit,\n                openEditOption:0,\n                openEditOptionKeyWord:0,\n                openEditOptionStaticText:0,\n                openEditOptionSegment:0,\n                showEditButton:1\n            })\n        }\n        console.log(\"Tis is the set\",this.state.TemporaryBlockStorageEdit);\n        \n    }\n    inputChangeHandller = (event) => {\n        this.setState({ [event.target.name]: event.target.value })\n    }\n    RemoveMessageBlockAdd(block_index,event){\n        event.preventDefault();\n        console.log(\"this is the Index\",block_index);\n        let  TemporaryBlockStorage= this.state.TemporaryBlockStorage;\n        TemporaryBlockStorage.splice(block_index, 1);\n        this.setState({TemporaryBlockStorage:TemporaryBlockStorage});\n\n    }\n    RemoveMessageBlockEdit(block_index,event){\n        event.preventDefault();\n        console.log(\"this is the Index\",block_index);\n        let  TemporaryBlockStorageEdit= this.state.TemporaryBlockStorageEdit;\n        TemporaryBlockStorageEdit.splice(block_index, 1);\n        this.setState({TemporaryBlockStorageEdit:TemporaryBlockStorageEdit});\n\n    }\n    storeInMessageBlock = async   (event) =>  {\n        event.preventDefault();\n        let OldBlockStorage   =   this.state.BlockStorage;\n        OldBlockStorage.push(this.state.TemporaryBlockStorage);\n\n        this.setState({\n            BlockStorage:OldBlockStorage,\n            TemporaryBlockStorage:[],\n            showAddButton:0\n        });\n        console.log(\"This are the Message Blocks\",this.state.BlockStorage)\n    }\n    storeInMessageBlockEdit = async   (event) =>  {\n        event.preventDefault();\n        let OldBlockStorage   =   this.state.BlockStorageEdit;\n        OldBlockStorage.push(this.state.TemporaryBlockStorageEdit);\n\n        this.setState({\n            BlockStorageEdit:OldBlockStorage,\n            TemporaryBlockStorageEdit:[],\n            showEditButton:0\n        });\n        console.log(\"This are the Message Blocks\",this.state.BlockStorageEdit)\n    }\n    RemoveMessageSegmentsBlockAdd(block_index,event){\n        event.preventDefault();\n        console.log(\"this is the Index\",block_index);\n        let  presentSegmentBlock= this.state.BlockStorage;\n        presentSegmentBlock.splice(block_index, 1);\n        this.setState({BlockStorage:presentSegmentBlock});\n\n    }\n    RemoveMessageSegmentsBlockEdit(block_index,event){\n        event.preventDefault();\n        console.log(\"this is the Index\",block_index);\n        let  presentSegmentBlock= this.state.BlockStorageEdit;\n        presentSegmentBlock.splice(block_index, 1);\n        this.setState({BlockStorageEdit:presentSegmentBlock});\n\n    }\n    submitAddGroup = async  (event) =>{\n        this.setState({loader:true});\n        event.preventDefault();\n        let payload =   {\n            BlockStorage:this.state.BlockStorage,\n            group_name:this.state.group_name,\n            user_id:localStorage.getItem(\"user_id\")\n        }\n        console.log(\"This I have to save in DB as Group\",payload);\n        GroupServices.createGroup(payload).then(result=>{\n            if(result.data.code == 1){\n                this.setState({\n                    message_Group_List:result.data.payload,\n                    groupList:1,\n                    groupCreate:0,\n                    groupEdit:0,\n                    openCreateOption:0,\n                    openCreateOptionKeyWord:0,\n                    openCreateOptionStaticText:0,\n                    openCreateOptionSegment:0,\n                    loader:false\n                })\n                //console.log(\"This I got From DDDDBBBBBB EROOOOOO GGGGG\",this.state.message_Group_List);\n            }\n            //console.log(\"this is more SUUUUUUCCEEEEESSSS\",result);\n        }).catch(error=>{\n            console.log(\"this is more ERRRRROOOOOORRRRRR\",error);\n        })\n    }\n    submitEditGroup = async  (event) =>{\n        this.setState({loader:true});\n        event.preventDefault();\n        let payload =   {\n            BlockStorage:this.state.BlockStorageEdit,\n            group_name_edit:this.state.group_name_edit,\n            user_id:localStorage.getItem(\"user_id\"),\n            group_id_edit:this.state.group_id_edit\n        }\n        console.log(\"This I have to save in DB as Group\",payload);\n        GroupServices.UpdateGroup(payload).then(result=>{\n            if(result.data.code == 1){\n                console.log(result.data.payload);\n                this.setState({\n                    message_Group_List:result.data.payload,\n                    loader:false,\n                    groupList:1,\n                    groupCreate:0,\n                    groupEdit:0,\n                    openEditOption:0,\n                    openEditOptionKeyWord:0,\n                    openEditOptionStaticText:0,\n                    openEditOptionSegment:0\n                })\n                \n            }\n            //console.log(\"this is more SUUUUUUCCEEEEESSSS\",result);\n        }).catch(error=>{\n            console.log(\"this is more ERRRRROOOOOORRRRRR\",error);\n            this.setState({\n                loader:false,\n                groupList:1,\n                groupCreate:0,\n                groupEdit:0,\n                openEditOption:0,\n                openEditOptionKeyWord:0,\n                openEditOptionStaticText:0,\n                openEditOptionSegment:0\n            })\n        })\n    }\n    editMessageGroup(group_id,event){\n        this.setState({loader:true})\n        event.preventDefault();\n        let  params ={\n            group_id    :   group_id\n        };\n        GroupServices.editGroup(params).then(result  =>{\n            console.log(result);\n            if(result.data.code == 1){\n                this.setState({\n                    group_name_edit:result.data.payload.title,\n                    BlockStorageEdit:result.data.payload.associate_blocks,\n                    group_id_edit:result.data.payload._id,\n                    loader:false,\n                    groupList:0,\n                    groupCreate:0,\n                    groupEdit:1,\n                })\n          }\n        })\n    }\n    componentDidMount(){\n        this.setState({loader:true})\n        let  params ={\n            user_id    :   localStorage.getItem('user_id')\n        };\n        SegmentServices.getSegment(params).then(result=>{        \n            if(result.data.code == 1){\n                this.setState({\n                    DefaultSegments:result.data.payload\n                })\n            }\n        }).catch(error=>{\n          console.log(\"This I got From DDDDBBBBBB EROOOOOO\",error);\n        })\n        GroupServices.getGroup(params).then(result=>{\n            if(result.data.code == 1){\n                this.setState({\n                    message_Group_List:result.data.payload,\n                    loader:false\n                })\n                console.log(\"This I got From DDDDBBBBBB EROOOOOO GGGGG\",this.state.message_Group_List);\n            }\n        }).catch(error=>{\n            this.setState({\n               loader:false\n            })\n          console.log(\"This I got From DDDDBBBBBB EROOOOOO\",error);\n        })\n        //message_Group_List\n\n    }\n      render() {\n        return (\n        <div>\n            {this.state.groupList ?\n            <div className=\"subtabcontent\">\n                {this.state.loader && (   \n                                <div className=\"after_login_refresh\"><img src={LoaderLogo} alt=\"\"/></div>\n                )}\n                { this.state.message_Group_List.length != 0 \n                ?\n                <div>\n                    <div className=\"headding\">\n                        <span>Message Group</span> <a href=\"\" onClick={this.addGroupHandler} className=\"createbtn\"><img src={plusLogo}/> Create New</a>\n                    </div>\n                    <div className=\"segmentlists\">\n                    {this.state.message_Group_List && this.state.message_Group_List.map((data, index) =>\n                        <div className=\"segmentlist\">\n                            <span className=\"txt\">{data.title}</span>\n                            <div className=\"action\">\n                            <a href=\"#\" onClick={(event) => this.editMessageGroup(data._id,event)} ><img src={editLogo} alt=\"\"/></a>\n                            </div>\n                        </div>\n                    )}\n                    </div>\n                </div>\n                :\n                <div className=\"list_no_record\">\n                    <img src=\"images/empty_file.svg\" alt=\"\"/>\n                    <p>You haven’t created any Message Group yet.</p>\n                    <a onClick={this.addGroupHandler} className=\"createbtn\"><img src={plusLogo} alt=\"\"/> Create New</a>\n                </div>\n                }\n            </div>\n            :\n            \"\"\n            }\n            {this.state.groupCreate ?\n            <div className=\"subtabcontent\">\n                {this.state.loader && (   \n                                <div className=\"after_login_refresh\"><img src={LoaderLogo} alt=\"\"/></div>\n                )}\n                <div class=\"headding gap1\">\n                    <span class=\"big\">Create a Message Group</span> \n                    <a  onClick={this.listGroupHandler} href=\"#\" className=\"roundarrow\"><img src={backArrowLogo}/></a>\n                </div>\n                <form>\n                    <label>Title</label>\n                        <input type=\"text\" name=\"group_name\" value={this.state.group_name} onChange={this.inputChangeHandller}  placeholder=\"Enter your message group title\" className=\"otherstyle\" />\n                    <label>Build message set</label>\n                    {this.state.BlockStorage && this.state.BlockStorage.map((data, index) =>\n                                    <span className=\"selectedBlock\">{ data.map((newdata) =>\n                                        newdata.contents\n                                    )}<a href=\"#\" onClick={(event) => this.RemoveMessageSegmentsBlockAdd(index,event)} className=\"cross\">X</a></span>\n                    )}\n                    <div class=\"insert_msg\">\n                        {this.state.TemporaryBlockStorage && this.state.TemporaryBlockStorage.map((data, index) =>\n\n                        <div class=\"addedinsert\">{data.contents}<a href=\"#\"   onClick={(event) => this.RemoveMessageBlockAdd(index,event)} ><img   src={blackCrossLogo}/></a> </div>\n                        \n                        )}\n                        \n                        <div class=\"insert\">\n                            <a href=\"\" onClick={this.addOpenOptions} ><span ><img src={smallPlusLogo}/></span> Insert {this.state.TemporaryBlockStorage.length > 0 ?\" Another\" : \"\"  }</a>\n                            {this.state.openCreateOption ? \n                                <div class=\"insertdropdown\">\n                                    <ul>\n                                        <li><a onClick={this.addOpenOptionsSegment} href=\"#\">Message Segment</a>\n                                        {this.state.openCreateOptionSegment ?\n                                            <div  class=\"insertdropdown inserone\">\n                                                <ul>\n                                                    {this.state.DefaultSegments && this.state.DefaultSegments.map((data, index) =>\n                                                        <li><a onClick={(event) => this.insertBlockIntoTempStore(1,data._id,data.title,event)}  href=\"#\">{data.title}</a></li>                                                \n                                                    )}\n                                                </ul>\n                                            </div>\n                                        :\n                                        \"\"\n                                        }\n                                        </li>                                  \n                                        <li><a onClick={this.addOpenOptionsText} href=\"#\">Static Text</a>\n                                            {this.state.openCreateOptionStaticText ?\n                                                <div class=\"insertdropdown insertwo\">\n                                                    <label>Title</label>\n                                                    <textarea name=\"default_message_text_add\" value={this.state.default_message_text_add} onChange={this.inputChangeHandller} id=\"default_message_text_add\" className=\"withtag otherstyle\" placeholder=\"Please Provide Your Static Text\"></textarea>\n                                                    <button  onClick={(event) => this.insertBlockIntoTempStore(2,\"\",this.state.default_message_text_add,event)} class=\"blue_btn\" type=\"submit\">Done</button> \n                                                </div>\n                                            :\n                                            \"\"\n                                            }\n                                        </li>\n                                        <li><a onClick={this.addOpenOptionsKeyword} href=\"#\">Keywords</a>\n                                        {this.state.openCreateOptionKeyWord ?\n                                            <div class=\"insertdropdown inserthree\">\n                                                <ul>\n                                                    <li><a onClick={(event) => this.insertBlockIntoTempStore(3,\"\",\"{user_name}\",event)} href=\"#\">[ User Name ]</a></li>\n                                                    <li><a onClick={(event) => this.insertBlockIntoTempStore(3,\"\",\"{date}\",event)} href=\"#\">[ Todays Date ]</a></li>\n                                                </ul>\n                                            </div>\n                                        :\n                                        \"\"\n                                        }\n                                        </li>\n                                    </ul>\n                                </div>\n                            : \n                            \"\"\n                            }    \n                        </div>\n                        {this.state.showAddButton\n                            ?\n                                <a href=\"#\" onClick={this.storeInMessageBlock} className=\"add\">Add</a>\n                            :\n                                \"\"\n                        }\n                    </div>\n                    <button onClick={this.submitAddGroup} class=\"blue_btn\" type=\"submit\">Save Message Group</button>\n                </form>\n            </div>\n            :\n            \"\"\n            }\n            {this.state.groupEdit ?\n                <div className=\"subtabcontent\">\n                    {this.state.loader && (   \n                                <div className=\"after_login_refresh\"><img src={LoaderLogo} alt=\"\"/></div>\n                    )}\n                    <div class=\"headding gap1\">\n                        <span class=\"big\">Edit a Message Group</span>\n                        <a  onClick={this.listGroupHandler} href=\"#\" className=\"roundarrow\"><img src={backArrowLogo}/></a>\n                    </div>\n                    <form>\n                        <label>Title</label>\n                        <input type=\"text\" name=\"group_name_edit\" value={this.state.group_name_edit} onChange={this.inputChangeHandller}  placeholder=\"Enter your message group title\" className=\"otherstyle\" />\n                        <label>Build message set</label>\n                        {this.state.BlockStorageEdit && this.state.BlockStorageEdit.map((data, index) =>\n                                    <span className=\"selectedBlock\">{ data.map((newdata) =>\n                                        newdata.contents\n                                    )}<a href=\"#\" onClick={(event) => this.RemoveMessageSegmentsBlockEdit(index,event)} className=\"cross\">X</a></span>\n                        )}\n                        <div class=\"insert_msg\">\n                        {this.state.TemporaryBlockStorageEdit && this.state.TemporaryBlockStorageEdit.map((data, index) =>\n\n                            <div class=\"addedinsert\">{data.contents}<a href=\"#\"   onClick={(event) => this.RemoveMessageBlockEdit(index,event)} ><img   src={blackCrossLogo}/></a> </div>\n\n                        )}\n                            <div class=\"insert\">\n                                <a href=\"\" onClick={this.editOpenOptions} ><span ><img src={smallPlusLogo}/></span> Insert {this.state.TemporaryBlockStorageEdit.length > 0 ?\" Another\" : \"\"  }</a>\n                                {this.state.openEditOption \n                                ?\n                                <div class=\"insertdropdown\">\n                                    <ul>\n                                        <li><a onClick={this.editOpenOptionsSegment} href=\"#\">Message Segment</a>\n                                        {this.state.openEditOptionSegment ?\n                                            <div  class=\"insertdropdown inserone\">\n                                                <ul>\n                                                    {this.state.DefaultSegments && this.state.DefaultSegments.map((data, index) =>\n                                                        <li><a onClick={(event) => this.insertBlockIntoTempStoreEdit(1,data._id,data.title,event)}  href=\"#\">{data.title}</a></li>                                                \n                                                    )}\n                                                </ul>\n                                            </div>\n                                        :\n                                        \"\"\n                                        }\n                                        </li>                                  \n                                        <li><a onClick={this.editOpenOptionsText} href=\"#\">Static Text</a>\n                                            {this.state.openEditOptionStaticText ?\n                                                <div class=\"insertdropdown insertwo\">\n                                                    <label>Title</label>\n                                                    <textarea name=\"default_message_text_edit\" value={this.state.default_message_text_edit} onChange={this.inputChangeHandller} id=\"default_message_text_edit\" className=\"withtag otherstyle\" placeholder=\"Please Provide Your Static Text\"></textarea>\n                                                    <button  onClick={(event) => this.insertBlockIntoTempStoreEdit(2,\"\",this.state.default_message_text_edit,event)} class=\"blue_btn\" type=\"submit\">Done</button> \n                                                </div>\n                                            :\n                                            \"\"\n                                            }\n                                        </li>\n                                        <li><a onClick={this.editOpenOptionsKeyword} href=\"#\">Keywords</a>\n                                        {this.state.openEditOptionKeyWord ?\n                                            <div class=\"insertdropdown inserthree\">\n                                                <ul>\n                                                    <li><a onClick={(event) => this.insertBlockIntoTempStoreEdit(3,\"\",\"{user_name}\",event)} href=\"#\">[ User Name ]</a></li>\n                                                    <li><a onClick={(event) => this.insertBlockIntoTempStoreEdit(3,\"\",\"{date}\",event)} href=\"#\">[ Todays Date ]</a></li>\n                                                </ul>\n                                            </div>\n                                        :\n                                        \"\"\n                                        }\n                                        </li>\n                                    </ul>\n                                </div>\n                                :\n                                \"\"\n                                }\n                            </div>\n                            {this.state.showEditButton\n                            ?\n                                <a href=\"#\" onClick={this.storeInMessageBlockEdit} className=\"add\">Add</a>\n                            :\n                                \"\"\n                            }\n                        </div>\n                        <button onClick={this.submitEditGroup} class=\"blue_btn\" type=\"submit\">Update Message Group</button>\n                    </form>\n                </div>\n            :\n            \"\"\n            }\n\n        </div>\n        )\n      }\n}\nexport default  group;","C:\\Users\\PRODIPTO\\Downloads\\Front-end\\GrammyWammy\\front-end\\src\\services\\segmentServices.js",["391"],"import axios from 'axios';\nimport { host,kyubi } from '../config';\n\nconst segmentServices = {\n    createSegment: function (payload) {\n        return new Promise((resolve, reject) => {\n            let options = {\n                method: 'POST',\n                url: host + '/api/segment/create',\n                headers: {  'Accept': 'application/json', 'Content-Type': 'application/json' },\n                data: payload\n            }\n            axios(options)\n                .then(res => {\n                    console.log(\"In Success\");\n                    resolve(res)\n                })\n                .catch(err => {\n                    console.log(\"In Error\");\n                    reject(err)\n                })\n        })\n    },\n    getSegment: function (payload) {\n        return new Promise((resolve, reject) => {\n            let options = {\n                method: 'POST',\n                url: host + '/api/segment/list',\n                headers: {  'Accept': 'application/json', 'Content-Type': 'application/json' },\n                data: payload\n            }\n            axios(options)\n                .then(res => {\n                    console.log(\"In Success\");\n                    resolve(res)\n                })\n                .catch(err => {\n                    console.log(\"In Error\");\n                    reject(err)\n                })\n        })\n    },\n    editSegment: function (payload) {\n        return new Promise((resolve, reject) => {\n            let options = {\n                method: 'POST',\n                url: host + '/api/segment/edit',\n                headers: {  'Accept': 'application/json', 'Content-Type': 'application/json' },\n                data: payload\n            }\n            axios(options)\n                .then(res => {\n                    console.log(\"In Success\");\n                    resolve(res)\n                })\n                .catch(err => {\n                    console.log(\"In Error\");\n                    reject(err)\n                })\n        })\n    },\n    UpdateSegment: function (payload) {\n        return new Promise((resolve, reject) => {\n            let options = {\n                method: 'POST',\n                url: host + '/api/segment/update',\n                headers: {  'Accept': 'application/json', 'Content-Type': 'application/json' },\n                data: payload\n            }\n            axios(options)\n                .then(res => {\n                    console.log(\"In Success\");\n                    resolve(res)\n                })\n                .catch(err => {\n                    console.log(\"In Error\");\n                    reject(err)\n                })\n        })\n    },\n}\nexport default segmentServices;","C:\\Users\\PRODIPTO\\Downloads\\Front-end\\GrammyWammy\\front-end\\src\\services\\groupServices.js",["392"],"import axios from 'axios';\nimport { host,kyubi } from '../config';\n\nconst groupServices = {\n    createGroup: function (payload) {\n        return new Promise((resolve, reject) => {\n            let options = {\n                method: 'POST',\n                url: host + '/api/group/create',\n                headers: {  'Accept': 'application/json', 'Content-Type': 'application/json' },\n                data: payload\n            }\n            axios(options)\n                .then(res => {\n                    console.log(\"In Success\");\n                    resolve(res)\n                })\n                .catch(err => {\n                    console.log(\"In Error\");\n                    reject(err)\n                })\n        })\n    },\n    getGroup: function (payload) {\n        return new Promise((resolve, reject) => {\n            let options = {\n                method: 'POST',\n                url: host + '/api/group/list',\n                headers: {  'Accept': 'application/json', 'Content-Type': 'application/json' },\n                data: payload\n            }\n            axios(options)\n                .then(res => {\n                    console.log(\"In Success\");\n                    resolve(res)\n                })\n                .catch(err => {\n                    console.log(\"In Error\");\n                    reject(err)\n                })\n        })\n    },\n    editGroup: function (payload) {\n        return new Promise((resolve, reject) => {\n            let options = {\n                method: 'POST',\n                url: host + '/api/group/edit',\n                headers: {  'Accept': 'application/json', 'Content-Type': 'application/json' },\n                data: payload\n            }\n            axios(options)\n                .then(res => {\n                    console.log(\"In Success\");\n                    resolve(res)\n                })\n                .catch(err => {\n                    console.log(\"In Error\");\n                    reject(err)\n                })\n        })\n    },\n    UpdateGroup: function (payload) {\n        return new Promise((resolve, reject) => {\n            let options = {\n                method: 'POST',\n                url: host + '/api/group/update',\n                headers: {  'Accept': 'application/json', 'Content-Type': 'application/json' },\n                data: payload\n            }\n            axios(options)\n                .then(res => {\n                    console.log(\"In Success\");\n                    resolve(res)\n                })\n                .catch(err => {\n                    console.log(\"In Error\");\n                    reject(err)\n                })\n        })\n    },\n}\nexport default groupServices;",{"ruleId":"393","severity":1,"message":"394","line":11,"column":7,"nodeType":"395","messageId":"396","endLine":11,"endColumn":15},{"ruleId":"393","severity":1,"message":"397","line":2,"column":10,"nodeType":"395","messageId":"396","endLine":2,"endColumn":18},{"ruleId":"393","severity":1,"message":"398","line":2,"column":20,"nodeType":"395","messageId":"396","endLine":2,"endColumn":30},{"ruleId":"393","severity":1,"message":"399","line":7,"column":8,"nodeType":"395","messageId":"396","endLine":7,"endColumn":19},{"ruleId":"400","severity":1,"message":"401","line":60,"column":36,"nodeType":"402","messageId":"403","endLine":60,"endColumn":37,"suggestions":"404"},{"ruleId":"400","severity":1,"message":"401","line":60,"column":61,"nodeType":"402","messageId":"403","endLine":60,"endColumn":62,"suggestions":"405"},{"ruleId":"406","severity":1,"message":"407","line":76,"column":9,"nodeType":"408","messageId":"409","endLine":76,"endColumn":28},{"ruleId":"393","severity":1,"message":"410","line":87,"column":13,"nodeType":"395","messageId":"396","endLine":87,"endColumn":20},{"ruleId":"411","severity":1,"message":"412","line":161,"column":35,"nodeType":"413","endLine":161,"endColumn":53},{"ruleId":"411","severity":1,"message":"412","line":170,"column":39,"nodeType":"413","endLine":170,"endColumn":56},{"ruleId":"414","severity":1,"message":"415","line":187,"column":56,"nodeType":"413","endLine":187,"endColumn":68},{"ruleId":"414","severity":1,"message":"415","line":198,"column":35,"nodeType":"413","endLine":198,"endColumn":47},{"ruleId":"414","severity":1,"message":"415","line":198,"column":65,"nodeType":"413","endLine":198,"endColumn":77},{"ruleId":"414","severity":1,"message":"415","line":199,"column":21,"nodeType":"413","endLine":199,"endColumn":33},{"ruleId":"411","severity":1,"message":"412","line":199,"column":33,"nodeType":"413","endLine":199,"endColumn":50},{"ruleId":"414","severity":1,"message":"415","line":199,"column":55,"nodeType":"413","endLine":199,"endColumn":67},{"ruleId":"411","severity":1,"message":"412","line":199,"column":67,"nodeType":"413","endLine":199,"endColumn":89},{"ruleId":"393","severity":1,"message":"397","line":2,"column":10,"nodeType":"395","messageId":"396","endLine":2,"endColumn":18},{"ruleId":"393","severity":1,"message":"398","line":2,"column":20,"nodeType":"395","messageId":"396","endLine":2,"endColumn":30},{"ruleId":"393","severity":1,"message":"397","line":2,"column":10,"nodeType":"395","messageId":"396","endLine":2,"endColumn":18},{"ruleId":"393","severity":1,"message":"398","line":2,"column":20,"nodeType":"395","messageId":"396","endLine":2,"endColumn":30},{"ruleId":"393","severity":1,"message":"416","line":3,"column":28,"nodeType":"395","messageId":"396","endLine":3,"endColumn":54},{"ruleId":"393","severity":1,"message":"417","line":6,"column":8,"nodeType":"395","messageId":"396","endLine":6,"endColumn":22},{"ruleId":"393","severity":1,"message":"418","line":8,"column":8,"nodeType":"395","messageId":"396","endLine":8,"endColumn":15},{"ruleId":"419","severity":1,"message":"420","line":72,"column":28,"nodeType":"421","messageId":"422","endLine":72,"endColumn":30},{"ruleId":"419","severity":1,"message":"423","line":133,"column":47,"nodeType":"421","messageId":"422","endLine":133,"endColumn":49},{"ruleId":"419","severity":1,"message":"420","line":138,"column":56,"nodeType":"421","messageId":"422","endLine":138,"endColumn":58},{"ruleId":"414","severity":1,"message":"415","line":147,"column":17,"nodeType":"413","endLine":147,"endColumn":80},{"ruleId":"414","severity":1,"message":"415","line":148,"column":17,"nodeType":"413","endLine":148,"endColumn":76},{"ruleId":"393","severity":1,"message":"424","line":2,"column":10,"nodeType":"395","messageId":"396","endLine":2,"endColumn":17},{"ruleId":"414","severity":1,"message":"415","line":42,"column":25,"nodeType":"413","endLine":42,"endColumn":141},{"ruleId":"414","severity":1,"message":"415","line":43,"column":25,"nodeType":"413","endLine":43,"endColumn":138},{"ruleId":"419","severity":1,"message":"423","line":22,"column":36,"nodeType":"421","messageId":"422","endLine":22,"endColumn":38},{"ruleId":"393","severity":1,"message":"397","line":2,"column":10,"nodeType":"395","messageId":"396","endLine":2,"endColumn":18},{"ruleId":"393","severity":1,"message":"398","line":2,"column":20,"nodeType":"395","messageId":"396","endLine":2,"endColumn":30},{"ruleId":"393","severity":1,"message":"425","line":4,"column":9,"nodeType":"395","messageId":"396","endLine":4,"endColumn":25},{"ruleId":"393","severity":1,"message":"426","line":17,"column":13,"nodeType":"395","messageId":"396","endLine":17,"endColumn":15},{"ruleId":"393","severity":1,"message":"424","line":2,"column":10,"nodeType":"395","messageId":"396","endLine":2,"endColumn":17},{"ruleId":"393","severity":1,"message":"427","line":5,"column":8,"nodeType":"395","messageId":"396","endLine":5,"endColumn":16},{"ruleId":"428","severity":1,"message":"429","line":139,"column":41,"nodeType":"430","messageId":"431","endLine":139,"endColumn":82},{"ruleId":"393","severity":1,"message":"424","line":2,"column":10,"nodeType":"395","messageId":"396","endLine":2,"endColumn":17},{"ruleId":"393","severity":1,"message":"427","line":5,"column":8,"nodeType":"395","messageId":"396","endLine":5,"endColumn":16},{"ruleId":"428","severity":1,"message":"429","line":164,"column":41,"nodeType":"430","messageId":"431","endLine":164,"endColumn":82},{"ruleId":"393","severity":1,"message":"397","line":2,"column":10,"nodeType":"395","messageId":"396","endLine":2,"endColumn":18},{"ruleId":"393","severity":1,"message":"398","line":2,"column":20,"nodeType":"395","messageId":"396","endLine":2,"endColumn":30},{"ruleId":"393","severity":1,"message":"418","line":10,"column":8,"nodeType":"395","messageId":"396","endLine":10,"endColumn":15},{"ruleId":"393","severity":1,"message":"432","line":14,"column":8,"nodeType":"395","messageId":"396","endLine":14,"endColumn":17},{"ruleId":"400","severity":1,"message":"401","line":64,"column":36,"nodeType":"402","messageId":"403","endLine":64,"endColumn":37,"suggestions":"433"},{"ruleId":"400","severity":1,"message":"401","line":64,"column":61,"nodeType":"402","messageId":"403","endLine":64,"endColumn":62,"suggestions":"434"},{"ruleId":"406","severity":1,"message":"407","line":84,"column":9,"nodeType":"408","messageId":"409","endLine":84,"endColumn":28},{"ruleId":"393","severity":1,"message":"410","line":95,"column":13,"nodeType":"395","messageId":"396","endLine":95,"endColumn":20},{"ruleId":"393","severity":1,"message":"435","line":116,"column":25,"nodeType":"395","messageId":"396","endLine":116,"endColumn":27},{"ruleId":"393","severity":1,"message":"436","line":151,"column":13,"nodeType":"395","messageId":"396","endLine":151,"endColumn":33},{"ruleId":"411","severity":1,"message":"412","line":182,"column":39,"nodeType":"413","endLine":182,"endColumn":57},{"ruleId":"411","severity":1,"message":"412","line":191,"column":43,"nodeType":"413","endLine":191,"endColumn":60},{"ruleId":"411","severity":1,"message":"412","line":201,"column":43,"nodeType":"413","endLine":201,"endColumn":61},{"ruleId":"414","severity":1,"message":"415","line":217,"column":60,"nodeType":"413","endLine":217,"endColumn":72},{"ruleId":"414","severity":1,"message":"415","line":225,"column":39,"nodeType":"413","endLine":225,"endColumn":51},{"ruleId":"414","severity":1,"message":"415","line":225,"column":69,"nodeType":"413","endLine":225,"endColumn":81},{"ruleId":"414","severity":1,"message":"415","line":226,"column":25,"nodeType":"413","endLine":226,"endColumn":37},{"ruleId":"411","severity":1,"message":"412","line":226,"column":37,"nodeType":"413","endLine":226,"endColumn":54},{"ruleId":"414","severity":1,"message":"415","line":226,"column":59,"nodeType":"413","endLine":226,"endColumn":71},{"ruleId":"411","severity":1,"message":"412","line":226,"column":71,"nodeType":"413","endLine":226,"endColumn":93},{"ruleId":"437","severity":1,"message":"438","line":62,"column":34,"nodeType":"395","messageId":"439","endLine":62,"endColumn":42},{"ruleId":"393","severity":1,"message":"440","line":2,"column":15,"nodeType":"395","messageId":"396","endLine":2,"endColumn":20},{"ruleId":"393","severity":1,"message":"440","line":2,"column":15,"nodeType":"395","messageId":"396","endLine":2,"endColumn":20},{"ruleId":"393","severity":1,"message":"441","line":8,"column":10,"nodeType":"395","messageId":"396","endLine":8,"endColumn":27},{"ruleId":"393","severity":1,"message":"416","line":8,"column":28,"nodeType":"395","messageId":"396","endLine":8,"endColumn":54},{"ruleId":"393","severity":1,"message":"442","line":8,"column":55,"nodeType":"395","messageId":"396","endLine":8,"endColumn":79},{"ruleId":"393","severity":1,"message":"399","line":10,"column":8,"nodeType":"395","messageId":"396","endLine":10,"endColumn":19},{"ruleId":"419","severity":1,"message":"420","line":56,"column":30,"nodeType":"421","messageId":"422","endLine":56,"endColumn":32},{"ruleId":"419","severity":1,"message":"420","line":91,"column":60,"nodeType":"421","messageId":"422","endLine":91,"endColumn":62},{"ruleId":"419","severity":1,"message":"420","line":91,"column":106,"nodeType":"421","messageId":"422","endLine":91,"endColumn":108},{"ruleId":"419","severity":1,"message":"420","line":109,"column":60,"nodeType":"421","messageId":"422","endLine":109,"endColumn":62},{"ruleId":"419","severity":1,"message":"420","line":109,"column":106,"nodeType":"421","messageId":"422","endLine":109,"endColumn":108},{"ruleId":"419","severity":1,"message":"420","line":109,"column":158,"nodeType":"421","messageId":"422","endLine":109,"endColumn":160},{"ruleId":"419","severity":1,"message":"420","line":109,"column":210,"nodeType":"421","messageId":"422","endLine":109,"endColumn":212},{"ruleId":"393","severity":1,"message":"443","line":117,"column":31,"nodeType":"395","messageId":"396","endLine":117,"endColumn":40},{"ruleId":"393","severity":1,"message":"443","line":130,"column":29,"nodeType":"395","messageId":"396","endLine":130,"endColumn":38},{"ruleId":"419","severity":1,"message":"420","line":173,"column":27,"nodeType":"421","messageId":"422","endLine":173,"endColumn":29},{"ruleId":"419","severity":1,"message":"420","line":183,"column":29,"nodeType":"421","messageId":"422","endLine":183,"endColumn":31},{"ruleId":"419","severity":1,"message":"420","line":214,"column":27,"nodeType":"421","messageId":"422","endLine":214,"endColumn":29},{"ruleId":"419","severity":1,"message":"420","line":224,"column":29,"nodeType":"421","messageId":"422","endLine":224,"endColumn":31},{"ruleId":"419","severity":1,"message":"420","line":245,"column":54,"nodeType":"421","messageId":"422","endLine":245,"endColumn":56},{"ruleId":"419","severity":1,"message":"420","line":245,"column":91,"nodeType":"421","messageId":"422","endLine":245,"endColumn":93},{"ruleId":"428","severity":1,"message":"429","line":247,"column":128,"nodeType":"430","messageId":"431","endLine":247,"endColumn":139},{"ruleId":"428","severity":1,"message":"429","line":253,"column":128,"nodeType":"430","messageId":"431","endLine":253,"endColumn":139},{"ruleId":"414","severity":1,"message":"415","line":261,"column":19,"nodeType":"413","endLine":261,"endColumn":79},{"ruleId":"411","severity":1,"message":"412","line":261,"column":79,"nodeType":"413","endLine":261,"endColumn":104},{"ruleId":"414","severity":1,"message":"415","line":263,"column":23,"nodeType":"413","endLine":263,"endColumn":77},{"ruleId":"411","severity":1,"message":"412","line":270,"column":55,"nodeType":"413","endLine":270,"endColumn":89},{"ruleId":"411","severity":1,"message":"412","line":271,"column":53,"nodeType":"413","endLine":271,"endColumn":86},{"ruleId":"411","severity":1,"message":"412","line":273,"column":52,"nodeType":"413","endLine":273,"endColumn":85},{"ruleId":"393","severity":1,"message":"444","line":2,"column":8,"nodeType":"395","messageId":"396","endLine":2,"endColumn":12},{"ruleId":"393","severity":1,"message":"424","line":3,"column":10,"nodeType":"395","messageId":"396","endLine":3,"endColumn":17},{"ruleId":"414","severity":1,"message":"415","line":20,"column":27,"nodeType":"413","endLine":20,"endColumn":39},{"ruleId":"414","severity":1,"message":"415","line":20,"column":57,"nodeType":"413","endLine":20,"endColumn":69},{"ruleId":"414","severity":1,"message":"415","line":21,"column":13,"nodeType":"413","endLine":21,"endColumn":25},{"ruleId":"411","severity":1,"message":"412","line":21,"column":25,"nodeType":"413","endLine":21,"endColumn":51},{"ruleId":"414","severity":1,"message":"415","line":21,"column":56,"nodeType":"413","endLine":21,"endColumn":68},{"ruleId":"411","severity":1,"message":"412","line":21,"column":68,"nodeType":"413","endLine":21,"endColumn":95},{"ruleId":"414","severity":1,"message":"415","line":39,"column":21,"nodeType":"413","endLine":39,"endColumn":108},{"ruleId":"411","severity":1,"message":"412","line":41,"column":21,"nodeType":"413","endLine":41,"endColumn":70},{"ruleId":"411","severity":1,"message":"412","line":43,"column":21,"nodeType":"413","endLine":43,"endColumn":74},{"ruleId":"414","severity":1,"message":"415","line":48,"column":21,"nodeType":"413","endLine":48,"endColumn":124},{"ruleId":"411","severity":1,"message":"412","line":50,"column":21,"nodeType":"413","endLine":50,"endColumn":68},{"ruleId":"411","severity":1,"message":"412","line":52,"column":21,"nodeType":"413","endLine":52,"endColumn":72},{"ruleId":"414","severity":1,"message":"415","line":36,"column":21,"nodeType":"413","endLine":36,"endColumn":148},{"ruleId":"411","severity":1,"message":"412","line":37,"column":57,"nodeType":"413","endLine":37,"endColumn":106},{"ruleId":"411","severity":1,"message":"412","line":37,"column":107,"nodeType":"413","endLine":37,"endColumn":158},{"ruleId":"414","severity":1,"message":"415","line":41,"column":21,"nodeType":"413","endLine":41,"endColumn":149},{"ruleId":"411","severity":1,"message":"412","line":42,"column":56,"nodeType":"413","endLine":42,"endColumn":105},{"ruleId":"411","severity":1,"message":"412","line":42,"column":106,"nodeType":"413","endLine":42,"endColumn":157},{"ruleId":"393","severity":1,"message":"445","line":4,"column":9,"nodeType":"395","messageId":"396","endLine":4,"endColumn":17},{"ruleId":"414","severity":1,"message":"415","line":37,"column":19,"nodeType":"413","endLine":37,"endColumn":113},{"ruleId":"414","severity":1,"message":"415","line":47,"column":23,"nodeType":"413","endLine":47,"endColumn":59},{"ruleId":"411","severity":1,"message":"412","line":51,"column":27,"nodeType":"413","endLine":51,"endColumn":66},{"ruleId":"419","severity":1,"message":"420","line":56,"column":69,"nodeType":"421","messageId":"422","endLine":56,"endColumn":71},{"ruleId":"419","severity":1,"message":"420","line":58,"column":16,"nodeType":"421","messageId":"422","endLine":58,"endColumn":18},{"ruleId":"419","severity":1,"message":"420","line":63,"column":23,"nodeType":"421","messageId":"422","endLine":63,"endColumn":25},{"ruleId":"393","severity":1,"message":"446","line":74,"column":9,"nodeType":"395","messageId":"396","endLine":74,"endColumn":23},{"ruleId":"419","severity":1,"message":"420","line":78,"column":16,"nodeType":"421","messageId":"422","endLine":78,"endColumn":18},{"ruleId":"419","severity":1,"message":"420","line":85,"column":23,"nodeType":"421","messageId":"422","endLine":85,"endColumn":25},{"ruleId":"419","severity":1,"message":"420","line":105,"column":30,"nodeType":"421","messageId":"422","endLine":105,"endColumn":32},{"ruleId":"419","severity":1,"message":"420","line":172,"column":33,"nodeType":"421","messageId":"422","endLine":172,"endColumn":35},{"ruleId":"447","severity":1,"message":"448","line":175,"column":45,"nodeType":"449","messageId":"450","endLine":175,"endColumn":47},{"ruleId":"419","severity":1,"message":"423","line":181,"column":28,"nodeType":"421","messageId":"422","endLine":181,"endColumn":30},{"ruleId":"419","severity":1,"message":"420","line":181,"column":42,"nodeType":"421","messageId":"422","endLine":181,"endColumn":44},{"ruleId":"419","severity":1,"message":"420","line":108,"column":69,"nodeType":"421","messageId":"422","endLine":108,"endColumn":71},{"ruleId":"419","severity":1,"message":"420","line":110,"column":16,"nodeType":"421","messageId":"422","endLine":110,"endColumn":18},{"ruleId":"419","severity":1,"message":"420","line":115,"column":23,"nodeType":"421","messageId":"422","endLine":115,"endColumn":25},{"ruleId":"393","severity":1,"message":"446","line":126,"column":9,"nodeType":"395","messageId":"396","endLine":126,"endColumn":23},{"ruleId":"419","severity":1,"message":"420","line":128,"column":19,"nodeType":"421","messageId":"422","endLine":128,"endColumn":21},{"ruleId":"419","severity":1,"message":"420","line":135,"column":16,"nodeType":"421","messageId":"422","endLine":135,"endColumn":18},{"ruleId":"419","severity":1,"message":"420","line":142,"column":23,"nodeType":"421","messageId":"422","endLine":142,"endColumn":25},{"ruleId":"419","severity":1,"message":"420","line":170,"column":33,"nodeType":"421","messageId":"422","endLine":170,"endColumn":35},{"ruleId":"419","severity":1,"message":"423","line":176,"column":43,"nodeType":"421","messageId":"422","endLine":176,"endColumn":45},{"ruleId":"419","severity":1,"message":"420","line":213,"column":33,"nodeType":"421","messageId":"422","endLine":213,"endColumn":35},{"ruleId":"419","severity":1,"message":"423","line":219,"column":43,"nodeType":"421","messageId":"422","endLine":219,"endColumn":45},{"ruleId":"419","severity":1,"message":"420","line":275,"column":22,"nodeType":"421","messageId":"422","endLine":275,"endColumn":24},{"ruleId":"419","severity":1,"message":"420","line":287,"column":33,"nodeType":"421","messageId":"422","endLine":287,"endColumn":35},{"ruleId":"419","severity":1,"message":"423","line":293,"column":43,"nodeType":"421","messageId":"422","endLine":293,"endColumn":45},{"ruleId":"419","severity":1,"message":"420","line":323,"column":33,"nodeType":"421","messageId":"422","endLine":323,"endColumn":35},{"ruleId":"419","severity":1,"message":"423","line":329,"column":43,"nodeType":"421","messageId":"422","endLine":329,"endColumn":45},{"ruleId":"419","severity":1,"message":"423","line":354,"column":36,"nodeType":"421","messageId":"422","endLine":354,"endColumn":38},{"ruleId":"419","severity":1,"message":"423","line":378,"column":64,"nodeType":"421","messageId":"422","endLine":378,"endColumn":66},{"ruleId":"414","severity":1,"message":"415","line":382,"column":67,"nodeType":"413","endLine":382,"endColumn":139},{"ruleId":"414","severity":1,"message":"415","line":397,"column":49,"nodeType":"413","endLine":397,"endColumn":122},{"ruleId":"414","severity":1,"message":"415","line":398,"column":49,"nodeType":"413","endLine":398,"endColumn":125},{"ruleId":"414","severity":1,"message":"415","line":427,"column":25,"nodeType":"413","endLine":427,"endColumn":97},{"ruleId":"414","severity":1,"message":"415","line":441,"column":29,"nodeType":"413","endLine":441,"endColumn":105},{"ruleId":"411","severity":1,"message":"412","line":441,"column":105,"nodeType":"413","endLine":441,"endColumn":131},{"ruleId":"414","severity":1,"message":"415","line":502,"column":29,"nodeType":"413","endLine":502,"endColumn":105},{"ruleId":"411","severity":1,"message":"412","line":502,"column":105,"nodeType":"413","endLine":502,"endColumn":131},{"ruleId":"393","severity":1,"message":"451","line":4,"column":8,"nodeType":"395","messageId":"396","endLine":4,"endColumn":18},{"ruleId":"393","severity":1,"message":"452","line":5,"column":8,"nodeType":"395","messageId":"396","endLine":5,"endColumn":16},{"ruleId":"419","severity":1,"message":"420","line":94,"column":40,"nodeType":"421","messageId":"422","endLine":94,"endColumn":42},{"ruleId":"419","severity":1,"message":"423","line":100,"column":40,"nodeType":"421","messageId":"422","endLine":100,"endColumn":42},{"ruleId":"419","severity":1,"message":"420","line":113,"column":45,"nodeType":"421","messageId":"422","endLine":113,"endColumn":47},{"ruleId":"419","severity":1,"message":"420","line":143,"column":45,"nodeType":"421","messageId":"422","endLine":143,"endColumn":47},{"ruleId":"419","severity":1,"message":"420","line":164,"column":45,"nodeType":"421","messageId":"422","endLine":164,"endColumn":47},{"ruleId":"419","severity":1,"message":"423","line":169,"column":45,"nodeType":"421","messageId":"422","endLine":169,"endColumn":47},{"ruleId":"419","severity":1,"message":"420","line":179,"column":37,"nodeType":"421","messageId":"422","endLine":179,"endColumn":39},{"ruleId":"419","severity":1,"message":"420","line":218,"column":77,"nodeType":"421","messageId":"422","endLine":218,"endColumn":79},{"ruleId":"419","severity":1,"message":"420","line":220,"column":24,"nodeType":"421","messageId":"422","endLine":220,"endColumn":26},{"ruleId":"419","severity":1,"message":"420","line":225,"column":31,"nodeType":"421","messageId":"422","endLine":225,"endColumn":33},{"ruleId":"393","severity":1,"message":"446","line":236,"column":17,"nodeType":"395","messageId":"396","endLine":236,"endColumn":31},{"ruleId":"419","severity":1,"message":"420","line":240,"column":24,"nodeType":"421","messageId":"422","endLine":240,"endColumn":26},{"ruleId":"419","severity":1,"message":"420","line":247,"column":31,"nodeType":"421","messageId":"422","endLine":247,"endColumn":33},{"ruleId":"419","severity":1,"message":"420","line":263,"column":73,"nodeType":"421","messageId":"422","endLine":263,"endColumn":75},{"ruleId":"419","severity":1,"message":"420","line":265,"column":20,"nodeType":"421","messageId":"422","endLine":265,"endColumn":22},{"ruleId":"419","severity":1,"message":"420","line":270,"column":27,"nodeType":"421","messageId":"422","endLine":270,"endColumn":29},{"ruleId":"393","severity":1,"message":"446","line":281,"column":13,"nodeType":"395","messageId":"396","endLine":281,"endColumn":27},{"ruleId":"419","severity":1,"message":"420","line":285,"column":20,"nodeType":"421","messageId":"422","endLine":285,"endColumn":22},{"ruleId":"419","severity":1,"message":"420","line":292,"column":27,"nodeType":"421","messageId":"422","endLine":292,"endColumn":29},{"ruleId":"419","severity":1,"message":"420","line":306,"column":37,"nodeType":"421","messageId":"422","endLine":306,"endColumn":39},{"ruleId":"419","severity":1,"message":"420","line":333,"column":37,"nodeType":"421","messageId":"422","endLine":333,"endColumn":39},{"ruleId":"419","severity":1,"message":"423","line":359,"column":64,"nodeType":"421","messageId":"422","endLine":359,"endColumn":66},{"ruleId":"414","severity":1,"message":"453","line":362,"column":67,"nodeType":"413","endLine":362,"endColumn":125},{"ruleId":"411","severity":1,"message":"412","line":362,"column":125,"nodeType":"413","endLine":362,"endColumn":146},{"ruleId":"414","severity":1,"message":"415","line":371,"column":45,"nodeType":"413","endLine":371,"endColumn":120},{"ruleId":"414","severity":1,"message":"453","line":382,"column":33,"nodeType":"413","endLine":382,"endColumn":91},{"ruleId":"414","severity":1,"message":"415","line":397,"column":29,"nodeType":"413","endLine":397,"endColumn":99},{"ruleId":"411","severity":1,"message":"412","line":397,"column":99,"nodeType":"413","endLine":397,"endColumn":125},{"ruleId":"414","severity":1,"message":"415","line":410,"column":75,"nodeType":"413","endLine":410,"endColumn":105},{"ruleId":"414","severity":1,"message":"415","line":415,"column":53,"nodeType":"413","endLine":415,"endColumn":121},{"ruleId":"419","severity":1,"message":"420","line":423,"column":65,"nodeType":"421","messageId":"422","endLine":423,"endColumn":67},{"ruleId":"414","severity":1,"message":"415","line":427,"column":33,"nodeType":"413","endLine":427,"endColumn":96},{"ruleId":"414","severity":1,"message":"415","line":449,"column":29,"nodeType":"413","endLine":449,"endColumn":99},{"ruleId":"411","severity":1,"message":"412","line":449,"column":99,"nodeType":"413","endLine":449,"endColumn":125},{"ruleId":"414","severity":1,"message":"415","line":462,"column":75,"nodeType":"413","endLine":462,"endColumn":176},{"ruleId":"414","severity":1,"message":"415","line":467,"column":53,"nodeType":"413","endLine":467,"endColumn":125},{"ruleId":"419","severity":1,"message":"420","line":474,"column":70,"nodeType":"421","messageId":"422","endLine":474,"endColumn":72},{"ruleId":"414","severity":1,"message":"415","line":478,"column":33,"nodeType":"413","endLine":478,"endColumn":100},{"ruleId":"393","severity":1,"message":"451","line":4,"column":8,"nodeType":"395","messageId":"396","endLine":4,"endColumn":18},{"ruleId":"393","severity":1,"message":"452","line":5,"column":8,"nodeType":"395","messageId":"396","endLine":5,"endColumn":16},{"ruleId":"419","severity":1,"message":"420","line":150,"column":18,"nodeType":"421","messageId":"422","endLine":150,"endColumn":20},{"ruleId":"419","severity":1,"message":"420","line":166,"column":24,"nodeType":"421","messageId":"422","endLine":166,"endColumn":26},{"ruleId":"419","severity":1,"message":"420","line":209,"column":18,"nodeType":"421","messageId":"422","endLine":209,"endColumn":20},{"ruleId":"419","severity":1,"message":"420","line":225,"column":24,"nodeType":"421","messageId":"422","endLine":225,"endColumn":26},{"ruleId":"419","severity":1,"message":"420","line":333,"column":33,"nodeType":"421","messageId":"422","endLine":333,"endColumn":35},{"ruleId":"419","severity":1,"message":"420","line":363,"column":33,"nodeType":"421","messageId":"422","endLine":363,"endColumn":35},{"ruleId":"419","severity":1,"message":"420","line":401,"column":33,"nodeType":"421","messageId":"422","endLine":401,"endColumn":35},{"ruleId":"419","severity":1,"message":"420","line":420,"column":33,"nodeType":"421","messageId":"422","endLine":420,"endColumn":35},{"ruleId":"419","severity":1,"message":"420","line":429,"column":33,"nodeType":"421","messageId":"422","endLine":429,"endColumn":35},{"ruleId":"419","severity":1,"message":"423","line":453,"column":56,"nodeType":"421","messageId":"422","endLine":453,"endColumn":58},{"ruleId":"414","severity":1,"message":"415","line":457,"column":52,"nodeType":"413","endLine":457,"endColumn":116},{"ruleId":"411","severity":1,"message":"412","line":457,"column":116,"nodeType":"413","endLine":457,"endColumn":137},{"ruleId":"414","severity":1,"message":"415","line":464,"column":29,"nodeType":"413","endLine":464,"endColumn":101},{"ruleId":"414","severity":1,"message":"453","line":474,"column":21,"nodeType":"413","endLine":474,"endColumn":77},{"ruleId":"414","severity":1,"message":"415","line":488,"column":21,"nodeType":"413","endLine":488,"endColumn":89},{"ruleId":"411","severity":1,"message":"412","line":488,"column":89,"nodeType":"413","endLine":488,"endColumn":115},{"ruleId":"414","severity":1,"message":"415","line":497,"column":39,"nodeType":"413","endLine":497,"endColumn":138},{"ruleId":"414","severity":1,"message":"415","line":502,"column":65,"nodeType":"413","endLine":502,"endColumn":141},{"ruleId":"411","severity":1,"message":"412","line":502,"column":141,"nodeType":"413","endLine":502,"endColumn":170},{"ruleId":"414","severity":1,"message":"415","line":507,"column":29,"nodeType":"413","endLine":507,"endColumn":71},{"ruleId":"411","severity":1,"message":"412","line":507,"column":78,"nodeType":"413","endLine":507,"endColumn":104},{"ruleId":"414","severity":1,"message":"415","line":511,"column":45,"nodeType":"413","endLine":511,"endColumn":94},{"ruleId":"414","severity":1,"message":"415","line":516,"column":61,"nodeType":"413","endLine":516,"endColumn":154},{"ruleId":"414","severity":1,"message":"415","line":524,"column":45,"nodeType":"413","endLine":524,"endColumn":91},{"ruleId":"414","severity":1,"message":"415","line":535,"column":45,"nodeType":"413","endLine":535,"endColumn":94},{"ruleId":"414","severity":1,"message":"415","line":539,"column":57,"nodeType":"413","endLine":539,"endColumn":146},{"ruleId":"414","severity":1,"message":"415","line":540,"column":57,"nodeType":"413","endLine":540,"endColumn":141},{"ruleId":"414","severity":1,"message":"415","line":555,"column":33,"nodeType":"413","endLine":555,"endColumn":96},{"ruleId":"414","severity":1,"message":"415","line":573,"column":25,"nodeType":"413","endLine":573,"endColumn":93},{"ruleId":"411","severity":1,"message":"412","line":573,"column":93,"nodeType":"413","endLine":573,"endColumn":119},{"ruleId":"414","severity":1,"message":"415","line":582,"column":39,"nodeType":"413","endLine":582,"endColumn":139},{"ruleId":"414","severity":1,"message":"415","line":587,"column":69,"nodeType":"413","endLine":587,"endColumn":146},{"ruleId":"411","severity":1,"message":"412","line":587,"column":146,"nodeType":"413","endLine":587,"endColumn":175},{"ruleId":"414","severity":1,"message":"415","line":591,"column":33,"nodeType":"413","endLine":591,"endColumn":76},{"ruleId":"411","severity":1,"message":"412","line":591,"column":83,"nodeType":"413","endLine":591,"endColumn":109},{"ruleId":"414","severity":1,"message":"415","line":596,"column":45,"nodeType":"413","endLine":596,"endColumn":95},{"ruleId":"414","severity":1,"message":"415","line":601,"column":61,"nodeType":"413","endLine":601,"endColumn":158},{"ruleId":"414","severity":1,"message":"415","line":609,"column":45,"nodeType":"413","endLine":609,"endColumn":92},{"ruleId":"414","severity":1,"message":"415","line":620,"column":45,"nodeType":"413","endLine":620,"endColumn":95},{"ruleId":"414","severity":1,"message":"415","line":624,"column":57,"nodeType":"413","endLine":624,"endColumn":150},{"ruleId":"414","severity":1,"message":"415","line":625,"column":57,"nodeType":"413","endLine":625,"endColumn":145},{"ruleId":"414","severity":1,"message":"415","line":640,"column":33,"nodeType":"413","endLine":640,"endColumn":100},{"ruleId":"393","severity":1,"message":"440","line":2,"column":15,"nodeType":"395","messageId":"396","endLine":2,"endColumn":20},{"ruleId":"393","severity":1,"message":"440","line":2,"column":15,"nodeType":"395","messageId":"396","endLine":2,"endColumn":20},"no-unused-vars","'NotFound' is assigned a value but never used.","Identifier","unusedVar","'Redirect' is defined but never used.","'withRouter' is defined but never used.","'loginHelper' is defined but never used.","no-useless-escape","Unnecessary escape character: \\[.","Literal","unnecessaryEscape",["454","455"],["456","457"],"no-unreachable","Unreachable code.","ReturnStatement","unreachableCode","'payload' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","'CheckUserInfoFromFaccebook' is defined but never used.","'settingService' is defined but never used.","'biglogo' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.","'NavLink' is defined but never used.","'kyubiExtensionId' is defined but never used.","'LO' is assigned a value but never used.","'ReactDOM' is defined but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","noDuplicateProps","'instagram' is defined but never used.",["458","459"],["460","461"],"'LC' is assigned a value but never used.","'inBackgroundFetching' is assigned a value but never used.","no-use-before-define","'myNewUrl' was used before it was defined.","usedBeforeDefined","'kyubi' is defined but never used.","'OpenFacebookInTab' is defined but never used.","'OpenFacebookProfileInTab' is defined but never used.","'CreateTab' is assigned a value but never used.","'logo' is defined but never used.","'Animated' is defined but never used.","'WelcomeMessage' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'deleteLogo' is defined but never used.","'viewLogo' is defined but never used.","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md",{"messageId":"462","fix":"463","desc":"464"},{"messageId":"465","fix":"466","desc":"467"},{"messageId":"462","fix":"468","desc":"464"},{"messageId":"465","fix":"469","desc":"467"},{"messageId":"462","fix":"470","desc":"464"},{"messageId":"465","fix":"471","desc":"467"},{"messageId":"462","fix":"472","desc":"464"},{"messageId":"465","fix":"473","desc":"467"},"removeEscape",{"range":"474","text":"475"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"476","text":"477"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"478","text":"475"},{"range":"479","text":"477"},{"range":"480","text":"475"},{"range":"481","text":"477"},{"range":"482","text":"475"},{"range":"483","text":"477"},[1972,1973],"",[1972,1972],"\\",[1997,1998],[1997,1997],[2159,2160],[2159,2159],[2184,2185],[2184,2184]]