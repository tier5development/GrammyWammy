[{"C:\\GrammyWammy\\front-end\\src\\index.js":"1","C:\\GrammyWammy\\front-end\\src\\reportWebVitals.js":"2","C:\\GrammyWammy\\front-end\\src\\App.js":"3","C:\\GrammyWammy\\front-end\\src\\components\\common\\logger.js":"4","C:\\GrammyWammy\\front-end\\src\\components\\layouts\\AppLayout.js":"5","C:\\GrammyWammy\\front-end\\src\\routes\\AppRoute.js":"6","C:\\GrammyWammy\\front-end\\src\\components\\modules\\Auth\\Login.js":"7","C:\\GrammyWammy\\front-end\\src\\components\\modules\\Auth\\NotFound.js":"8","C:\\GrammyWammy\\front-end\\src\\components\\modules\\Auth\\ForgotPassword.js":"9","C:\\GrammyWammy\\front-end\\src\\components\\modules\\Auth\\logout.js":"10","C:\\GrammyWammy\\front-end\\src\\components\\modules\\MessageGroup\\messageGroupCreate.js":"11","C:\\GrammyWammy\\front-end\\src\\components\\modules\\MessageGroup\\messageGroup.js":"12","C:\\GrammyWammy\\front-end\\src\\components\\modules\\Main\\Dashboard.js":"13","C:\\GrammyWammy\\front-end\\src\\components\\modules\\Setting\\setting.js":"14","C:\\GrammyWammy\\front-end\\src\\components\\modules\\MessageGroup\\messageGroupEdit.js":"15","C:\\GrammyWammy\\front-end\\src\\components\\modules\\AutoResponder\\autoResponder.js":"16","C:\\GrammyWammy\\front-end\\src\\components\\modules\\AutoResponder\\autoResponderCreate.js":"17","C:\\GrammyWammy\\front-end\\src\\components\\modules\\AutoResponder\\autoResponderEdit.js":"18","C:\\GrammyWammy\\front-end\\src\\config.js":"19","C:\\GrammyWammy\\front-end\\src\\services\\authService.js":"20","C:\\GrammyWammy\\front-end\\src\\services\\messageGroupService.js":"21","C:\\GrammyWammy\\front-end\\src\\services\\setting.js":"22","C:\\GrammyWammy\\front-end\\src\\services\\autoResponderServices.js":"23","C:\\GrammyWammy\\front-end\\src\\helper\\loginHelper.js":"24","C:\\GrammyWammy\\front-end\\src\\helper\\helper.js":"25","C:\\GrammyWammy\\front-end\\src\\components\\modules\\Common\\sidebar.js":"26","C:\\GrammyWammy\\front-end\\src\\components\\modules\\Setting\\ResponseSetting\\responseSetting.js":"27","C:\\GrammyWammy\\front-end\\src\\components\\modules\\Setting\\DefaultMessageSettings\\defaultMessageSettings.js":"28","C:\\GrammyWammy\\front-end\\src\\components\\modules\\Setting\\ResponseSetting\\IndividualComponents\\autoResponder.js":"29","C:\\GrammyWammy\\front-end\\src\\components\\modules\\Setting\\DefaultMessageSettings\\IndividualComponents\\group.js":"30","C:\\GrammyWammy\\front-end\\src\\components\\modules\\Setting\\ResponseSetting\\IndividualComponents\\defaultMessage.js":"31","C:\\GrammyWammy\\front-end\\src\\components\\modules\\Setting\\DefaultMessageSettings\\IndividualComponents\\segment.js":"32","C:\\GrammyWammy\\front-end\\src\\services\\segmentServices.js":"33","C:\\GrammyWammy\\front-end\\src\\services\\groupServices.js":"34","C:\\GrammyWammy\\front-end\\src\\components\\modules\\Common\\footer.js":"35","C:\\GrammyWammy\\front-end\\src\\components\\modules\\Common\\header.js":"36"},{"size":556,"mtime":1614932957649,"results":"37","hashOfConfig":"38"},{"size":375,"mtime":1614616528544,"results":"39","hashOfConfig":"38"},{"size":355,"mtime":1614932957588,"results":"40","hashOfConfig":"38"},{"size":219,"mtime":1614616528499,"results":"41","hashOfConfig":"38"},{"size":330,"mtime":1615191252103,"results":"42","hashOfConfig":"38"},{"size":2576,"mtime":1615274816718,"results":"43","hashOfConfig":"38"},{"size":8199,"mtime":1615192221217,"results":"44","hashOfConfig":"38"},{"size":289,"mtime":1614616528504,"results":"45","hashOfConfig":"38"},{"size":6995,"mtime":1614616528499,"results":"46","hashOfConfig":"38"},{"size":2580,"mtime":1615302475978,"results":"47","hashOfConfig":"38"},{"size":5198,"mtime":1614616528524,"results":"48","hashOfConfig":"38"},{"size":6984,"mtime":1614616528519,"results":"49","hashOfConfig":"38"},{"size":11640,"mtime":1615302475984,"results":"50","hashOfConfig":"38"},{"size":2066,"mtime":1615302475996,"results":"51","hashOfConfig":"38"},{"size":5819,"mtime":1614616528524,"results":"52","hashOfConfig":"38"},{"size":7314,"mtime":1614616528509,"results":"53","hashOfConfig":"38"},{"size":7136,"mtime":1614616528514,"results":"54","hashOfConfig":"38"},{"size":8916,"mtime":1614616528514,"results":"55","hashOfConfig":"38"},{"size":213,"mtime":1614932957642,"results":"56","hashOfConfig":"38"},{"size":2242,"mtime":1615302476067,"results":"57","hashOfConfig":"38"},{"size":2183,"mtime":1614616528549,"results":"58","hashOfConfig":"38"},{"size":3511,"mtime":1615302476071,"results":"59","hashOfConfig":"38"},{"size":4204,"mtime":1615302476068,"results":"60","hashOfConfig":"38"},{"size":891,"mtime":1614932957646,"results":"61","hashOfConfig":"38"},{"size":1906,"mtime":1614962175433,"results":"62","hashOfConfig":"38"},{"size":4154,"mtime":1615302475982,"results":"63","hashOfConfig":"38"},{"size":2140,"mtime":1615302475995,"results":"64","hashOfConfig":"38"},{"size":2322,"mtime":1615302475987,"results":"65","hashOfConfig":"38"},{"size":24926,"mtime":1615302475992,"results":"66","hashOfConfig":"38"},{"size":21807,"mtime":1615478521681,"results":"67","hashOfConfig":"38"},{"size":11277,"mtime":1615302475994,"results":"68","hashOfConfig":"38"},{"size":20122,"mtime":1615474277429,"results":"69","hashOfConfig":"38"},{"size":2775,"mtime":1615302476070,"results":"70","hashOfConfig":"38"},{"size":2755,"mtime":1615302476069,"results":"71","hashOfConfig":"38"},{"size":790,"mtime":1615302475980,"results":"72","hashOfConfig":"38"},{"size":8417,"mtime":1615302475981,"results":"73","hashOfConfig":"38"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},"1tt6fqb",{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"76"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"76"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"76"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"76"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"76"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"76"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":24,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"76"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"76"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"76"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"76"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"76"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"76"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131","usedDeprecatedRules":"76"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134","usedDeprecatedRules":"76"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"76"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144","usedDeprecatedRules":"76"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"76"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":22,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150","usedDeprecatedRules":"76"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":43,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153","usedDeprecatedRules":"76"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"156","usedDeprecatedRules":"76"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":35,"fixableErrorCount":0,"fixableWarningCount":0,"source":"159","usedDeprecatedRules":"76"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"162","usedDeprecatedRules":"76"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"165"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"168","usedDeprecatedRules":"76"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"171","usedDeprecatedRules":"76"},"C:\\GrammyWammy\\front-end\\src\\index.js",[],["172","173"],"C:\\GrammyWammy\\front-end\\src\\reportWebVitals.js",[],"C:\\GrammyWammy\\front-end\\src\\App.js",[],"C:\\GrammyWammy\\front-end\\src\\components\\common\\logger.js",[],"C:\\GrammyWammy\\front-end\\src\\components\\layouts\\AppLayout.js",[],"C:\\GrammyWammy\\front-end\\src\\routes\\AppRoute.js",["174"],"import React, { lazy, Suspense } from \"react\";\r\nimport { Route, Switch, withRouter } from \"react-router-dom\";\r\nimport log from \"../components/common/logger\";\r\nimport { Container } from \"reactstrap\";\r\nimport classNames from \"classnames\";\r\n\r\n\r\n\r\nconst Login = lazy(() => import(\"../components/modules/Auth/Login\"));\r\nconst ForgotPassword = lazy(() => import(\"../components/modules/Auth/ForgotPassword\"));\r\nconst MessageGroup = lazy(() => import(\"../components/modules/MessageGroup/messageGroup\"));\r\nconst MessageGroupCreate = lazy(() => import(\"../components/modules/MessageGroup/messageGroupCreate\"));\r\nconst MessageGroupEdit = lazy(() =>  import(\"../components/modules/MessageGroup/messageGroupEdit\"));\r\nconst NotFound = lazy(() => import(\"../components/modules/Auth/NotFound\"));\r\nconst Dashboard = lazy(() => import(\"../components/modules/Main/Dashboard\"));\r\nconst Setting = lazy(() => import(\"../components/modules/Setting/setting\"));\r\nconst AutoResponder = lazy(() => import(\"../components/modules/AutoResponder/autoResponder\"));\r\nconst AutoResponderCreate = lazy(() =>  import(\"../components/modules/AutoResponder/autoResponderCreate\"))\r\nconst AutoResponderEdit = lazy(() =>  import(\"../components/modules/AutoResponder/autoResponderEdit\"));\r\nconst Logout  = lazy(() =>  import(\"../components/modules/Auth/logout\"));\r\nconst AppRoute = ({ sidebarIsOpen, toggleSidebar }) => {\r\n  log.info(\"**** AppRoute ****\");\r\n\r\n  return (\r\n    <Suspense fallback={<div />}>\r\n      <Container\r\n        fluid\r\n        className={classNames(\"content\", { \"is-open\": sidebarIsOpen })}\r\n      >\r\n        {/* <Topbar toggleSidebar={toggleSidebar} /> */}\r\n        <Switch>\r\n        <Route exact path=\"/\" component={Login} />\r\n        <Route exact path=\"/forgotPassword\" component={ForgotPassword} />\r\n        <Route  exact  path=\"/dashboard\" component={Dashboard} />\r\n        <Route  exact  path=\"/setting\" component={Setting} />\r\n        <Route  exact  path=\"/autoresponder\" component={AutoResponder} />\r\n        <Route  exact  path=\"/autorespondercreate\" component={AutoResponderCreate} />\r\n        <Route  exact  path=\"/autoresponderedit/:idfy\"  component={AutoResponderEdit} />\r\n        <Route  exact  path=\"/messageGroup\" component={MessageGroup} />\r\n        <Route  exact  path=\"/messagegroupcreate\" component={MessageGroupCreate} />\r\n        <Route  exact  path=\"/messagegroupedit/:idfy\"  component={MessageGroupEdit} />\r\n        <Route  exact  path=\"/logout\"  component={Logout} />\r\n        </Switch>\r\n      </Container>\r\n    </Suspense>\r\n  );\r\n};\r\nexport default withRouter(AppRoute);\r\n","C:\\GrammyWammy\\front-end\\src\\components\\modules\\Auth\\Login.js",["175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194"],"import React, { Component} from \"react\";\r\nimport { Redirect, withRouter } from 'react-router-dom';\r\nimport {kyubiExtensionId}  from \"../../../config\";\r\n//import \"./login.css\";\r\nimport AuthServices from \"../../../services/authService\";\r\nimport loginHelper from \"../../../helper/loginHelper\";\r\nimport { NavLink } from \"react-router-dom\";\r\nclass Login extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n          email:\"\",\r\n          password:\"\",\r\n          loader:false,\r\n          error:false,\r\n          errorMessage:\"\",\r\n          loadingstatus:false\r\n        }\r\n        \r\n\r\n      }\r\n    /**\r\n    * @inputChangeHandller \r\n    * getting input field values\r\n    */\r\n    inputChangeHandller = (event) => {\r\n        this.setState({ [event.target.name]: event.target.value })\r\n    }\r\n    /**\r\n    * @checkBackgroundFetching \r\n    * Check  Wether Background Fetching is  done or not\r\n    */\r\n    checkBackgroundFetching() {\r\n            // setInterval(() => {\r\n            //     let inBackgroundFetching=localStorage.getItem('inBackgroundFetching');\r\n            //     console.log(\"This check ++++++++++\",inBackgroundFetching);\r\n            //     if(inBackgroundFetching !== \"true\"){\r\n            //         console.log(\"This check 111++++++++++\",inBackgroundFetching);\r\n            //         this.props.history.push('/dashboard');       \r\n                               \r\n            //     }\r\n            // },2000);\r\n        }\r\n    /**\r\n    * @handleLoginFormValidation \r\n    * email and password field blank validation\r\n    */\r\n    handleLoginFormValidation() {\r\n        let fields = {\r\n        email: this.state.email,\r\n        password: this.state.password,\r\n        };\r\n        \r\n        let formIsValid = true;\r\n        let emailRegex = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n        let checkResult = emailRegex.test(String(this.state.email).toLowerCase());\r\n        if (!fields[\"email\"]) {\r\n        formIsValid = false;\r\n        this.setState({errorMessage:\"Email Is Required\"});\r\n        return formIsValid;\r\n        } else if (checkResult === false) {\r\n        formIsValid = false;\r\n        this.setState({errorMessage:\"Please enter a proper email\"});\r\n        return formIsValid;\r\n        }\r\n        else if (!fields[\"password\"]) {\r\n        formIsValid = false;\r\n        this.setState({errorMessage:\"Password Is Required\"});\r\n        return formIsValid;\r\n        }else{\r\n            formIsValid = true;\r\n            return formIsValid;\r\n        }\r\n        \r\n        return formIsValid;\r\n    }\r\n     /**\r\n    * @loginHandler \r\n    * in this function we are checking the email id, password\r\n    * and if the details are correct then login them and also take care about the remember password one\r\n    */\r\n    loginHandler = async (event) => {\r\n        event.preventDefault();\r\n        event.preventDefault();\r\n        let payload = {\r\n        email: this.state.email,\r\n        password: this.state.password,\r\n        }\r\n        if (this.handleLoginFormValidation()) {\r\n            this.setState({ error:false});\r\n            this.setState({errorMessage:\"\"});\r\n            this.setState({ loader: true });\r\n            let payload  ={\r\n                extensionId: kyubiExtensionId,\r\n                email: this.state.email,\r\n                password: this.state.password,\r\n            }\r\n            await AuthServices.login(payload).then(async result=>{\r\n                console.log(\"This I gggggggg\",result);\r\n                localStorage.setItem('token', result.data.token);\r\n                localStorage.setItem('inBackgroundFetching', true);\r\n                localStorage.setItem('userEmail', this.state.email);\r\n                if(result.data.code === 1){\r\n                    let LC=loginHelper.login();\r\n                    setTimeout(() => {\r\n                        this.props.history.push('/dashboard');\r\n                        console.log(\"sorry\");\r\n                    }, 3000);\r\n                }else{\r\n                this.setState({ loader: false });\r\n                this.setState({errorMessage:\"User not found or In-Active\"});\r\n                this.setState({ error:true});\r\n                }\r\n                \r\n                //this.checkBackgroundFetching();\r\n                 //console.log(LC);\r\n                 \r\n                //history.push(\"/dashboard\");\r\n            }).catch(error=>{\r\n                console.log(error);\r\n                this.setState({ loader: false });\r\n                this.setState({errorMessage:\"User not found or In-Active\"});\r\n                this.setState({ error:true});\r\n            });\r\n            \r\n\r\n\r\n        }else{\r\n            this.setState({ error:true});\r\n\r\n        }\r\n        //this.setState({ loader: false });\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.setState({ loader: true });\r\n        let token=localStorage.getItem('token');\r\n        let inBackgroundFetching=localStorage.getItem('inBackgroundFetching');\r\n        if(token){\r\n            if(inBackgroundFetching !== \"true\"){\r\n                this.props.history.push('/dashboard');    \r\n            }else{\r\n                this.setState({ loader: false });\r\n            }\r\n        }else{\r\n            this.setState({ loader: false });\r\n        }\r\n        \r\n    }\r\n\r\n    render() {\r\n        \r\n        return (\r\n               <div className=\"login_screen_width\">\r\n                   {this.state.loader && (   \r\n                    <div className=\"overlay\">\r\n                       <img src=\"images/ajax-loader.gif\"></img>\r\n                    </div>\r\n                    )}\r\n                <div className=\"loginscreen\">\r\n                        <div className=\"graphics1\"></div>\r\n                        <div className=\"graphics2\"></div>\r\n                        <div className=\"logo\"><img src=\"images/logo1.svg\"></img></div>\r\n                            <div className=\"login_container\">\r\n                                <div className=\"login_welcome_block\">\r\n                                    Welcome,\r\n                                        <h3>Login to continue!</h3>\r\n                                </div>\r\n                                <div className=\"login_block\">\r\n                                    <form>\r\n                                        <label>\r\n                                        <span><img src=\"images/mail.svg\"></img></span>\r\n                                        <input type=\"text\" name=\"email\" id=\"email\" placeholder=\"Email Address\"   onChange={this.inputChangeHandller}/>\r\n                                        </label>\r\n                                        <label>\r\n                                            <span><img src=\"images/lock.svg\"></img></span>\r\n                                            <input type=\"password\" name=\"password\" id=\"password\" placeholder=\"Enter your password\" onChange={this.inputChangeHandller}/>\r\n                                        </label>\r\n                                        {this.state.error && ( \r\n                                             <p class=\"text-danger\">{this.state.errorMessage}</p> \r\n                                         )} \r\n                                        <div className=\"text-right gap1\"><a href=\"#\" class=\"link\">Forgot Password?</a></div>\r\n                                        <button className=\"blue_btn\" type=\"button\" onClick={this.loginHandler}>LOGIN</button>\r\n                                        <div className=\"login_signup\">Don’t have an account? <a href=\"#\">Sign up</a></div>\r\n                                    </form>\r\n                                </div>\r\n                                <div className=\"footer\">\r\n                                    <p>Powered by <a href=\"#\">Tier5</a> and the <a href=\"#\">Tier5 Partnership</a></p>\r\n                                    <a href=\"#\"><img src=\"images/Path3.svg\"></img></a> <a href=\"#\"><img src=\"images/Messanger.svg\"></img></a>\r\n                               </div>\r\n                            </div>    \r\n                        </div>\r\n                    </div>\r\n        );\r\n    }\r\n}\r\nexport default Login;","C:\\GrammyWammy\\front-end\\src\\components\\modules\\Auth\\NotFound.js",["195","196"],"import React, { Component } from 'react';\r\nimport { Redirect, withRouter } from 'react-router-dom'\r\n\r\nclass NotFound extends Component {\r\n    render() {\r\n        return (\r\n          <div className=\"\">\r\n          Hello Login\r\n          </div>\r\n        );\r\n    }\r\n}\r\nexport default NotFound;","C:\\GrammyWammy\\front-end\\src\\components\\modules\\Auth\\ForgotPassword.js",["197","198","199","200","201","202","203"],"import React, { Component} from \"react\";\r\nimport { Redirect, withRouter } from 'react-router-dom';\r\n\r\nimport {kyubiExtensionId}  from \"../../../config\";\r\nimport \"./login.css\";\r\nimport AuthServices from \"../../../services/authService\";\r\nimport loginHelper from \"../../../helper/loginHelper\";\r\nimport { NavLink } from \"react-router-dom\";\r\nclass ForgotPassword extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n          email:\"\",\r\n          password:\"\",\r\n          loader:false,\r\n          error:false,\r\n          errorMessage:\"\",\r\n          loadingstatus:false\r\n        }\r\n        \r\n\r\n      }\r\n    /**\r\n    * @inputChangeHandller \r\n    * getting input field values\r\n    */\r\n    inputChangeHandller = (event) => {\r\n       this.setState({ [event.target.name]: event.target.value })\r\n    }\r\n    /**\r\n    * @checkBackgroundFetching \r\n    * Check  Wether Background Fetching is  done or not\r\n    */\r\n    checkBackgroundFetching() {\r\n            // setInterval(() => {\r\n            //     let inBackgroundFetching=localStorage.getItem('inBackgroundFetching');\r\n            //     console.log(\"This check ++++++++++\",inBackgroundFetching);\r\n            //     if(inBackgroundFetching !== \"true\"){\r\n            //         console.log(\"This check 111++++++++++\",inBackgroundFetching);\r\n            //         this.props.history.push('/dashboard');       \r\n                               \r\n            //     }\r\n            // },2000);\r\n        }\r\n    /**\r\n    * @handleLoginFormValidation \r\n    * email and password field blank validation\r\n    */\r\n       handleForgotPasswordFormValidation() {\r\n        let fields = {\r\n        email: this.state.email,\r\n        };\r\n        \r\n        let formIsValid = true;\r\n        let emailRegex = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n        let checkResult = emailRegex.test(String(this.state.email).toLowerCase());\r\n        if (!fields[\"email\"]) {\r\n        formIsValid = false;\r\n        this.setState({errorMessage:\"Email Is Required\"});\r\n        return formIsValid;\r\n        } else if (checkResult === false) {\r\n        formIsValid = false;\r\n        this.setState({errorMessage:\"Please enter a proper email\"});\r\n        return formIsValid;\r\n        }\r\n        else{\r\n            formIsValid = true;\r\n            return formIsValid;\r\n        }\r\n        \r\n        return formIsValid;\r\n    }\r\n     /**\r\n    * @loginHandler \r\n    * in this function we are checking the email id, password\r\n    * and if the details are correct then login them and also take care about the remember password one\r\n    */\r\n        forgotPasswordHandler = async (event) => {\r\n        event.preventDefault();\r\n        event.preventDefault();\r\n        console.log(this.state.email);\r\n        let payload = {\r\n        email: this.state.email\r\n        }\r\n        if (this.handleForgotPasswordFormValidation()) {\r\n            this.setState({ error:false});\r\n            this.setState({errorMessage:\"\"});\r\n            let payload  ={\r\n                extId: kyubiExtensionId,\r\n                email: this.state.email\r\n            }\r\n            await AuthServices.forgotPassword(payload).then(async result=>{\r\n                console.log(\"This I gggggggg\",result);\r\n                localStorage.setItem('token', result.data.token);\r\n                localStorage.setItem('inBackgroundFetching', true);\r\n                if(result.data.code === 1){\r\n\r\n                    this.setState({ loader: false });\r\n                    this.setState({successMessage:result.data.message});\r\n                    this.setState({ success:true});\r\n                    this.setState({ error:false});\r\n                    \r\n                }else{\r\n                this.setState({ loader: false });\r\n                this.setState({errorMessage:\"User not found or In-Active\"});\r\n                this.setState({ error:true});\r\n                this.setState({ success:false});\r\n                }\r\n                \r\n                //this.checkBackgroundFetching();\r\n                 //console.log(LC);\r\n                 \r\n                //history.push(\"/dashboard\");\r\n            }).catch(error=>{\r\n                console.log(error);\r\n                this.setState({ loader: false });\r\n                this.setState({errorMessage:\"User not found or In-Active\"});\r\n                this.setState({ error:true});\r\n            });\r\n            \r\n\r\n\r\n        }else{\r\n            this.setState({ error:true});\r\n\r\n        }\r\n        //this.setState({ loader: false });\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.setState({ loader: true });\r\n        let token=localStorage.getItem('token');\r\n        let inBackgroundFetching=localStorage.getItem('inBackgroundFetching');\r\n        if(token){\r\n            if(inBackgroundFetching !== \"true\"){\r\n                this.props.history.push('/dashboard');    \r\n            }else{\r\n                this.setState({ loader: false });\r\n            }\r\n        }else{\r\n            this.setState({ loader: false });\r\n        }\r\n        \r\n    }\r\n\r\n    render() {\r\n        \r\n        return (\r\n            \r\n        <div>\r\n        {this.state.loader && (   \r\n        <div className=\"overlay\">\r\n            <i className=\"fas fa-2x fa-sync-alt fa-spin\"></i>\r\n        </div>\r\n        )}\r\n        \r\n        \r\n        <div className=\"login-html\">\r\n            <p className=\"login-box-msg\">Forgot Password</p>\r\n            <form>\r\n                <div className=\"input-group mb-3\">\r\n                    <input \r\n                    className=\"form-control\" \r\n                    name=\"email\"\r\n                    id=\"email\"\r\n                    type=\"email\"\r\n                    placeholder=\"Email Address\"\r\n                    onChange={this.inputChangeHandller}\r\n                    />\r\n                    <div className=\"input-group-append\">\r\n                        <div className=\"input-group-text\">\r\n                            <span className=\"fas fa-envelope\"></span>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                \r\n                <div className=\"row\"> \r\n                {this.state.error && ( \r\n                <p class=\"text-danger\">{this.state.errorMessage}</p> \r\n                )}\r\n                {this.state.success && ( \r\n                <p class=\"text-success\">{this.state.successMessage}</p> \r\n                )}             \r\n                <div class=\"col-12\">\r\n                    <button \r\n                    type=\"button\" \r\n                    className=\"btn btn-primary btn-block\"\r\n                    onClick={this.forgotPasswordHandler}\r\n                    >Submit</button>\r\n                </div>\r\n                <NavLink  to=\"/\">\r\n                    <p>Login</p>\r\n                </NavLink>\r\n\r\n                   \r\n                </div>\r\n            </form>\r\n        </div>\r\n        </div>\r\n        );\r\n    }\r\n}\r\nexport default ForgotPassword;","C:\\GrammyWammy\\front-end\\src\\components\\modules\\Auth\\logout.js",["204","205","206"],"import React, { Component} from \"react\";\r\nimport { Redirect, withRouter } from 'react-router-dom';\r\n\r\nimport {kyubiExtensionId}  from \"../../../config\";\r\nimport \"./login.css\";\r\n\r\nclass logout extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n          \r\n        }\r\n        \r\n\r\n      }\r\n      componentDidMount(){\r\n        \r\n        localStorage.removeItem(\"fb_id\")\r\n        localStorage.removeItem(\"token\")\r\n        localStorage.removeItem(\"keywordsTally\")\r\n        localStorage.removeItem(\"userEmail\")\r\n        localStorage.removeItem('inBackgroundFetching');\r\n        localStorage.removeItem('fb_image');\r\n        localStorage.removeItem('fb_logged_id');\r\n        localStorage.removeItem('fb_name');\r\n        localStorage.removeItem('fb_username');\r\n        localStorage.removeItem(\"autoresponder\")\r\n        localStorage.removeItem(\"kyubi_user_token\")\r\n        localStorage.removeItem(\"user_id\")\r\n        localStorage.removeItem(\"default_message_text\")\r\n        localStorage.removeItem(\"fb_username\")\r\n        localStorage.removeItem(\"default_time_delay\")\r\n        localStorage.removeItem(\"default_message\")\r\n        localStorage.removeItem(\"individualThreadList\")\r\n        localStorage.removeItem('fbthread');\r\n        localStorage.removeItem('fbmunread');\r\n        localStorage.removeItem('fbprofile');\r\n        setTimeout(() => {\r\n            this.props.history.push('/');\r\n          }, 3000);\r\n      }\r\n    render() {\r\n        return (\r\n\r\n          <div className=\"wrapper login_screen_width\">\r\n            \r\n            \r\n\r\n            <div className=\"content-wrapper\">\r\n              <section className=\"content-header\">\r\n                <div className=\"container-fluid\">\r\n                  <div className=\"row mb-12\">\r\n                    <div className=\"col-sm-6\">\r\n                      \r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </section>\r\n              <section className=\"content\">\r\n                <div className=\"container-fluid\">\r\n                  <div className=\"row\">\r\n                    <div className=\"col-md-12\">\r\n                    <div class=\"alert alert-danger alert-dismissible\">\r\n                  \r\n                  <h5><i class=\"icon fas fa-ban\"></i> Alert!</h5>\r\n                  Thanks For Being With Us We are Loging You Out\r\n                </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </section>\r\n            </div>\r\n          </div>\r\n          \r\n        );\r\n    }\r\n}\r\nexport default logout;","C:\\GrammyWammy\\front-end\\src\\components\\modules\\MessageGroup\\messageGroupCreate.js",[],"C:\\GrammyWammy\\front-end\\src\\components\\modules\\MessageGroup\\messageGroup.js",["207","208","209"],"import React, { Component} from \"react\";\r\nimport MessageGroupService from  \"../../../services/messageGroupService\";\r\nimport { Redirect, withRouter } from 'react-router-dom';\r\nimport Sidebar from \"../Common/sidebar\";\r\nimport {kyubiExtensionId}  from \"../../../config\";\r\nimport { NavLink } from \"react-router-dom\";\r\nclass messageGroup extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n          messageGroupList :[],\r\n          loader:true\r\n        }\r\n    }\r\n    componentDidMount(){\r\n        this.setState({loader:false});\r\n        if(localStorage.getItem(\"groupitems\"))\r\n        this.setState({messageGroupList:JSON.parse(localStorage.getItem(\"groupitems\"))})\r\n    }\r\n    deleteMessageGroupHandler =  (id,event) =>{\r\n        let payload = {\r\n            message_group_id:id\r\n        }\r\n        if(MessageGroupService.deleteMessageGroup(payload))\r\n        {\r\n            this.setState({loader:false});\r\n            this.props.history.push('/messageGroup');\r\n        }\r\n        \r\n\r\n    }\r\n    render() {\r\n        \r\n        return ( <div className=\"wrapper\">\r\n                         {this.state.loader && (   \r\n                            <div className=\"overlay\">\r\n                            <i className=\"fas fa-2x fa-sync-alt fa-spin\"></i>\r\n                            </div>\r\n                         )}\r\n                         <Sidebar  selectedtab=\"setting\"></Sidebar>\r\n                                <div className=\"content-wrapper\">\r\n                                <section className=\"content-header\">\r\n                                    <div className=\"container-fluid\">\r\n                                        <div className=\"row mb-12\">\r\n                                            <div className=\"col-sm-6\">\r\n                                            <h1>Message-Group</h1>\r\n                                            \r\n                                            <NavLink  to=\"/messagegroupcreate\"  class=\"btn btn-app\">\r\n                                                <i class=\"fas fa-plus-square\"></i> Create New Message-Group\r\n                                            </NavLink>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                </section>\r\n                                <section className=\"content\">\r\n                                        <div className=\"container-fluid\">\r\n                                            <div className=\"row overflow-auto\">\r\n                                                <div className=\"col-md-12\">\r\n                                                {Object.keys(this.state.messageGroupList).length > 0 ?\r\n                                                (this.state.messageGroupList.map((data, i) => {\r\n                                                    let editlink= \"/messagegroupedit/\"+i;\r\n                                                    \r\n                                                return(\r\n                                                    \r\n                                                <div className=\"card card-success shadow-none\">\r\n                                                    <div className=\"card-header\">\r\n                                                        <h3 className=\"card-title\">{data.message_group_name}</h3>\r\n                                                        <div className=\"card-tools\">\r\n                                                            <button type=\"button\" className=\"btn btn-tool\" data-card-widget=\"collapse\">\r\n                                                            <NavLink  to={editlink}><i className=\"far fa-edit\"></i></NavLink>\r\n                                                            </button>\r\n                                                        </div>\r\n                                                        <div className=\"card-tools\">\r\n                                                            <button type=\"button\" className=\"btn btn-tool\" data-card-widget=\"collapse\" >\r\n                                                            <i className=\"fas fa-trash\" onClick={() => this.deleteMessageGroupHandler(i)} ></i>\r\n                                                            </button>\r\n                                                        </div>\r\n                                                    </div>\r\n                                                    <div className=\"card-body\" >\r\n                                                        <div className=\"callout callout-success\" >\r\n                                                            <h6>Message Group Description :</h6>\r\n                                                            <p>{data.message_group_description}</p>\r\n                                                        </div>\r\n                                                        \r\n                                                    </div>\r\n                                                </div>\r\n                                                \r\n                                                )\r\n                                                }))\r\n                                                :\r\n                                                (this.state.loader ? \" \": \r\n                                                <div className=\"card card-danger shadow-none\">\r\n                                                <div className=\"card-header\">\r\n                                                    <h3 className=\"card-title\">Oops !</h3>\r\n                                                    <div className=\"card-tools\">\r\n                                                        \r\n                                                    </div>\r\n                                                </div>\r\n                                                <div className=\"card-body\" >\r\n                                                    <div className=\"callout callout-danger\">\r\n                                                        <h5>Sorry There Is No Message-Group</h5>\r\n                                                        \r\n                                                    </div>\r\n                                                    \r\n                                                </div>\r\n                                                </div> \r\n                                                    )\r\n                                                \r\n                                                }       \r\n                                                \r\n                                                </div>\r\n                                            </div>\r\n                                        </div>\r\n                                    </section>\r\n                            </div>    \r\n                        </div>\r\n                        );\r\n            }\r\n       }\r\nexport default messageGroup;","C:\\GrammyWammy\\front-end\\src\\components\\modules\\Main\\Dashboard.js",["210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233"],"import React, { Component } from 'react';\r\nimport { Redirect, withRouter } from 'react-router-dom'\r\nimport  {OpenFacebookInTab,CheckUserInfoFromFaccebook,OpenFacebookProfileInTab} from  '../../../helper/helper'\r\nimport Sidebar from \"../Common/sidebar\"\r\nimport { NavLink } from \"react-router-dom\";\r\nimport settingService from \"../../../services/setting\"\r\nclass Dashboard extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      fb_image:\"\",\r\n      fb_name:\"\",\r\n      fb_username:\"\",\r\n      insta_image:\"\",\r\n      insta_name:\"\",\r\n      insta_username:\"\",\r\n      insta_logged_id:\"\",\r\n      fb_id:\"\",\r\n      fb_logged_id:\"\",\r\n      autoresponder:\"0\",\r\n      shownavbar:false,\r\n      loader:true,\r\n      openSidebar:false,\r\n    }\r\n  }\r\n  HideMenu = (event) => {\r\n    event.preventDefault();\r\n    //console.log(this.props.shownav);\r\n    this.setState({\r\n      openSidebar:false\r\n    })\r\n  }\r\n  ShowMenu = (event) => {\r\n    event.preventDefault();\r\n    //console.log(this.props.shownav);\r\n    this.setState({\r\n      openSidebar:true\r\n    })\r\n  }\r\n  fbHandler = async (event) => {\r\n    event.preventDefault();\r\n    let insta_logged_id=localStorage.getItem('insta_logged_id');\r\n    console.log(\"You Are Loged in\",insta_logged_id);\r\n    if(insta_logged_id === \"false\"){\r\n      OpenFacebookInTab();\r\n    }else{\r\n      OpenFacebookProfileInTab();\r\n    }\r\n  }\r\n  autoresponderHandler  = async (event) =>{\r\n    let user_id=localStorage.getItem('user_id');\r\n    let autoresponder = 0;\r\n    let payload ={\r\n      user_id:user_id,\r\n      autoresponder:autoresponder\r\n    }\r\n    await settingService.updateAutoresponderSetting(payload).then(async result=>{\r\n      this.setState({\r\n        loader:true\r\n      })\r\n      console.log(result);\r\n      if(result.data.code==1){\r\n        let responsenewvalue =result.data;\r\n        console.log( responsenewvalue.payload.UserInfo.user_id);\r\n        localStorage.setItem('kyubi_user_token', responsenewvalue.payload.UserInfo.kyubi_user_token);\r\n        localStorage.setItem('user_id', responsenewvalue.payload.UserInfo.user_id);\r\n        localStorage.setItem('fb_id', responsenewvalue.payload.UserInfo.facebook_id);\r\n        localStorage.setItem('fb_username', responsenewvalue.payload.UserInfo.facebook_name);\r\n        localStorage.setItem('fb_name', responsenewvalue.payload.UserInfo.facebook_profile_name);\r\n        localStorage.setItem('fb_image', responsenewvalue.payload.UserInfo.facebook_image);\r\n        localStorage.setItem('default_message', responsenewvalue.payload.UserSettings.default_message);\r\n        localStorage.setItem('default_message_text', responsenewvalue.payload.UserSettings.default_message_text);\r\n        localStorage.setItem('autoresponder', responsenewvalue.payload.UserSettings.autoresponder);\r\n        localStorage.setItem('default_time_delay', responsenewvalue.payload.UserSettings.default_time_delay);\r\n        localStorage.setItem('keywordsTally', JSON.stringify(responsenewvalue.payload.AutoResponderKeywords));\r\n        let fb_image=localStorage.getItem('fb_image');\r\n        let fb_username=localStorage.getItem('fb_username');\r\n        let fb_name=localStorage.getItem('fb_name');\r\n        let fb_id=localStorage.getItem('fb_id');\r\n        let fb_logged_id=localStorage.getItem('fb_logged_id');\r\n        let autoresponder=localStorage.getItem('autoresponder');\r\n        console.log(\"Yo Are Loged in\",fb_logged_id);\r\n        this.setState({\r\n        fb_image:fb_image,\r\n        fb_username:fb_username,\r\n        fb_name:fb_name,\r\n        fb_id:fb_id,\r\n        fb_logged_id:fb_logged_id,\r\n        autoresponder:autoresponder,\r\n        loader:false\r\n        })\r\n\r\n      }\r\n    });\r\n\r\n    //CheckUserInfoFromFaccebook();\r\n  }\r\n  refreshHandler  = async (event) =>  {\r\n    event.preventDefault();\r\n    // this.setState({\r\n    //   loader:true\r\n    // })\r\n    CheckUserInfoFromFaccebook();\r\n    // setTimeout(() => {\r\n\r\n    //   let fb_image=localStorage.getItem('fb_image');\r\n    //   let fb_username=localStorage.getItem('fb_username');\r\n    //   let fb_name=localStorage.getItem('fb_name');\r\n    //   let fb_id=localStorage.getItem('fb_id');\r\n    //   let fb_logged_id=localStorage.getItem('fb_logged_id');\r\n    //   let autoresponder=localStorage.getItem('autoresponder');\r\n    //   this.setState({\r\n    //     fb_image:fb_image,\r\n    //     fb_username:fb_username,\r\n    //     fb_name:fb_name,\r\n    //     fb_id:fb_id,\r\n    //     fb_logged_id:fb_logged_id,\r\n    //     autoresponder:autoresponder,\r\n    //     loader:false\r\n    //   })\r\n\r\n    // }, 4000);\r\n  }\r\n  componentDidMount(){\r\n    setTimeout(async () => {\r\n      \r\n      let user_id=localStorage.getItem('user_id');\r\n      let payload   ={user_id:user_id }\r\n      \r\n      await settingService.getUserDetails(payload).then(result  =>{\r\n        \r\n      if(result.data.code==1){\r\n        let responsenewvalue =result.data;\r\n        console.log( responsenewvalue.payload.UserInfo);\r\n        localStorage.setItem('kyubi_user_token', responsenewvalue.payload.UserInfo.kyubi_user_token);\r\n        localStorage.setItem('user_id', responsenewvalue.payload.UserInfo.user_id);\r\n        localStorage.setItem('insta_username', responsenewvalue.payload.UserInfo.instagram_profile_name);\r\n        localStorage.setItem('insta_name', responsenewvalue.payload.UserInfo.instagram_name);\r\n        localStorage.setItem('insta_image', responsenewvalue.payload.UserInfo.instagram_image);\r\n        localStorage.setItem('default_message', responsenewvalue.payload.UserSettings.default_message);\r\n        localStorage.setItem('default_message_text', responsenewvalue.payload.UserSettings.default_message_text);\r\n        localStorage.setItem('autoresponder', responsenewvalue.payload.UserSettings.autoresponder);\r\n        localStorage.setItem('default_time_delay', responsenewvalue.payload.UserSettings.default_time_delay);\r\n        localStorage.setItem('keywordsTally', JSON.stringify(responsenewvalue.payload.AutoResponderKeywords));\r\n        let insta_image=localStorage.getItem('insta_image');\r\n        let insta_username=localStorage.getItem('insta_username');\r\n        let insta_name=localStorage.getItem('insta_name');\r\n        \r\n        let insta_logged_id=localStorage.getItem('insta_logged_id');\r\n        let autoresponder=localStorage.getItem('autoresponder');\r\n        console.log(\"Yo Are Loged in\",insta_logged_id);\r\n        this.setState({\r\n        insta_image:insta_image,\r\n        insta_username:insta_username,\r\n        insta_name:insta_name,\r\n        insta_logged_id:insta_logged_id,\r\n        autoresponder:autoresponder,\r\n        loader:false\r\n        })\r\n        \r\n\r\n      }\r\n      }).catch(error=>{\r\n\r\n        let insta_image=localStorage.getItem('insta_image');\r\n        let insta_username=localStorage.getItem('insta_username');\r\n        let insta_name=localStorage.getItem('insta_name');\r\n        \r\n        let insta_logged_id=localStorage.getItem('insta_logged_id');\r\n        let autoresponder=localStorage.getItem('autoresponder');\r\n        console.log(\"Yo Are Loged in\",insta_logged_id);\r\n        this.setState({\r\n        insta_image:insta_image,\r\n        insta_username:insta_username,\r\n        insta_name:insta_name,\r\n        insta_logged_id:insta_logged_id,\r\n        autoresponder:autoresponder,\r\n        loader:false\r\n        })\r\n\r\n      })\r\n      \r\n\r\n    }, 3000);\r\n    \r\n  }\r\n    render() {\r\n        return (\r\n              <div className=\"dashboard_screen_width\">\r\n                 {this.state.loader && (   \r\n                    <div className=\"overlay\">\r\n                       <img src=\"images/ajax-loader.gif\"></img>\r\n                    </div>\r\n                    )}\r\n                  <div className=\"dashboard\">\r\n\r\n                    <div className=\"gen_header\">\r\n                      <div className=\"logo\"><img src=\"images/logo.svg\" alt=\"\"></img></div>\r\n                          <div className=\"hBtnWrapper\">\r\n                                <div className=\"toogler\">\r\n                                  <label className=\"switch_box box_1\">\r\n                                    <input type=\"checkbox\" class=\"switch_1\" id=\"swich\" name=\"togg\" />\r\n                                    <div className=\"toogler\"></div>\r\n                                  </label>\r\n                                </div>\r\n                                <div className=\"slide_menu_click\">\r\n                                    <a href=\"#\" className=\"side_click\" onClick={this.ShowMenu}><img src=\"images/side_menu.svg\"></img></a>\r\n                                    {this.state.openSidebar ?\r\n                                     <div className=\"slider_menu active\">\r\n                                        <a href=\"#\" className=\"cross\" onClick={this.HideMenu}>X</a>\r\n                                        <div className=\"after_log_profile\">\r\n                                            <img src={this.state.insta_image} alt=\"\"></img>\r\n                                          <p>Welcome</p>\r\n                                          <h3>{this.state.insta_name}</h3>\r\n                                        </div>\r\n                                        <ul className=\"menunav\">\r\n                                            <li><a href=\"#\"><img src=\"images/menuicon4.svg\"></img> Dashboard</a></li>\r\n                                            <li>\r\n                                            <NavLink  to=\"/setting\" className=\"nav-link\">\r\n                                              <i className=\"nav-icon fas fa-cogs\"></i>\r\n                                              <p>\r\n                                                Setting\r\n                                              </p>\r\n                                            </NavLink>\r\n                                            </li>\r\n                                            <li><a href=\"#\"><img src=\"images/menuicon2.svg\"></img> Friends</a></li>\r\n                                            <li><NavLink  to=\"/logout\" className=\"nav-link\"><img src=\"images/menuicon1.svg\"></img> Logout</NavLink></li>\r\n                                          </ul>\r\n                                     </div>\r\n                                     :\r\n                                     \"\"\r\n                                     }\r\n                                  </div> \r\n                              </div> \r\n                           </div>\r\n                           <div className=\"after_log_profile\">\r\n                              <img src={this.state.insta_image} alt=\"\"></img>\r\n                              <p>Welcome</p>\r\n                              <h3>{this.state.insta_name}</h3>\r\n                          </div>\r\n                          <div className=\"fb_login_request\">\r\n                            {this.state.insta_logged_id ?\r\n                            \"\"\r\n                            :\r\n                            <p>Please log-in to your Instagram profile</p>\r\n                            }\r\n                            <a onClick={this.refreshHandler}  class=\"bluebtn\"><img src=\"images/layer1.svg\"></img> Refresh</a>\r\n                            <a onClick={this.fbHandler} class=\"whitebtn\"><img src=\"images/fb_blue.svg\"></img> Facebook</a>\r\n                          </div>\r\n                          <div class=\"footer\">\r\n                            <p>Powered by <a href=\"#\">Tier5</a> and the <a href=\"#\">Tier5 Partnership</a></p>\r\n                            <a href=\"#\"><img src=\"images/Path3.svg\"></img></a> <a href=\"#\"><img src=\"images/Messanger.svg\"></img></a>\r\n                          </div>\r\n\r\n                  </div>\r\n              </div>  \r\n        );\r\n    }\r\n}\r\nexport default Dashboard;","C:\\GrammyWammy\\front-end\\src\\components\\modules\\Setting\\setting.js",["234","235","236"],"import React, { Component } from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport Header from \"../Common/header\";\r\nimport Footer from \"../Common/footer\";\r\nimport biglogo from \"../../../images/biglogo.svg\";\r\nimport ResponseSetting from \"../Setting/ResponseSetting/responseSetting\";\r\nimport MessageSetting  from \"../Setting/DefaultMessageSettings/defaultMessageSettings\"\r\nclass setting extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n          responseSetting:1,\r\n          messageSetting:0,\r\n          loader:false\r\n        }\r\n      }\r\n      activateResponseSetting  = async (event) =>  {\r\n        event.preventDefault();\r\n        this.setState({\r\n            responseSetting:1,\r\n            messageSetting:0\r\n        })\r\n        \r\n      }\r\n      activateMessageSetting  = async (event) =>  {\r\n        event.preventDefault();\r\n        this.setState({\r\n            responseSetting:0,\r\n            messageSetting:1\r\n        })\r\n        \r\n      }\r\n      render() {\r\n        return (\r\n            <div className=\"grammy_screen_width\">\r\n                {this.state.loader && (   \r\n                    <div className=\"after_login_refresh\"><img src={biglogo} alt=\"\"/></div>\r\n                )}\r\n                <div className=\"dashboard\">\r\n                <Header selectedtab=\"setting\"></Header>\r\n                <ul class=\"maintab\">\r\n                    <li><a href=\"\" onClick={this.activateResponseSetting} id=\"responce\" className={this.state.responseSetting ?\"active\":\"\"}>Response Settings</a></li>\r\n                    <li><a href=\"\" onClick={this.activateMessageSetting} id=\"message\" className={this.state.messageSetting ?\"active\":\"\"}>Message Settings</a></li>\r\n                </ul>\r\n                {this.state.responseSetting ?\r\n                <ResponseSetting></ResponseSetting>\r\n                :\r\n                <MessageSetting></MessageSetting>\r\n                }\r\n                <Footer></Footer>\r\n                </div>\r\n            </div>\r\n\r\n        )\r\n                }\r\n}\r\nexport default setting;","C:\\GrammyWammy\\front-end\\src\\components\\modules\\MessageGroup\\messageGroupEdit.js",[],"C:\\GrammyWammy\\front-end\\src\\components\\modules\\AutoResponder\\autoResponder.js",["237"],"import React, { Component } from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport Sidebar from \"../Common/sidebar\";\r\nimport AutoResponderService from  \"../../../services/autoResponderServices\";\r\nimport settingService   from  \"../../../services/setting\";\r\nclass autoResponnder extends Component {\r\n    constructor(props) {\r\n      super(props)\r\n      this.state = {\r\n        autoresponderList :[],\r\n        loader:true\r\n      }\r\n    }\r\n    componentDidMount(){\r\n        let Token=localStorage.getItem(\"kyubi_user_token\");\r\n        let payload ={\r\n            user_id:Token\r\n        }\r\n        AutoResponderService.listAutoResponder(payload).then(async response =>{\r\n          \r\n            if(response.data.payload.autokey)\r\n            this.setState({autoresponderList:response.data.payload.autokey})\r\n            \r\n\r\n            let user_id=localStorage.getItem('user_id');\r\n            let payload   ={user_id:user_id }\r\n            await settingService.getUserDetails(payload).then(result  =>{\r\n\r\n            if(result.data.code==1){\r\n            let responsenewvalue =result.data;\r\n            console.log( responsenewvalue.payload.UserInfo.user_id);\r\n            localStorage.setItem('kyubi_user_token', responsenewvalue.payload.UserInfo.kyubi_user_token);\r\n            localStorage.setItem('user_id', responsenewvalue.payload.UserInfo.user_id);\r\n            localStorage.setItem('fb_id', responsenewvalue.payload.UserInfo.facebook_id);\r\n            localStorage.setItem('fb_username', responsenewvalue.payload.UserInfo.facebook_name);\r\n            localStorage.setItem('fb_name', responsenewvalue.payload.UserInfo.facebook_profile_name);\r\n            localStorage.setItem('fb_image', responsenewvalue.payload.UserInfo.facebook_image);\r\n            localStorage.setItem('default_message', responsenewvalue.payload.UserSettings.default_message);\r\n            localStorage.setItem('default_message_text', responsenewvalue.payload.UserSettings.default_message_text);\r\n            localStorage.setItem('autoresponder', responsenewvalue.payload.UserSettings.autoresponder);\r\n            localStorage.setItem('default_time_delay', responsenewvalue.payload.UserSettings.default_time_delay);\r\n            localStorage.setItem('keywordsTally', JSON.stringify(responsenewvalue.payload.AutoResponderKeywords));\r\n\r\n\r\n            }\r\n            }).catch(error=>{\r\n\r\n\r\n            })\r\n            this.setState({loader:false});\r\n          }).catch(error=>{\r\n            this.setState({loader:false});\r\n          });\r\n\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"wrapper\">\r\n                {this.state.loader && (   \r\n                <div className=\"overlay\">\r\n                <i className=\"fas fa-2x fa-sync-alt fa-spin\"></i>\r\n                </div>\r\n                )}\r\n                <Sidebar  selectedtab=\"setting\"></Sidebar>\r\n                <div className=\"content-wrapper\">\r\n                <section className=\"content-header\">\r\n                    <div className=\"container-fluid\">\r\n                        <div className=\"row mb-12\">\r\n                            <div className=\"col-sm-6\">\r\n                            <h1>Auto-Responder</h1>\r\n                            \r\n                            <NavLink  to=\"/autorespondercreate\"  class=\"btn btn-app\">\r\n                                <i class=\"fas fa-plus-square\"></i> Create New Auto-Responder\r\n                            </NavLink>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </section>\r\n                <section className=\"content\">\r\n                    <div className=\"container-fluid\">\r\n                        <div className=\"row overflow-auto\">\r\n                            <div className=\"col-md-12\">\r\n                            {Object.keys(this.state.autoresponderList).length > 0 ?\r\n                            (this.state.autoresponderList.map((data, i) => {\r\n                                let editlink= \"/autoresponderedit/\"+data._id;\r\n                            return(\r\n                                \r\n                            <div className={data.status ===  1 ? \"card card-success shadow-none\" : \"card card-danger shadow-none\" }>\r\n                                <div className=\"card-header\">\r\n                                    <h3 className=\"card-title\">{data.auto_responder_name}</h3>\r\n                                    <div className=\"card-tools\">\r\n                                        <button type=\"button\" className=\"btn btn-tool\" data-card-widget=\"collapse\">\r\n                                        <NavLink  to={editlink}><i className=\"far fa-edit\"></i></NavLink>\r\n                                        </button>\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"card-body\" >\r\n                                    <div className={data.status ===  1 ? \"callout callout-success\" : \"callout callout-danger\" }>\r\n                                        <h6>Response Message :</h6>\r\n                                        <p>{data.message}</p>\r\n                                    </div>\r\n                                    <div className={data.status ===  1 ? \"callout callout-success\" : \"callout callout-danger\" }>\r\n                                        <h6>Keywords :</h6>\r\n                                        <p>\r\n                                        {data.autoresponderkeywords.map((result, i) => {\r\n                                        return (\r\n                                            <span class=\"badge badge-info\">{result.keywords}</span>\r\n                                        )\r\n                                        })\r\n                                        }\r\n                                        \r\n                                        </p>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            \r\n                            )\r\n                            }))\r\n                            :\r\n                            (this.state.loader ? \" \": \r\n                            <div className=\"card card-danger shadow-none\">\r\n                            <div className=\"card-header\">\r\n                                <h3 className=\"card-title\">Oops !</h3>\r\n                                <div className=\"card-tools\">\r\n                                    \r\n                                </div>\r\n                            </div>\r\n                            <div className=\"card-body\" >\r\n                                <div className=\"callout callout-danger\">\r\n                                    <h5>Sorry There Is No Auto-Responder</h5>\r\n                                    \r\n                                </div>\r\n                                \r\n                            </div>\r\n                            </div> \r\n                                )\r\n                              \r\n                            }       \r\n                            \r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </section>\r\n                </div>\r\n            </div>\r\n    \r\n        );\r\n    }\r\n}\r\n\r\nexport default autoResponnder;","C:\\GrammyWammy\\front-end\\src\\components\\modules\\AutoResponder\\autoResponderCreate.js",["238","239"],"import React, { Component } from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport AutoResponderService from  \"../../../services/autoResponderServices\"\r\nimport Sidebar from \"../Common/sidebar\"\r\nclass autoResponderCreate extends Component {\r\n    constructor(props) {\r\n      super(props)\r\n      this.state = {\r\n        auto_responder_name:\"\",\r\n        auto_responder_keywords:\"\",\r\n        auto_responder_message:\"\",\r\n        auto_responder_status:1,\r\n        loader:false\r\n      }\r\n    }\r\n    /**\r\n        * @inputChangeHandller \r\n        * getting input field values\r\n    */\r\n    inputChangeHandller = (event) => {\r\n        this.setState({ [event.target.name]: event.target.value })\r\n    }\r\n    autoSetting = () => {\r\n        console.log(\"hiyy\",this.state.auto_responder_status )\r\n        if(this.state.auto_responder_status === 0){\r\n            this.setState({auto_responder_status:1})\r\n        }else{\r\n            this.setState({auto_responder_status:0})\r\n        }\r\n    }\r\n    createAutoResponderGroupHandler =  (event) =>{\r\n        this.setState({loader:true});\r\n        event.preventDefault();\r\n        let Token=localStorage.getItem(\"kyubi_user_token\");\r\n        let payload = {\r\n            user_id:Token,\r\n            auto_responder_name:this.state.auto_responder_name,\r\n            auto_responder_keywords:this.state.auto_responder_keywords,\r\n            auto_responder_message:this.state.auto_responder_message,\r\n            auto_responder_status:this.state.auto_responder_status\r\n        }\r\n        \r\n        AutoResponderService.createAutoResponder(payload).then(response =>{\r\n          \r\n          this.setState({loader:false});\r\n          this.props.history.push('/autoresponder');\r\n        });\r\n      }\r\n    render() {\r\n        return (\r\n            <div className=\"wrapper\">\r\n                {this.state.loader && (   \r\n                    <div className=\"overlay\">\r\n                    <i className=\"fas fa-2x fa-sync-alt fa-spin\"></i>\r\n                    </div>\r\n                )}\r\n                <Sidebar  selectedtab=\"setting\"></Sidebar>\r\n                <div className=\"content-wrapper\">\r\n                <section className=\"content-header\">\r\n                    <div className=\"container-fluid\">\r\n                        <div className=\"row mb-12\">\r\n                            <div className=\"col-sm-6\">\r\n                            <h1>Auto-Responder</h1>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </section>\r\n                <section className=\"content\">\r\n                    <div className=\"container-fluid\">\r\n                        <div className=\"row\">\r\n                            <div className=\"col-md-12\">\r\n                            \r\n                            <div className=\"card card-primary\">\r\n                                <div className=\"card-header\">\r\n                                    <h3 className=\"card-title\"> Create Auto-Responder</h3>\r\n                                </div>\r\n                                <form>\r\n                                <div className=\"card-body\">\r\n                                    \r\n                                    <div className=\"form-group\">\r\n                                        <label for=\"exampleInputEmail1\">Auto-Responder Name</label>\r\n                                        <input type=\"text\"\r\n                                            name=\"auto_responder_name\" \r\n                                            className=\"form-control\" \r\n                                            id=\"exampleInputEmail1\" \r\n                                            placeholder=\"Auto-Responder Name\" \r\n                                            value={this.state.auto_responder_name}\r\n                                            onChange={this.inputChangeHandller}\r\n                                        />\r\n                                    </div>\r\n                                    \r\n                                    <div className=\"form-group\">\r\n                                        <label for=\"exampleInputEmail1\">Auto-Responder Keywords</label>\r\n                                        <textarea \r\n                                        name=\"auto_responder_keywords\" \r\n                                        className=\"form-control\" \r\n                                        rows=\"3\"\r\n                                        placeholder=\"Auto-Responder Keywords  Seperated with coma Like hello,Hi,How are you\"\r\n                                        value={this.state.auto_responder_keywords}\r\n                                        onChange={this.inputChangeHandller}\r\n                                        ></textarea>\r\n                                    </div>\r\n                                    <div className=\"form-group\">\r\n                                        <label for=\"exampleInputEmail1\">Auto-Responder Response Message</label>\r\n                                        <textarea \r\n                                        name=\"auto_responder_message\" \r\n                                        value=\"\"  \r\n                                        className=\"form-control\" \r\n                                        rows=\"3\"  \r\n                                        placeholder=\"Please enter the response message....\"\r\n                                        value={this.state.auto_responder_message}\r\n                                        onChange={this.inputChangeHandller}\r\n                                        ></textarea>\r\n                                    </div>\r\n                                    <div className=\"form-group clearfix\">\r\n                                        <div className=\"icheck-success d-inline\">\r\n                                        {this.state.auto_responder_status ?\r\n                                        <input type=\"checkbox\" id=\"checkboxPrimary3\" name=\"auto_responder_status\" onChange={this.autoSetting} checked/>\r\n                                        :\r\n                                        <input type=\"checkbox\" id=\"checkboxPrimary3\" name=\"auto_responder_status\" onChange={this.autoSetting}/>\r\n                                        }\r\n                                        <label for=\"checkboxPrimary3\">\r\n                                            Activate Auto-Responder\r\n                                        </label>\r\n                                        </div>\r\n                                    </div>\r\n                                    \r\n                                </div>           \r\n                                <div className=\"card-footer\">\r\n                                <button type=\"submit\" className=\"btn btn-primary\" onClick={this.createAutoResponderGroupHandler} >Submit</button>\r\n                                </div>\r\n                                </form>\r\n                            </div>\r\n\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </section>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default autoResponderCreate;","C:\\GrammyWammy\\front-end\\src\\components\\modules\\AutoResponder\\autoResponderEdit.js",["240","241"],"import React, { Component } from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport AutoResponderService from  \"../../../services/autoResponderServices\"\r\nimport Sidebar from \"../Common/sidebar\"\r\nclass autoResponderEdit extends Component {\r\n    constructor(props) {\r\n      super(props)\r\n      this.state = {\r\n        auto_responder_id:\"\",\r\n        auto_responder_name:\"\",\r\n        auto_responder_keywords:\"\",\r\n        auto_responder_message:\"\",\r\n        auto_responder_status:0,\r\n        loader:false\r\n      }\r\n    }\r\n    /**\r\n        * @inputChangeHandller \r\n        * getting input field values\r\n    */\r\n    inputChangeHandller = (event) => {\r\n        this.setState({ [event.target.name]: event.target.value })\r\n    }\r\n    autoSetting = () => {\r\n        console.log(\"hiyy\",this.state.auto_responder_status )\r\n        if(this.state.auto_responder_status === 0){\r\n            this.setState({auto_responder_status:1})\r\n        }else{\r\n            this.setState({auto_responder_status:0})\r\n        }\r\n    }\r\n    updateAutoResponderGroupHandler =  (event) =>{\r\n        this.setState({loader:true});\r\n        event.preventDefault();\r\n        let Token=localStorage.getItem(\"kyubi_user_token\");\r\n        let payload = {\r\n            user_id:Token,\r\n            auto_responder_id:this.state.auto_responder_id,\r\n            auto_responder_name:this.state.auto_responder_name,\r\n            auto_responder_keywords:this.state.auto_responder_keywords,\r\n            auto_responder_message:this.state.auto_responder_message,\r\n            auto_responder_status:this.state.auto_responder_status\r\n        }\r\n        \r\n        AutoResponderService.updateAutoResponder(payload).then(response =>{\r\n          \r\n          this.setState({loader:false});\r\n           this.props.history.push('/autoresponder');\r\n        });\r\n      }\r\n      backAutoResponderGroupHandler =  (event) =>{\r\n        \r\n          this.props.history.push('/autoresponder');\r\n       \r\n      }\r\n      componentDidMount(){\r\n        this.setState({loader:true});\r\n        let payload = { Id: this.props.match.params.idfy };\r\n        console.log(payload);\r\n        AutoResponderService.editAutoResponder(payload).then(async response=>{\r\n            console.log(response);\r\n            if(response.data.code === 1){\r\n                let newKey=\"\";\r\n                await response.data.payload[0].autoresponderkeywords.map(async (result, i) => {\r\n                    console.log(result.keywords);\r\n                    if(newKey===\"\"){\r\n                        //console.log(result);\r\n                        newKey=result.keywords\r\n                    }else{\r\n                        newKey=newKey+\",\"+result.keywords;\r\n                        \r\n                    }\r\n                });\r\n                this.setState({\r\n                    auto_responder_id:response.data.payload[0]._id,\r\n                    auto_responder_name:response.data.payload[0].auto_responder_name,\r\n                    auto_responder_message:response.data.payload[0].message,\r\n                    auto_responder_status:response.data.payload[0].status,\r\n                    auto_responder_keywords:newKey,\r\n                    loader:false\r\n                  })\r\n            }\r\n        }).catch(error=>{\r\n\r\n        })\r\n      }\r\n    render() {\r\n        return (\r\n            <div className=\"wrapper\">\r\n                {this.state.loader && (   \r\n                    <div className=\"overlay\">\r\n                    <i className=\"fas fa-2x fa-sync-alt fa-spin\"></i>\r\n                    </div>\r\n                )}\r\n                <Sidebar  selectedtab=\"setting\"></Sidebar>\r\n                <div className=\"content-wrapper\">\r\n                <section className=\"content-header\">\r\n                    <div className=\"container-fluid\">\r\n                        <div className=\"row mb-12\">\r\n                            <div className=\"col-sm-6\">\r\n                            <h1>Auto-Responder</h1>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </section>\r\n                <section className=\"content\">\r\n                    <div className=\"container-fluid\">\r\n                        <div className=\"row\">\r\n                            <div className=\"col-md-12\">\r\n                            \r\n                            <div className=\"card card-primary\">\r\n                                <div className=\"card-header\">\r\n                                    <h3 className=\"card-title\"> Create Auto-Responder</h3>\r\n                                </div>\r\n                                <form>\r\n                                <div className=\"card-body\">\r\n                                    \r\n                                    <div className=\"form-group\">\r\n                                        <label for=\"exampleInputEmail1\">Auto-Responder Name</label>\r\n                                        <input type=\"text\"\r\n                                            name=\"auto_responder_name\" \r\n                                            className=\"form-control\" \r\n                                            id=\"exampleInputEmail1\" \r\n                                            placeholder=\"Auto-Responder Name\" \r\n                                            value={this.state.auto_responder_name}\r\n                                            onChange={this.inputChangeHandller}\r\n                                        />\r\n                                    </div>\r\n                                    \r\n                                    <div className=\"form-group\">\r\n                                        <label for=\"exampleInputEmail1\">Auto-Responder Keywords</label>\r\n                                        <textarea \r\n                                        name=\"auto_responder_keywords\" \r\n                                        className=\"form-control\" \r\n                                        rows=\"3\"\r\n                                        placeholder=\"Auto-Responder Keywords  Seperated with coma Like hello,Hi,How are you\"\r\n                                        value={this.state.auto_responder_keywords}\r\n                                        onChange={this.inputChangeHandller}\r\n                                        ></textarea>\r\n                                    </div>\r\n                                    <div className=\"form-group\">\r\n                                        <label for=\"exampleInputEmail1\">Auto-Responder Response Message</label>\r\n                                        <textarea \r\n                                        name=\"auto_responder_message\" \r\n                                        value=\"\"  \r\n                                        className=\"form-control\" \r\n                                        rows=\"3\"  \r\n                                        placeholder=\"Please enter the response message....\"\r\n                                        value={this.state.auto_responder_message}\r\n                                        onChange={this.inputChangeHandller}\r\n                                        ></textarea>\r\n                                    </div>\r\n                                    <div className=\"form-group clearfix\">\r\n                                        <div className=\"icheck-success d-inline\">\r\n                                        \r\n                                        {this.state.auto_responder_status ?\r\n                                        <input type=\"checkbox\" id=\"checkboxPrimary3\" name=\"auto_responder_status\" onChange={this.autoSetting} checked/>\r\n                                        :\r\n                                        <input type=\"checkbox\" id=\"checkboxPrimary3\" name=\"auto_responder_status\" onChange={this.autoSetting}/>\r\n                                        }\r\n                                        <label for=\"checkboxPrimary3\">\r\n                                            Activate Auto-Responder\r\n                                        </label>\r\n                                        </div>\r\n                                    </div>\r\n                                    \r\n                                </div>           \r\n                                <div className=\"card-footer\">\r\n                                <button type=\"submit\" className=\"btn btn-primary\" onClick={this.updateAutoResponderGroupHandler} >Update</button>\r\n                                <button type=\"button\" className=\"btn btn-secondary  float-right\"  onClick={this.backAutoResponderGroupHandler} ><i className=\"far fa-arrow-alt-circle-left\"></i> Back</button>\r\n                                </div>\r\n                                </form>\r\n                            </div>\r\n\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </section>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default autoResponderEdit;","C:\\GrammyWammy\\front-end\\src\\config.js",[],"C:\\GrammyWammy\\front-end\\src\\services\\authService.js",[],"C:\\GrammyWammy\\front-end\\src\\services\\messageGroupService.js",["242"],"import axios from 'axios';\r\nimport { host,kyubi } from '../config';\r\nconst messageGroupService = {\r\n   \r\n    createMessageGroup: function (payload) {\r\n        // let allItems = [];\r\n        // let messageGroupItems = JSON.parse(localStorage.getItem(\"groupitems\"));\r\n        // if(messageGroupItems)\r\n        // { \r\n        //   allItems =  messageGroupItems;\r\n        //   allItems.unshift(payload); \r\n        // }\r\n        // else{\r\n        //   console.log('first time'); \r\n        //   allItems.unshift(payload);\r\n        // }\r\n        // localStorage.setItem(\"groupitems\",JSON.stringify(allItems));\r\n        // return true;\r\n        return new Promise((resolve, reject) => {\r\n          let options = {\r\n              method: 'POST',\r\n              url: host + '/api/messagegroup/create',\r\n              headers: {  'Accept': 'application/json', 'Content-Type': 'application/json' },\r\n              data: payload\r\n          }\r\n          axios(options)\r\n              .then(res => {\r\n                  console.log(\"In Success\");\r\n                  resolve(res)\r\n              })\r\n              .catch(err => {\r\n                  console.log(\"In Error\");\r\n                  reject(err)\r\n              })\r\n         })\r\n    },\r\n    updateMessageGroup: function (payload) {\r\n      \r\n      let messageGroupId = payload.message_group_id;\r\n      let allItems = JSON.parse(localStorage.getItem(\"groupitems\"));\r\n      let itemToEdit = JSON.parse(localStorage.getItem(\"groupitems\"))[messageGroupId];\r\n     \r\n      itemToEdit.message_group_name = payload.message_group_name;\r\n      itemToEdit.message_group_description = payload.message_group_description;\r\n      allItems[messageGroupId] = itemToEdit;\r\n      \r\n      localStorage.setItem(\"groupitems\",JSON.stringify(allItems));\r\n      return true;\r\n      \r\n  },\r\n  deleteMessageGroup: function (payload) {\r\n      \r\n    let messageGroupId = payload.message_group_id;\r\n    let allItems = JSON.parse(localStorage.getItem(\"groupitems\"));\r\n    allItems.splice(messageGroupId, 1);\r\n    console.log(allItems);\r\n    localStorage.setItem(\"groupitems\",JSON.stringify(allItems));\r\n    return true;\r\n   \r\n    \r\n}\r\n\r\n}\r\nexport default messageGroupService;","C:\\GrammyWammy\\front-end\\src\\services\\setting.js",["243"],"import axios from 'axios';\r\nimport { host,kyubi } from '../config';\r\n\r\nconst settingService = {\r\n    setSetting: function (payload) {\r\n        return new Promise((resolve, reject) => {\r\n            let options = {\r\n                method: 'POST',\r\n                url: host + '/api/setting/setsetting',\r\n                headers: {  'Accept': 'application/json', 'Content-Type': 'application/json' },\r\n                data: payload\r\n            }\r\n            axios(options)\r\n                .then(res => {\r\n                    console.log(\"In Success\");\r\n                    resolve(res)\r\n                })\r\n                .catch(err => {\r\n                    console.log(\"In Error\");\r\n                    reject(err)\r\n                })\r\n        })\r\n    },\r\n    getSetting: function (payload) {\r\n        return new Promise((resolve, reject) => {\r\n            let options = {\r\n                method: 'POST',\r\n                url: host + '/api/setting/getSetting',\r\n                headers: {  'Accept': 'application/json', 'Content-Type': 'application/json' },\r\n                data: payload\r\n            }\r\n            axios(options)\r\n                .then(res => {\r\n                    console.log(\"In Success\");\r\n                    resolve(res)\r\n                })\r\n                .catch(err => {\r\n                    console.log(\"In Error\");\r\n                    reject(err)\r\n                })\r\n        })\r\n    },\r\n    updateAutoresponderSetting: function (payload) {\r\n        return new Promise((resolve, reject) => {\r\n            let options = {\r\n                method: 'POST',\r\n                url: host + '/api/setting/updateautoresponder',\r\n                headers: {  'Accept': 'application/json', 'Content-Type': 'application/json' },\r\n                data: payload\r\n            }\r\n            axios(options)\r\n                .then(res => {\r\n                    console.log(\"In Success\");\r\n                    resolve(res)\r\n                })\r\n                .catch(err => {\r\n                    console.log(\"In Error\");\r\n                    reject(err)\r\n                })\r\n        })\r\n    },\r\n    getUserDetails: function    (payload)   {\r\n        return new Promise((resolve, reject) => {\r\n            let options = {\r\n                method: 'POST',\r\n                url: host + '/api/setting/getUserDetails',\r\n                headers: {  'Accept': 'application/json', 'Content-Type': 'application/json' },\r\n                data: payload\r\n            }\r\n            axios(options)\r\n                .then(res => {\r\n                    console.log(\"In Success\");\r\n                    resolve(res)\r\n                })\r\n                .catch(err => {\r\n                    console.log(\"In Error\");\r\n                    reject(err)\r\n                })\r\n        })\r\n    },\r\n    updateLoadStatus: function   (payload)   {\r\n        return new Promise((resolve, reject) => {\r\n            let options = {\r\n                method: 'POST',\r\n                url: host + '/api/setting/updateLoadStatus',\r\n                headers: {  'Accept': 'application/json', 'Content-Type': 'application/json' },\r\n                data: payload\r\n            }\r\n            axios(options)\r\n                .then(res => {\r\n                    console.log(\"In Success\");\r\n                    resolve(res)\r\n                })\r\n                .catch(err => {\r\n                    console.log(\"In Error\");\r\n                    reject(err)\r\n                })\r\n        })\r\n    }\r\n    \r\n}\r\n\r\nexport default settingService;","C:\\GrammyWammy\\front-end\\src\\services\\autoResponderServices.js",["244"],"import axios from 'axios';\r\nimport { host,kyubi } from '../config';\r\n\r\nconst autoResponderServices = {\r\n    createAutoResponder: function (payload) {\r\n        return new Promise((resolve, reject) => {\r\n            let options = {\r\n                method: 'POST',\r\n                url: host + '/api/autoresponder/create',\r\n                headers: {  'Accept': 'application/json', 'Content-Type': 'application/json' },\r\n                data: payload\r\n            }\r\n            axios(options)\r\n                .then(res => {\r\n                    console.log(\"In Success\");\r\n                    resolve(res)\r\n                })\r\n                .catch(err => {\r\n                    console.log(\"In Error\");\r\n                    reject(err)\r\n                })\r\n        })\r\n    },\r\n    listAutoResponder: function (payload) {\r\n        return new Promise((resolve, reject) => {\r\n            let options = {\r\n                method: 'POST',\r\n                url: host + '/api/autoresponder/list',\r\n                headers: {  'Accept': 'application/json', 'Content-Type': 'application/json' },\r\n                data: payload\r\n            }\r\n            axios(options)\r\n                .then(res => {\r\n                    console.log(\"In Success\");\r\n                    resolve(res)\r\n                })\r\n                .catch(err => {\r\n                    console.log(\"In Error\");\r\n                    reject(err)\r\n                })\r\n        })\r\n    },\r\n    editAutoResponder: function (payload) {\r\n        return new Promise((resolve, reject) => {\r\n            let options = {\r\n                method: 'POST',\r\n                url: host + '/api/autoresponder/edit',\r\n                headers: {  'Accept': 'application/json', 'Content-Type': 'application/json' },\r\n                data: payload\r\n            }\r\n            axios(options)\r\n                .then(res => {\r\n                    console.log(\"In Success\");\r\n                    resolve(res)\r\n                })\r\n                .catch(err => {\r\n                    console.log(\"In Error\");\r\n                    reject(err)\r\n                })\r\n        })\r\n    },\r\n    updateAutoResponder: function (payload) {\r\n        return new Promise((resolve, reject) => {\r\n            let options = {\r\n                method: 'POST',\r\n                url: host + '/api/autoresponder/update',\r\n                headers: {  'Accept': 'application/json', 'Content-Type': 'application/json' },\r\n                data: payload\r\n            }\r\n            axios(options)\r\n                .then(res => {\r\n                    console.log(\"In Success\");\r\n                    resolve(res)\r\n                })\r\n                .catch(err => {\r\n                    console.log(\"In Error\");\r\n                    reject(err)\r\n                })\r\n        })\r\n    },\r\n    updateAutoResponderStatus: function (payload) {\r\n        return new Promise((resolve, reject) => {\r\n            let options = {\r\n                method: 'POST',\r\n                url: host + '/api/autoresponder/updateStatus',\r\n                headers: {  'Accept': 'application/json', 'Content-Type': 'application/json' },\r\n                data: payload\r\n            }\r\n            axios(options)\r\n                .then(res => {\r\n                    console.log(\"In Success\");\r\n                    resolve(res)\r\n                })\r\n                .catch(err => {\r\n                    console.log(\"In Error\");\r\n                    reject(err)\r\n                })\r\n        })\r\n    },\r\n    deleteAutoResponderStatus: function (payload) {\r\n        return new Promise((resolve, reject) => {\r\n            let options = {\r\n                method: 'POST',\r\n                url: host + '/api/autoresponder/delete',\r\n                headers: {  'Accept': 'application/json', 'Content-Type': 'application/json' },\r\n                data: payload\r\n            }\r\n            axios(options)\r\n                .then(res => {\r\n                    console.log(\"In Success\");\r\n                    resolve(res)\r\n                })\r\n                .catch(err => {\r\n                    console.log(\"In Error\");\r\n                    reject(err)\r\n                })\r\n        })\r\n    },\r\n}\r\nexport default autoResponderServices;","C:\\GrammyWammy\\front-end\\src\\helper\\loginHelper.js",[],"C:\\GrammyWammy\\front-end\\src\\helper\\helper.js",[],"C:\\GrammyWammy\\front-end\\src\\components\\modules\\Common\\sidebar.js",["245","246","247","248"],"import React, { Component } from \"react\";\r\nimport logo from \"../../../image/Logo_Side.png\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport {Animated} from \"react-animated-css\";\r\nclass sidebar extends Component {\r\n    constructor(props) {\r\n      super(props)\r\n      this.state = {\r\n        selected:this.props.selectedtab,\r\n        openSidebar:false,\r\n        \r\n      }\r\n    }\r\n    HideMenu = (event) => {\r\n      event.preventDefault();\r\n      //console.log(this.props.shownav);\r\n      this.setState({\r\n        openSidebar:false\r\n      })\r\n    }\r\n    ShowMenu = (event) => {\r\n      event.preventDefault();\r\n      //console.log(this.props.shownav);\r\n      this.setState({\r\n        openSidebar:true\r\n      })\r\n    }\r\n    componentDidMount(){\r\n        //console.log(this.props.shownav);\r\n    }\r\n    render() {\r\n        return (\r\n        <div>\r\n          <nav className=\"main-header navbar navbar-expand  navbar-dark\">\r\n              <ul className=\"navbar-nav\">\r\n                <li className=\"nav-item\">\r\n                  <a className=\"nav-link\" onClick={this.ShowMenu} data-widget=\"pushmenu\" href=\"#\" role=\"button\">\r\n                    <i className=\"fas fa-bars\"></i>\r\n                  </a>\r\n                </li>\r\n              </ul>\r\n          </nav>\r\n        {this.state.openSidebar ?\r\n                      \r\n                      <div className=\"main-sidebar sidebar-light-primary elevation-4 sidebar-no-expand\" id=\"navbarMenu\">\r\n              \r\n                      <a href=\"\" onClick={this.HideMenu} ><div className=\"crossbox\"><i class=\"fas fa-times\"></i></div></a>\r\n                      \r\n                        <NavLink  to=\"/dashboard\" className=\"brand-link\">\r\n                        \r\n                          <img  src={logo} className=\"Brandlogo\"></img>\r\n                        \r\n                        </NavLink>\r\n                        <div className=\"sidebar\">\r\n                          <nav className=\"mt-2\">\r\n                            <ul className=\"nav nav-pills nav-sidebar flex-column\" data-widget=\"treeview\" role=\"menu\" data-accordion=\"false\">\r\n                              <li className=\"nav-item\">\r\n                                  <NavLink  to=\"/dashboard\" className=\"nav-link\">\r\n                                    <i className=\"nav-icon fas fa-tachometer-alt\"></i>\r\n                                    <p>\r\n                                      Dashboard\r\n                                    </p>\r\n                                  </NavLink>\r\n                              </li>\r\n                              <li className=\"nav-item\">\r\n                                  <NavLink  to=\"/setting\" className=\"nav-link\">\r\n                                    <i className=\"nav-icon fas fa-cogs\"></i>\r\n                                    <p>\r\n                                      Setting\r\n                                    </p>\r\n                                  </NavLink>\r\n                              </li>  \r\n                              <li className=\"nav-item\">\r\n                                  <NavLink  to=\"/autoresponder\" className=\"nav-link\">\r\n                                    <i className=\"nav-icon fas fa-magic\"></i>\r\n                                    <p>\r\n                                      Auto-Responder\r\n                                    </p>\r\n                                  </NavLink>\r\n                              </li>\r\n                              \r\n                              <li className=\"nav-item\">\r\n                                  <NavLink  to=\"/logout\" className=\"nav-link\">\r\n                                    <i className=\"nav-icon fas fa-sign-out-alt\"></i>\r\n                                    <p>\r\n                                      Logout\r\n                                    </p>\r\n                                  </NavLink>\r\n                              </li>\r\n                            </ul>\r\n                          </nav>\r\n                        </div>\r\n                      </div>\r\n                   \r\n        :\r\n        \"\"\r\n        }\r\n        </div>\r\n          \r\n         \r\n\r\n          \r\n        );\r\n    }\r\n}\r\n\r\nexport default sidebar;","C:\\GrammyWammy\\front-end\\src\\components\\modules\\Setting\\ResponseSetting\\responseSetting.js",["249","250","251","252","253","254"],"import React, { Component } from \"react\";\r\nimport AutoResponder from \"../ResponseSetting/IndividualComponents/autoResponder\";\r\nimport DefaultMessage from \"../ResponseSetting/IndividualComponents/defaultMessage\";\r\nclass responseSetting extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n          autoResponsederSetting:1,\r\n          \r\n          DefaultMessageSetting:0,\r\n          \r\n          loader:false\r\n        }\r\n      }\r\n      activateAutoResponder  = async (event) =>  {\r\n        event.preventDefault();\r\n        this.setState({\r\n            autoResponsederSetting:1,\r\n            DefaultMessageSetting:0\r\n        })\r\n        \r\n      }\r\n      activateDefaultMessage  = async (event) =>  {\r\n        event.preventDefault();\r\n        this.setState({\r\n            autoResponsederSetting:0,\r\n            DefaultMessageSetting:1\r\n        })\r\n        \r\n      }\r\n      render() {\r\n        return (\r\n            <div id=\"tabResponse\" className=\"maintabcontent\">\r\n                <ul class=\"subtab\">\r\n                  <li>\r\n                    <a href=\"#\" onClick={this.activateAutoResponder} className={this.state.autoResponsederSetting ?\"active\":\"\"} id=\"autoResponder\">\r\n                    {this.state.autoResponsederSetting ?<img src=\"images/icon1a.svg\" className=\"active\"/>:<img src=\"images/icon1b.svg\" className=\"inactive\"/>}\r\n                    Auto Responder</a>\r\n                  </li>\r\n                  <li>\r\n                    <a href=\"#\" onClick={this.activateDefaultMessage} id=\"defaultMessage\" className={this.state.DefaultMessageSetting ?\"active\":\"\"}>\r\n                    {this.state.DefaultMessageSetting ?<img src=\"images/icon2b.svg\" className=\"active\"/>:<img src=\"images/icon2a.svg\" className=\"inactive\"/>}\r\n                    Default Message</a>\r\n                  </li>\r\n                </ul>\r\n                {this.state.autoResponsederSetting ?\r\n                  <AutoResponder></AutoResponder>\r\n                :\r\n                  <DefaultMessage></DefaultMessage>\r\n                }\r\n            </div>          \r\n        )\r\n      }\r\n}\r\nexport default responseSetting;","C:\\GrammyWammy\\front-end\\src\\components\\modules\\Setting\\DefaultMessageSettings\\defaultMessageSettings.js",["255","256","257","258","259","260"],"import React, { Component } from \"react\";\r\nimport SegmentActiveLogo from  \"../../../../images/icon2b.svg\";\r\nimport SegmentInActiveLogo from  \"../../../../images/icon2a.svg\";\r\nimport GroupActiveLogo from  \"../../../../images/icon3b.svg\";\r\nimport GroupInActiveLogo from  \"../../../../images/icon3a.svg\";\r\nimport GroupSection from  \"../DefaultMessageSettings/IndividualComponents/group\";\r\nimport SegmentSection from  \"../DefaultMessageSettings/IndividualComponents/segment\";\r\nclass defaultMessageSettings extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n          Segment:1,\r\n          Group:0,\r\n          \r\n          loader:false\r\n        }\r\n      }\r\n      activateSegment  = async (event) =>  {\r\n        event.preventDefault();\r\n        this.setState({\r\n            Segment:1,\r\n            Group:0\r\n        })\r\n        \r\n      }\r\n      activateGroup  = async (event) =>  {\r\n        event.preventDefault();\r\n        this.setState({\r\n            Segment:0,\r\n            Group:1\r\n        })\r\n        \r\n      }\r\n      render() {\r\n        return (\r\n            <div id=\"tabResponse\" className=\"maintabcontent\">\r\n                <ul class=\"subtab\">\r\n                  <li>\r\n                    <a href=\"#\" onClick={this.activateSegment} className={this.state.Segment ?\"active\":\"\"}>\r\n                    {this.state.Segment ?\r\n                    <img src={SegmentActiveLogo} className=\"active\"/>\r\n                    :\r\n                    <img src={SegmentInActiveLogo} className=\"inactive\"/>\r\n                    }\r\n                    Segments</a>\r\n                  </li>\r\n                  <li>\r\n                    <a href=\"#\" onClick={this.activateGroup} id=\"defaultMessage\" className={this.state.Group ?\"active\":\"\"}>\r\n                    {this.state.Group ?\r\n                    <img src={GroupActiveLogo} className=\"active\"/>\r\n                    :\r\n                    <img src={GroupInActiveLogo} className=\"inactive\"/>\r\n                    }\r\n                    Groups</a>\r\n                  </li>\r\n                </ul>\r\n                {this.state.Segment ?\r\n                  <SegmentSection></SegmentSection>\r\n                :\r\n                  <GroupSection></GroupSection>\r\n                }\r\n            </div>)\r\n      }\r\n}\r\nexport default defaultMessageSettings;","C:\\GrammyWammy\\front-end\\src\\components\\modules\\Setting\\ResponseSetting\\IndividualComponents\\autoResponder.js",["261","262","263","264","265","266","267","268","269","270","271","272","273","274","275","276","277","278","279","280","281","282"],"import React, { Component } from \"react\";\r\nimport plusLogo from  \"../../../../../images/plus.svg\";\r\nimport editLogo from  \"../../../../../images/edit.svg\";\r\nimport deleteLogo from  \"../../../../../images/delete.svg\";\r\nimport EmptyFileLogo from \"../../../../../images/empty_file.svg\";\r\nimport AutoResponderService from  \"../../../../../services/autoResponderServices\";\r\nimport { WithContext as ReactTags } from 'react-tag-input';\r\nconst KeyCodes = {\r\n    comma: 188,\r\n    enter: 13,\r\n  };\r\n  \r\nconst delimiters = [KeyCodes.comma, KeyCodes.enter];\r\nclass responseSetting extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n          autoResponsederList:1,\r\n          autoResponsederCreate:0,\r\n          autoResponsederEdit:0,\r\n          autoresponderListValue:[],\r\n          auto_responder_name:\"\",\r\n          auto_responder_keywords: [],\r\n          auto_responder_message:\"\",\r\n          auto_responder_status:1,\r\n\r\n            auto_responder_id_edit:\"\",\r\n            auto_responder_name_edit:\"\",\r\n            auto_responder_message_edit:\"\",\r\n            auto_responder_status_edit:1,\r\n            auto_responder_keywords_edits:[]\r\n        }\r\n        this.handleDelete = this.handleDelete.bind(this);\r\n        this.handleAddition = this.handleAddition.bind(this);\r\n\r\n        this.handleEditDelete = this.handleEditDelete.bind(this);\r\n        this.handleEditAddition = this.handleEditAddition.bind(this);\r\n    }\r\n    autoSetting = () => {\r\n        console.log(\"hiyy\",this.state.auto_responder_status )\r\n        if(this.state.auto_responder_status === 0){\r\n            this.setState({auto_responder_status:1})\r\n        }else{\r\n            this.setState({auto_responder_status:0})\r\n        }\r\n    }\r\n    autoSettingEdit = () => {\r\n        console.log(\"hiyy\",this.state.auto_responder_status_edit )\r\n        if(this.state.auto_responder_status_edit === 0){\r\n            this.setState({auto_responder_status_edit:1})\r\n        }else{\r\n            this.setState({auto_responder_status_edit:0})\r\n        }\r\n    }\r\n\r\n    handleDelete(i) {\r\n        const { auto_responder_keywords } = this.state;\r\n        this.setState({\r\n            auto_responder_keywords: auto_responder_keywords.filter((auto_responder_keyword, index) => index !== i),\r\n        });\r\n    }\r\n    handleEditDelete(i) {\r\n        const { auto_responder_keywords_edits } = this.state;\r\n        this.setState({\r\n            auto_responder_keywords_edits: auto_responder_keywords_edits.filter((auto_responder_keywords_edit, index) => index !== i),\r\n        });\r\n    }\r\n    handleAddition(auto_responder_keyword) {\r\n        this.setState(state => ({ auto_responder_keywords: [...state.auto_responder_keywords, auto_responder_keyword] }));\r\n    }\r\n    handleEditAddition(auto_responder_keywords_edit) {\r\n        this.setState(state => ({ auto_responder_keywords_edits: [...state.auto_responder_keywords_edits, auto_responder_keywords_edit] }));\r\n    }\r\n    addAutoResponderHandler  = async (event) =>  {\r\n    event.preventDefault();\r\n    this.setState({\r\n        autoResponsederList:0,\r\n        autoResponsederCreate:1,\r\n        autoResponsederEdit:0\r\n    })\r\n    \r\n    }\r\n    /**\r\n     * @insertTagAtMessageSegments\r\n     * in this function we are managing the tag in welcome message area\r\n    */\r\n    insertTagAtMessageSegments(areaId, text) {\r\n        console.log(\"Yo\");\r\n        var txtarea = document.getElementById(areaId);\r\n        if (!txtarea) {\r\n        return;\r\n        }\r\n        // if (txtarea.value.length < 188) {\r\n        var scrollPos = txtarea.scrollTop;\r\n        var strPos = 0;\r\n        var br = ((txtarea.selectionStart || txtarea.selectionStart == '0') ?\r\n        \"ff\" : (document.selection ? \"ie\" : false));\r\n        if (br == \"ie\") {\r\n        txtarea.focus();\r\n        var range = document.selection.createRange();\r\n        range.moveStart('character', -txtarea.value.length);\r\n        strPos = range.text.length;\r\n        } else if (br == \"ff\") {\r\n        strPos = txtarea.selectionStart;\r\n        }\r\n        var front = (txtarea.value).substring(0, strPos);\r\n        var back = (txtarea.value).substring(strPos, txtarea.value.length);\r\n        txtarea.value = front + text + back;\r\n        strPos = strPos + text.length;\r\n        let WelcomeMessage = txtarea.value;\r\n        WelcomeMessage = WelcomeMessage.replace(/{first_name}/g, \"\");\r\n        WelcomeMessage = WelcomeMessage.replace(/{last_name}/g, \"\");\r\n        WelcomeMessage = WelcomeMessage.replace(/{date}/g, \"\");\r\n        WelcomeMessage = WelcomeMessage.replace(/{date_time}/g, \"\");\r\n        //console.log(\"This is the message ========\",WelcomeMessage);\r\n        if(areaId == \"auto_responder_message\"){\r\n            this.setState({ auto_responder_message: txtarea.value});\r\n        }else{\r\n            this.setState({ auto_responder_message_edit: txtarea.value});\r\n        }\r\n        \r\n        // this.setState({ welcomeContent: txtarea.value, welcomeTextLengthCount: txtarea.value });\r\n        if (br == \"ie\") {\r\n        txtarea.focus();\r\n        var ieRange = document.selection.createRange();\r\n        ieRange.moveStart('character', -txtarea.value.length);\r\n        ieRange.moveStart('character', strPos);\r\n        ieRange.moveEnd('character', 0);\r\n        ieRange.select();\r\n        } else if (br == \"ff\") {\r\n        txtarea.selectionStart = strPos;\r\n        txtarea.selectionEnd = strPos;\r\n        txtarea.focus();\r\n        }\r\n        txtarea.scrollTop = scrollPos;\r\n        // }\r\n    }\r\n     /**\r\n        * @inputChangeHandller \r\n        * getting input field values\r\n    */\r\n    inputChangeHandller = (event) => {\r\n        this.setState({ [event.target.name]: event.target.value })\r\n    }\r\n    createAutoResponderGroupHandler =  (event) =>{\r\n        event.preventDefault();\r\n        let Token=localStorage.getItem(\"kyubi_user_token\");\r\n        let payload = {\r\n            user_id:Token,\r\n            auto_responder_name:this.state.auto_responder_name,\r\n            auto_responder_keywords:this.state.auto_responder_keywords,\r\n            auto_responder_message:this.state.auto_responder_message,\r\n            auto_responder_status:this.state.auto_responder_status\r\n        }\r\n      \r\n         AutoResponderService.createAutoResponder(payload).then(response =>{\r\n            console.log(\"This I gottttt\",payload);\r\n          if(response.data.code == 1){\r\n            let UserTokenNew=localStorage.getItem(\"kyubi_user_token\");\r\n            let payloadNew ={\r\n                user_id:UserTokenNew\r\n            }\r\n            AutoResponderService.listAutoResponder(payloadNew).then(async responsex =>{\r\n                if(responsex.data.payload !=  \"\" ){\r\n                    console.log(\"This is what i Got\",responsex.data.payload);\r\n                    if(responsex.data.payload.autokey.length>0){\r\n                        console.log(\"This is what i Got\",responsex.data.payload.autokey);\r\n                        this.setState({\r\n                                        autoresponderListValue:responsex.data.payload.autokey,\r\n                                        autoResponsederList:1,\r\n                                        autoResponsederCreate:0,\r\n                                        autoResponsederEdit:0,\r\n                                        auto_responder_name:\"\",\r\n                                        auto_responder_keywords: [],\r\n                                        auto_responder_message:\"\",\r\n                                        auto_responder_status:1,\r\n                        })\r\n                    }\r\n                  }\r\n            })\r\n          }\r\n          console.log(\"This Is I Got ====== \",response);\r\n        });\r\n    }\r\n    createAutoResponderGroupHandlerEdit =  (event) =>{\r\n        event.preventDefault();\r\n        let Token=localStorage.getItem(\"kyubi_user_token\");\r\n        let payload = {\r\n            user_id:Token,\r\n            auto_responder_id:this.state.auto_responder_id_edit,\r\n            auto_responder_name:this.state.auto_responder_name_edit,\r\n            auto_responder_keywords:this.state.auto_responder_keywords_edits,\r\n            auto_responder_message:this.state.auto_responder_message_edit,\r\n            auto_responder_status:this.state.auto_responder_status_edit\r\n        }\r\n        console.log(\"This I am Getting\",payload)\r\n      \r\n        AutoResponderService.updateAutoResponder(payload).then(response =>{\r\n            console.log(\"This I gottttt\",payload);\r\n          if(response.data.code == 1){\r\n            let UserTokenNew=localStorage.getItem(\"kyubi_user_token\");\r\n            let payloadNew ={\r\n                user_id:UserTokenNew\r\n            }\r\n            AutoResponderService.listAutoResponder(payloadNew).then(async responsex =>{\r\n                if(responsex.data.payload !=  \"\" ){\r\n                    console.log(\"This is what i Got\",responsex.data.payload);\r\n                    if(responsex.data.payload.autokey.length>0){\r\n                        console.log(\"This is what i Got\",responsex.data.payload.autokey);\r\n                        this.setState({\r\n                                        autoresponderListValue:responsex.data.payload.autokey,\r\n                                        autoResponsederList:1,\r\n                                        autoResponsederCreate:0,\r\n                                        autoResponsederEdit:0,\r\n                                        auto_responder_id_edit:\"\",\r\n                                        auto_responder_name_edit:\"\",\r\n                                        auto_responder_keywords_edits:[],\r\n                                        auto_responder_message_edit:\"\",\r\n                                        auto_responder_status_edit:1\r\n                        })\r\n                    }\r\n                  }\r\n            })\r\n          }\r\n          console.log(\"This Is I Got ====== \",response);\r\n        });\r\n    }\r\n    editAutoResponder(autoresponder_id,event){\r\n        event.preventDefault();\r\n        let payload = { \r\n            Id: autoresponder_id \r\n        }; \r\n        AutoResponderService.editAutoResponder(payload).then(async response=>{\r\n            console.log(\"O)OO)O)O\",response);\r\n            if(response.data.code === 1){\r\n                let newKey=[];\r\n                await response.data.payload[0].autoresponderkeywords.map(async (result, i) => {\r\n                    console.log(result.keywords);\r\n                    newKey.push({\"id\":result.keywords,\"text\":result.keywords})\r\n                });\r\n                this.setState({\r\n                    auto_responder_id_edit:response.data.payload[0]._id,\r\n                    auto_responder_name_edit:response.data.payload[0].auto_responder_name,\r\n                    auto_responder_message_edit:response.data.payload[0].message,\r\n                    auto_responder_status_edit:response.data.payload[0].status,\r\n                    auto_responder_keywords_edits:newKey,\r\n                    autoResponsederList:0,\r\n                    autoResponsederCreate:0,\r\n                    autoResponsederEdit:1\r\n                  })\r\n            }\r\n        }).catch(error=>{\r\n\r\n        })\r\n    }\r\n    editAutoResponderStatus(autoresponder_id,prestatus){\r\n        let status =1;\r\n        if(prestatus == 1){\r\n            status=0;\r\n        }else{\r\n            status=1;\r\n        }\r\n        let payload = {\r\n            autoresponder_id:autoresponder_id,\r\n            status:status\r\n        };\r\n        console.log(\"This is a Seeeee====>\",payload);\r\n        AutoResponderService.updateAutoResponderStatus(payload).then(response =>{\r\n            console.log(\"This I gottttt\",payload);\r\n          if(response.data.code == 1){\r\n            let UserTokenNew=localStorage.getItem(\"kyubi_user_token\");\r\n            let payloadNew ={\r\n                user_id:UserTokenNew\r\n            }\r\n            AutoResponderService.listAutoResponder(payloadNew).then(async responsex =>{\r\n                if(responsex.data.payload !=  \"\" ){\r\n                    console.log(\"This is what i Got\",responsex.data.payload);\r\n                    if(responsex.data.payload.autokey.length>0){\r\n                        console.log(\"This is what i Got\",responsex.data.payload.autokey);\r\n                        this.setState({\r\n                                        autoresponderListValue:responsex.data.payload.autokey,\r\n                                        autoResponsederList:1,\r\n                                        autoResponsederCreate:0,\r\n                                        autoResponsederEdit:0,\r\n                                        \r\n                        })\r\n                    }\r\n                  }\r\n            })\r\n          }\r\n          console.log(\"This Is I Got ====== \",response);\r\n        });\r\n    }\r\n    deleteAutoResponder(autoresponder_id,event){\r\n        event.preventDefault();\r\n        let user_id=localStorage.getItem(\"user_id\");\r\n        let payload = { \r\n            Id: autoresponder_id ,\r\n            user_id:user_id\r\n        }; \r\n        console.log(\"O)OO)O)O\",payload);\r\n        AutoResponderService.deleteAutoResponderStatus(payload).then(response =>{\r\n            console.log(\"This I gottttt\",payload);\r\n          if(response.data.code == 1){\r\n            let UserTokenNew=localStorage.getItem(\"kyubi_user_token\");\r\n            let payloadNew ={\r\n                user_id:UserTokenNew\r\n            }\r\n            AutoResponderService.listAutoResponder(payloadNew).then(async responsex =>{\r\n                if(responsex.data.payload !=  \"\" ){\r\n                        this.setState({\r\n                                        autoresponderListValue:responsex.data.payload.autokey,\r\n                                        autoResponsederList:1,\r\n                                        autoResponsederCreate:0,\r\n                                        autoResponsederEdit:0,\r\n                                        \r\n                        })\r\n                  }\r\n            })\r\n          }\r\n          console.log(\"This Is I Got ====== \",response);\r\n        });\r\n    }\r\n    componentDidMount(){\r\n        let UserToken=localStorage.getItem(\"kyubi_user_token\");\r\n        //this.setState({autoresponderList:autoresponderList})\r\n        let payload ={\r\n            user_id:UserToken\r\n        }\r\n        AutoResponderService.listAutoResponder(payload).then(async response =>{\r\n            console.log(\"This is what i Got\",response);\r\n            \r\n          if(response.data.payload !=  \"\" ){\r\n            console.log(\"This is what i Got\",response.data.payload);\r\n            if(response.data.payload.autokey.length>0){\r\n                console.log(\"This is what i Got\",response.data.payload.autokey);\r\n                this.setState({autoresponderListValue:response.data.payload.autokey})\r\n            }\r\n            \r\n          }\r\n        }).catch(error=>{\r\n            //this.setState({loader:false});\r\n            this.setState({autoresponderListValue:[]})\r\n        });\r\n    }\r\n      render() {\r\n        const { auto_responder_keywords,auto_responder_keywords_edits } = this.state;\r\n        return (\r\n        <div>\r\n                {this.state.autoResponsederList ?\r\n                \r\n                <div id=\"tabautoResponder\" className=\"subtabcontent\">\r\n                    { this.state.autoresponderListValue.length != 0 ?\r\n\r\n                        <div>\r\n                            <div className=\"headding\">\r\n                                <span>Auto Responder Lists</span> <a href=\"\" onClick={this.addAutoResponderHandler} className=\"createbtn\"><img alt=\"\" src={plusLogo}/> Create New</a>\r\n                            </div>\r\n                            {this.state.autoresponderListValue.map((data, i) => {\r\n                                return(\r\n                                    <div className={data.status === 1  ?  \"listing_card\" :\"listing_card inactive\"}>\r\n                                        <div className=\"head\">\r\n                                            <div className=\"txt\">{data.auto_responder_name}</div>\r\n                                            <div className=\"action\">\r\n                                                <label className=\"switch_box box_2\">\r\n                                                <input type=\"checkbox\" onChange={() => this.editAutoResponderStatus(data._id,data.status)} className=\"switch_2\" id=\"\" name=\"\" checked={data.status === 1  ?  \"checked\" :\"\"}  />\r\n                                                <div className=\"toogler\"></div>\r\n                                                </label>\r\n                                                <a href=\"#\" onClick={(event) => this.editAutoResponder(data._id,event)} ><img src={editLogo} alt=\"\"/></a> \r\n                                                <a href=\"#\"  onClick={(event) => this.deleteAutoResponder(data._id,event)} ><img src={deleteLogo} alt=\"\"/></a>\r\n                                            </div>\r\n                                        </div>\r\n                                        <div className=\"body\">\r\n                                                <p className=\"qn\">{data.message}</p>\r\n                                            <div className=\"listfooter\">\r\n                                                <p>Keywords:</p>\r\n                                                {   data.autoresponderkeywords.map((result, i) => {\r\n                                                        return (\r\n                                                            <span class=\"tags\">{result.keywords}</span>\r\n                                                        )\r\n                                                    })\r\n                                                }\r\n                                                \r\n                                            </div>\r\n                                        </div>\r\n                                        \r\n                                    </div>\r\n                                )\r\n                            })}\r\n                        </div>\r\n                            \r\n                    :\r\n                    <div className=\"list_no_record\">\r\n                        <img src={EmptyFileLogo} alt=\"\"/>\r\n                        <p>You haven’t created any Auto Responder yet.</p>\r\n                        <a href=\"\" onClick={this.addAutoResponderHandler} className=\"createbtn\"><img src={plusLogo} alt=\"\"/> Create New</a>\r\n                    </div>\r\n                    }\r\n                </div> \r\n                :\r\n                \"\"\r\n                }\r\n                {this.state.autoResponsederCreate ?\r\n                <div id=\"tabautoResponder\" className=\"subtabcontent\">\r\n                    <form>\r\n                        <label>\r\n                            Auto Responder Name\r\n                        </label>\r\n                            <input type=\"text\" \r\n                            name=\"auto_responder_name\" \r\n                            id=\"auto_responder_name\" \r\n                            placeholder=\"Auto-Responder Name\" \r\n                            value={this.state.auto_responder_name}\r\n                            onChange={this.inputChangeHandller}/>\r\n                        <label>\r\n                            Keywords\r\n                        </label>\r\n                            <ReactTags \r\n                            placeholder=\"Press enter Or Press , to Create Autoresponder Keywords\"\r\n                            tags={auto_responder_keywords}\r\n                            handleDelete={this.handleDelete}\r\n                            handleAddition={this.handleAddition}\r\n                            allowUnique={true}\r\n                            delimiters={delimiters} />\r\n                            \r\n                        <label>Auto Response Message</label>\r\n                            <textarea className=\"withtag\" \r\n                            name=\"auto_responder_message\"\r\n                            id=\"auto_responder_message\"\r\n                            rows=\"3\"  \r\n                            placeholder=\"Please enter the response message....\"\r\n                            value={this.state.auto_responder_message}\r\n                            onChange={this.inputChangeHandller}\r\n                            ></textarea>\r\n                            <button type=\"button\" onClick={() => this.insertTagAtMessageSegments('auto_responder_message', '{first_name}')} className=\"formtag\">[ First Name ]</button> \r\n                            <button type=\"button\" onClick={() => this.insertTagAtMessageSegments('auto_responder_message', '{last_name}')} class=\"formtag\">[ Last Name ]</button>\r\n                            <button type=\"button\" onClick={() => this.insertTagAtMessageSegments('auto_responder_message', '{date}')} class=\"formtag\">[ Todays Date ]</button>\r\n\r\n\r\n                            \r\n                        <label>\r\n                            {this.state.auto_responder_status ?\r\n                                <input className=\"checking\" type=\"checkbox\" id=\"checkboxPrimary3\" name=\"auto_responder_status\" onChange={this.autoSetting} checked/>\r\n                            :\r\n                                <input className=\"checking\" type=\"checkbox\" id=\"checkboxPrimary3\" name=\"auto_responder_status\" onChange={this.autoSetting}/>\r\n                            }\r\n                            Activate this Auto Responder\r\n                        </label>\r\n    \r\n                        <button className=\"blue_btn\" onClick={this.createAutoResponderGroupHandler} type=\"submit\">Save Auto Responder</button>\r\n                    </form>\r\n                </div>\r\n                :\r\n                \"\"\r\n                }\r\n                {this.state.autoResponsederEdit?\r\n                <div id=\"tabautoResponder\" className=\"subtabcontent\">\r\n                    <form>\r\n                        <label>\r\n                            Auto Responder Name\r\n                        </label>\r\n                            <input type=\"text\" \r\n                            name=\"auto_responder_name_edit\" \r\n                            id=\"auto_responder_name_edit\" \r\n                            placeholder=\"Auto-Responder Name\" \r\n                            value={this.state.auto_responder_name_edit}\r\n                            onChange={this.inputChangeHandller}/>\r\n                        <label>\r\n                            Keywords\r\n                        </label>\r\n                            <ReactTags \r\n                            placeholder=\"Press enter Or Press , to Create Autoresponder Keywords\"\r\n                            tags={auto_responder_keywords_edits}\r\n                            handleDelete={this.handleEditDelete}\r\n                            handleAddition={this.handleEditAddition}\r\n                            allowUnique={true}\r\n                            delimiters={delimiters} />\r\n                        \r\n                        <label>Auto Response Message</label>\r\n                            <textarea className=\"withtag\" \r\n                            name=\"auto_responder_message_edit\"\r\n                            id=\"auto_responder_message_edit\"\r\n                            rows=\"3\"  \r\n                            placeholder=\"Please enter the response message....\"\r\n                            value={this.state.auto_responder_message_edit}\r\n                            onChange={this.inputChangeHandller}\r\n                            ></textarea>\r\n                            <button type=\"button\" onClick={() => this.insertTagAtMessageSegments('auto_responder_message_edit', '{first_name}')} className=\"formtag\">[ First Name ]</button> \r\n                            <button type=\"button\" onClick={() => this.insertTagAtMessageSegments('auto_responder_message_edit', '{last_name}')} class=\"formtag\">[ Last Name ]</button>\r\n                            <button type=\"button\" onClick={() => this.insertTagAtMessageSegments('auto_responder_message_edit', '{date}')} class=\"formtag\">[ Todays Date ]</button>\r\n\r\n                        <label>\r\n                            {this.state.auto_responder_status_edit ?\r\n                                <input className=\"checking\" type=\"checkbox\" id=\"checkboxPrimary3\" name=\"auto_responder_status_edit\" onChange={this.autoSettingEdit} checked/>\r\n                            :\r\n                                <input className=\"checking\" type=\"checkbox\" id=\"checkboxPrimary3\" name=\"auto_responder_status_edit\" onChange={this.autoSettingEdit}/>\r\n                            }\r\n                            Activate this Auto Responder\r\n                        </label>\r\n                        <button className=\"blue_btn\" onClick={this.createAutoResponderGroupHandlerEdit} type=\"submit\">Update Auto Responder</button>\r\n\r\n                    </form>\r\n                </div>\r\n                :\r\n                \"\"\r\n                }\r\n\r\n        </div>\r\n            \r\n            \r\n       \r\n        )\r\n      }\r\n}\r\nexport default responseSetting;","C:\\GrammyWammy\\front-end\\src\\components\\modules\\Setting\\DefaultMessageSettings\\IndividualComponents\\group.js",["283","284","285","286","287","288","289","290","291","292","293","294","295","296","297","298","299","300","301","302","303","304","305","306","307","308","309","310","311","312","313","314","315","316","317","318","319","320","321","322","323","324","325"],"import React, { Component } from \"react\";\r\nimport plusLogo from  \"../../../../../images/plus.svg\";\r\nimport editLogo from  \"../../../../../images/edit1.svg\";\r\nimport deleteLogo from  \"../../../../../images/delete1.svg\";\r\nimport viewLogo from  \"../../../../../images/view.svg\";\r\nimport backArrowLogo from \"../../../../../images/arrow2.svg\";\r\nimport smallPlusLogo    from \"../../../../../images/smallplus.svg\";\r\nimport blackCrossLogo   from \"../../../../../images/black_cross.svg\";\r\nimport SegmentServices from \"../../../../../services/segmentServices.js\";\r\nimport GroupServices from \"../../../../../services/groupServices.js\";\r\nclass group extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n          groupList:1,\r\n          groupCreate:0,\r\n          groupEdit:0,\r\n          openCreateOption:0,\r\n          openCreateOptionKeyWord:0,\r\n          openCreateOptionStaticText:0,\r\n          openCreateOptionSegment:0,\r\n          DefaultSegments:[],\r\n          BlockStorage:[],\r\n          TemporaryBlockStorage:[],\r\n          default_message_text_add:\"\",\r\n          showAddButton:0,\r\n          message_Group_List:[]\r\n        }\r\n      }\r\n\r\n    addGroupHandler  = async (event) =>  {\r\n        event.preventDefault();\r\n        this.setState({\r\n            groupList:0,\r\n            groupCreate:1,\r\n            groupEdit:0,\r\n            openCreateOption:0,\r\n            openCreateOptionKeyWord:0,\r\n            openCreateOptionStaticText:0,\r\n            openCreateOptionSegment:0\r\n        })\r\n    }\r\n    addOpenOptions  = async (event) =>  {\r\n        event.preventDefault();\r\n        this.setState({\r\n            openCreateOption:1,\r\n            openCreateOptionKeyWord:0,\r\n            openCreateOptionStaticText:0,\r\n            openCreateOptionSegment:0,\r\n            showAddButton:0\r\n        })\r\n    }\r\n    addOpenOptionsSegment  = async (event) =>  {\r\n        event.preventDefault();\r\n        this.setState({\r\n            openCreateOptionKeyWord:0,\r\n            openCreateOptionStaticText:0,\r\n            openCreateOptionSegment:1\r\n        })\r\n    }\r\n    addOpenOptionsText  = async (event) =>  {\r\n        event.preventDefault();\r\n        this.setState({\r\n            openCreateOptionKeyWord:0,\r\n            openCreateOptionStaticText:1,\r\n            openCreateOptionSegment:0\r\n        })\r\n    }\r\n    addOpenOptionsKeyword  = async (event) =>  {\r\n        event.preventDefault();\r\n        this.setState({\r\n            openCreateOptionKeyWord:1,\r\n            openCreateOptionStaticText:0,\r\n            openCreateOptionSegment:0\r\n        })\r\n    }\r\n    insertBlockIntoTempStore    =   async (type,OptId,OptText,event)=>{\r\n\r\n        event.preventDefault();\r\n        let OldTemporaryBlockStorage =this.state.TemporaryBlockStorage;  \r\n        if(type  == 1){\r\n            let eachBlockSegmet ={\r\n                type:\"id\",\r\n                value:OptId,\r\n                contents:\"[\"+OptText+\"]\"\r\n\r\n            }\r\n            OldTemporaryBlockStorage.push(eachBlockSegmet);\r\n            this.setState({\r\n                TemporaryBlockStorage:OldTemporaryBlockStorage,\r\n                openCreateOption:0,\r\n                openCreateOptionKeyWord:0,\r\n                openCreateOptionStaticText:0,\r\n                openCreateOptionSegment:0,\r\n                showAddButton:1\r\n            })\r\n        }else if(type  == 2){\r\n            let eachBlockText ={\r\n                type:\"text\",\r\n                value:OptText,\r\n                contents:OptText\r\n\r\n            }\r\n            OldTemporaryBlockStorage.push(eachBlockText);\r\n            this.setState({\r\n\r\n                TemporaryBlockStorage:OldTemporaryBlockStorage,\r\n                openCreateOption:0,\r\n                openCreateOptionKeyWord:0,\r\n                openCreateOptionStaticText:0,\r\n                openCreateOptionSegment:0,\r\n                default_message_text_add:\"\",\r\n                showAddButton:1\r\n            })\r\n        }else{\r\n            let eachBlockText ={\r\n                type:\"text\",\r\n                value:OptText,\r\n                contents:OptText\r\n\r\n            }\r\n            OldTemporaryBlockStorage.push(eachBlockText);\r\n            this.setState({\r\n\r\n                TemporaryBlockStorage:OldTemporaryBlockStorage,\r\n                openCreateOption:0,\r\n                openCreateOptionKeyWord:0,\r\n                openCreateOptionStaticText:0,\r\n                openCreateOptionSegment:0,\r\n                showAddButton:1\r\n            })\r\n        }\r\n        console.log(\"Tis is the set\",this.state.TemporaryBlockStorage);\r\n        \r\n    }\r\n    inputChangeHandller = (event) => {\r\n        this.setState({ [event.target.name]: event.target.value })\r\n    }\r\n    RemoveMessageBlockAdd(block_index,event){\r\n        event.preventDefault();\r\n        console.log(\"this is the Index\",block_index);\r\n        let  TemporaryBlockStorage= this.state.TemporaryBlockStorage;\r\n        TemporaryBlockStorage.splice(block_index, 1);\r\n        this.setState({TemporaryBlockStorage:TemporaryBlockStorage});\r\n\r\n    }\r\n    storeInMessageBlock = async   (event) =>  {\r\n        event.preventDefault();\r\n        let OldBlockStorage   =   this.state.BlockStorage;\r\n        OldBlockStorage.push(this.state.TemporaryBlockStorage);\r\n\r\n        this.setState({\r\n            BlockStorage:OldBlockStorage,\r\n            TemporaryBlockStorage:[],\r\n            showAddButton:0\r\n        });\r\n        console.log(\"This are the Message Blocks\",this.state.BlockStorage)\r\n    }\r\n    RemoveMessageSegmentsBlockAdd(block_index,event){\r\n        event.preventDefault();\r\n        console.log(\"this is the Index\",block_index);\r\n        let  presentSegmentBlock= this.state.BlockStorage;\r\n        presentSegmentBlock.splice(block_index, 1);\r\n        this.setState({BlockStorage:presentSegmentBlock});\r\n\r\n    }\r\n    submitAddGroup = async  (event) =>{\r\n        event.preventDefault();\r\n        let payload =   {\r\n            BlockStorage:this.state.BlockStorage,\r\n            group_name:this.state.group_name,\r\n            user_id:localStorage.getItem(\"user_id\")\r\n        }\r\n        console.log(\"This I have to save in DB as Group\",payload);\r\n        GroupServices.createGroup(payload).then(result=>{\r\n            if(result.data.code == 1){\r\n                this.setState({\r\n                    message_Group_List:result.data.payload,\r\n                    groupList:1,\r\n                    groupCreate:0,\r\n                    groupEdit:0,\r\n                    openCreateOption:0,\r\n                    openCreateOptionKeyWord:0,\r\n                    openCreateOptionStaticText:0,\r\n                    openCreateOptionSegment:0\r\n                })\r\n                //console.log(\"This I got From DDDDBBBBBB EROOOOOO GGGGG\",this.state.message_Group_List);\r\n            }\r\n            //console.log(\"this is more SUUUUUUCCEEEEESSSS\",result);\r\n        }).catch(error=>{\r\n            console.log(\"this is more ERRRRROOOOOORRRRRR\",error);\r\n        })\r\n    }\r\n    editMessageGroups(group_id,event){\r\n        event.preventDefault();\r\n        let  params ={\r\n            group_id    :   group_id\r\n        };\r\n        // GroupServices.editGroup(params).then(result  =>{\r\n            // console.log(result);\r\n            // if(result.data.code == 1){\r\n                this.setState({\r\n                    groupList:0,\r\n                    groupCreate:0,\r\n                    groupEdit:1,\r\n                    openCreateOption:0,\r\n                    openCreateOptionKeyWord:0,\r\n                    openCreateOptionStaticText:0,\r\n                    openCreateOptionSegment:0\r\n                })\r\n        //   }\r\n        // })\r\n    }\r\n    componentDidMount(){\r\n        let  params ={\r\n            user_id    :   localStorage.getItem('user_id')\r\n        };\r\n        SegmentServices.getSegment(params).then(result=>{        \r\n            if(result.data.code == 1){\r\n                this.setState({\r\n                    DefaultSegments:result.data.payload\r\n                })\r\n            }\r\n        }).catch(error=>{\r\n          console.log(\"This I got From DDDDBBBBBB EROOOOOO\",error);\r\n        })\r\n        GroupServices.getGroup(params).then(result=>{\r\n            if(result.data.code == 1){\r\n                this.setState({\r\n                    message_Group_List:result.data.payload\r\n                })\r\n                console.log(\"This I got From DDDDBBBBBB EROOOOOO GGGGG\",this.state.message_Group_List);\r\n            }\r\n        }).catch(error=>{\r\n          console.log(\"This I got From DDDDBBBBBB EROOOOOO\",error);\r\n        })\r\n        //message_Group_List\r\n\r\n    }\r\n      render() {\r\n        return (\r\n        <div>\r\n            {this.state.groupList ?\r\n            <div className=\"subtabcontent\">\r\n                { this.state.message_Group_List.length != 0 \r\n                ?\r\n                <div>\r\n                    <div className=\"headding\">\r\n                        <span>Message Group</span> <a href=\"\" onClick={this.addGroupHandler} className=\"createbtn\"><img src={plusLogo}/> Create New</a>\r\n                    </div>\r\n                    <div className=\"segmentlists\">\r\n                    {this.state.message_Group_List && this.state.message_Group_List.map((data, index) =>\r\n                        <div className=\"segmentlist\">\r\n                            <span className=\"txt\">{data.title}</span>\r\n                            <div className=\"action\">\r\n                            <a href=\"#\" onClick={(event) => this.editMessageGroups(data._id,event)} ><img src={editLogo} alt=\"\"/>aa</a>\r\n                            </div>\r\n                        </div>\r\n                    )}\r\n                    </div>\r\n                </div>\r\n                :\r\n                <div className=\"list_no_record\">\r\n                    <img src=\"images/empty_file.svg\" alt=\"\"/>\r\n                    <p>You haven’t created any Message Group yet.</p>\r\n                    <a onClick={this.addGroupHandler} className=\"createbtn\"><img src={plusLogo} alt=\"\"/> Create New</a>\r\n                </div>\r\n                }\r\n            </div>\r\n            :\r\n            \"\"\r\n            }\r\n            {this.state.groupCreate ?\r\n            <div className=\"subtabcontent\">\r\n                <div class=\"headding gap1\">\r\n                    <span class=\"big\">Create a Message Group</span> <a href=\"#\" class=\"roundarrow\"><img src={backArrowLogo}/></a>\r\n                </div>\r\n                <form>\r\n                    <label>Title</label>\r\n                        <input type=\"text\" name=\"group_name\" value={this.state.group_name} onChange={this.inputChangeHandller}  placeholder=\"Enter your message group title\" className=\"otherstyle\" />\r\n                    <label>Build message set</label>\r\n                    {this.state.BlockStorage && this.state.BlockStorage.map((data, index) =>\r\n                                    <span className=\"selectedBlock\">{ data.map((newdata) =>\r\n                                        newdata.contents\r\n                                    )}<a href=\"#\" onClick={(event) => this.RemoveMessageSegmentsBlockAdd(index,event)} className=\"cross\">X</a></span>\r\n                    )}\r\n                    <div class=\"insert_msg\">\r\n                        {this.state.TemporaryBlockStorage && this.state.TemporaryBlockStorage.map((data, index) =>\r\n\r\n                        <div class=\"addedinsert\">{data.contents}<a href=\"#\"   onClick={(event) => this.RemoveMessageBlockAdd(index,event)} ><img   src={blackCrossLogo}/></a> </div>\r\n                        \r\n                        )}\r\n                        \r\n                        <div class=\"insert\">\r\n                            <a href=\"\" onClick={this.addOpenOptions} ><span ><img src={smallPlusLogo}/></span> Insert {this.state.TemporaryBlockStorage.length > 0 ?\" Another\" : \"\"  }</a>\r\n                            {this.state.openCreateOption ? \r\n                                <div class=\"insertdropdown\">\r\n                                    <ul>\r\n                                        <li><a onClick={this.addOpenOptionsSegment} href=\"#\">Message Segment</a>\r\n                                        {this.state.openCreateOptionSegment ?\r\n                                            <div  class=\"insertdropdown inserone\">\r\n                                                <ul>\r\n                                                    {this.state.DefaultSegments && this.state.DefaultSegments.map((data, index) =>\r\n                                                        <li><a onClick={(event) => this.insertBlockIntoTempStore(1,data._id,data.title,event)}  href=\"#\">{data.title}</a></li>                                                \r\n                                                    )}\r\n                                                </ul>\r\n                                            </div>\r\n                                        :\r\n                                        \"\"\r\n                                        }\r\n                                        </li>                                  \r\n                                        <li><a onClick={this.addOpenOptionsText} href=\"#\">Static Text</a>\r\n                                            {this.state.openCreateOptionStaticText ?\r\n                                                <div class=\"insertdropdown insertwo\">\r\n                                                    <label>Title</label>\r\n                                                    <textarea name=\"default_message_text_add\" value={this.state.default_message_text_add} onChange={this.inputChangeHandller} id=\"default_message_text_add\" className=\"withtag otherstyle\" placeholder=\"Please Provide Your Static Text\"></textarea>\r\n                                                    <button  onClick={(event) => this.insertBlockIntoTempStore(2,\"\",this.state.default_message_text_add,event)} class=\"blue_btn\" type=\"submit\">Done</button> \r\n                                                </div>\r\n                                            :\r\n                                            \"\"\r\n                                            }\r\n                                        </li>\r\n                                        <li><a onClick={this.addOpenOptionsKeyword} href=\"#\">Keywords</a>\r\n                                        {this.state.openCreateOptionKeyWord ?\r\n                                            <div class=\"insertdropdown inserthree\">\r\n                                                <ul>\r\n                                                    <li><a onClick={(event) => this.insertBlockIntoTempStore(3,\"\",\"{first_name}\",event)} href=\"#\">[ First Name ]</a></li>\r\n                                                    <li><a onClick={(event) => this.insertBlockIntoTempStore(3,\"\",\"{last_name}\",event)} href=\"#\">[ Last Name ]</a></li>\r\n                                                    <li><a onClick={(event) => this.insertBlockIntoTempStore(3,\"\",\"{Date}\",event)} href=\"#\">[ Todays Date ]</a></li>\r\n                                                </ul>\r\n                                            </div>\r\n                                        :\r\n                                        \"\"\r\n                                        }\r\n                                        </li>\r\n                                    </ul>\r\n                                </div>\r\n                            : \r\n                            \"\"\r\n                            }    \r\n                        </div>\r\n                        {this.state.showAddButton\r\n                            ?\r\n                                <a href=\"#\" onClick={this.storeInMessageBlock} className=\"add\">Add</a>\r\n                            :\r\n                                \"\"\r\n                        }\r\n                    </div>\r\n                <button onClick={this.submitAddGroup} class=\"blue_btn\" type=\"submit\">Save Message Group</button>\r\n                </form>\r\n            </div>\r\n            :\r\n            \"\"\r\n           }\r\n            {this.state.groupEdit ?\r\n            <div className=\"subtabcontent\">\r\n                <div class=\"headding gap1\">\r\n                    <span class=\"big\">Edit a Message Group</span> <a href=\"#\" class=\"roundarrow\"><img src={backArrowLogo}/></a>\r\n                </div>\r\n                <form>\r\n                    <label>Title</label>\r\n                        <input type=\"text\" name=\"group_name\" value={this.state.group_name} onChange={this.inputChangeHandller}  placeholder=\"Enter your message group title\" className=\"otherstyle\" />\r\n                    <label>Build message set</label>\r\n                    {this.state.BlockStorage && this.state.BlockStorage.map((data, index) =>\r\n                                    <span className=\"selectedBlock\">{ data.map((newdata) =>\r\n                                        newdata.contents\r\n                                    )}<a href=\"#\" onClick={(event) => this.RemoveMessageSegmentsBlockAdd(index,event)} className=\"cross\">X</a></span>\r\n                    )}\r\n                    <div class=\"insert_msg\">\r\n                        {this.state.TemporaryBlockStorage && this.state.TemporaryBlockStorage.map((data, index) =>\r\n\r\n                        <div class=\"addedinsert\">{data.contents}<a href=\"#\"   onClick={(event) => this.RemoveMessageBlockAdd(index,event)} ><img   src={blackCrossLogo}/></a> </div>\r\n                        \r\n                        )}\r\n                        \r\n                        <div class=\"insert\">\r\n                            <a href=\"\" onClick={this.addOpenOptions} ><span ><img src={smallPlusLogo}/></span> Insert {this.state.TemporaryBlockStorage.length > 0 ?\" Another\" : \"\"  }</a>\r\n                            {this.state.openCreateOption ? \r\n                                <div class=\"insertdropdown\">\r\n                                    <ul>\r\n                                        <li><a onClick={this.addOpenOptionsSegment} href=\"#\">Message Segment</a>\r\n                                        {this.state.openCreateOptionSegment ?\r\n                                            <div  class=\"insertdropdown inserone\">\r\n                                                <ul>\r\n                                                    {this.state.DefaultSegments && this.state.DefaultSegments.map((data, index) =>\r\n                                                        <li><a onClick={(event) => this.insertBlockIntoTempStore(1,data._id,data.title,event)}  href=\"#\">{data.title}</a></li>                                                \r\n                                                    )}\r\n                                                </ul>\r\n                                            </div>\r\n                                        :\r\n                                        \"\"\r\n                                        }\r\n                                        </li>                                  \r\n                                        <li><a onClick={this.addOpenOptionsText} href=\"#\">Static Text</a>\r\n                                            {this.state.openCreateOptionStaticText ?\r\n                                                <div class=\"insertdropdown insertwo\">\r\n                                                    <label>Title</label>\r\n                                                    <textarea name=\"default_message_text_add\" value={this.state.default_message_text_add} onChange={this.inputChangeHandller} id=\"default_message_text_add\" className=\"withtag otherstyle\" placeholder=\"Please Provide Your Static Text\"></textarea>\r\n                                                    <button  onClick={(event) => this.insertBlockIntoTempStore(2,\"\",this.state.default_message_text_add,event)} class=\"blue_btn\" type=\"submit\">Done</button> \r\n                                                </div>\r\n                                            :\r\n                                            \"\"\r\n                                            }\r\n                                        </li>\r\n                                        <li><a onClick={this.addOpenOptionsKeyword} href=\"#\">Keywords</a>\r\n                                        {this.state.openCreateOptionKeyWord ?\r\n                                            <div class=\"insertdropdown inserthree\">\r\n                                                <ul>\r\n                                                    <li><a onClick={(event) => this.insertBlockIntoTempStore(3,\"\",\"{first_name}\",event)} href=\"#\">[ First Name ]</a></li>\r\n                                                    <li><a onClick={(event) => this.insertBlockIntoTempStore(3,\"\",\"{last_name}\",event)} href=\"#\">[ Last Name ]</a></li>\r\n                                                    <li><a onClick={(event) => this.insertBlockIntoTempStore(3,\"\",\"{Date}\",event)} href=\"#\">[ Todays Date ]</a></li>\r\n                                                </ul>\r\n                                            </div>\r\n                                        :\r\n                                        \"\"\r\n                                        }\r\n                                        </li>\r\n                                    </ul>\r\n                                </div>\r\n                            : \r\n                            \"\"\r\n                            }    \r\n                        </div>\r\n                        {this.state.showAddButton\r\n                            ?\r\n                                <a href=\"#\" onClick={this.storeInMessageBlock} className=\"add\">Add</a>\r\n                            :\r\n                                \"\"\r\n                        }\r\n                    </div>\r\n                <button onClick={this.submitAddGroup} class=\"blue_btn\" type=\"submit\">Save Message Group</button>\r\n                </form>\r\n            </div>\r\n            :\r\n            \"\"\r\n      }\r\n\r\n        </div>\r\n        )\r\n      }\r\n      \r\n}\r\nexport default  group;","C:\\GrammyWammy\\front-end\\src\\components\\modules\\Setting\\ResponseSetting\\IndividualComponents\\defaultMessage.js",["326","327","328","329","330","331","332","333","334","335","336","337","338"],"import React, { Component } from \"react\";\r\nimport AuthServices from \"../../../../../services/authService\";\r\nimport GroupServices from \"../../../../../services/groupServices\";\r\nimport SettingServices from \"../../../../../services/setting\";\r\nimport Select from 'react-select';\r\nconst options = [\r\n  {value:0,label:\"Text  Message\"},\r\n  {value:1,label:\"Message Group\"}\r\n];\r\nclass defaultMessage extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n          selectedOption:  {value:1,label:\"Message Group\"},\r\n          default_message_type:0,\r\n          MessageGroupList:[],\r\n          GPL:[],\r\n          selectedGPL:null,\r\n          default_message_group:\"\",\r\n          default_message_text:\"\",\r\n          default_time_delay:0\r\n        }\r\n      }\r\n      handleChange = selectedOption => {\r\n        this.setState({ selectedOption });\r\n        console.log(`Option selected:`, selectedOption);\r\n        console.log(`Opppppppppppp`, selectedOption.value);\r\n        this.setState({default_message_type:selectedOption.value});\r\n      };\r\n      handleChangeGPL = selectedGPL =>  {\r\n        this.setState({ selectedGPL });\r\n        console.log(`Option selected:`, selectedGPL);\r\n        console.log(`Opppppppppppp`, selectedGPL.value);\r\n        this.setState({default_message_group:selectedGPL.value});\r\n      }\r\n      /**\r\n        * @inputChangeHandller \r\n        * getting input field values\r\n      */\r\n      inputChangeHandller = (event) => {\r\n        this.setState({ [event.target.name]: event.target.value })\r\n      }\r\n      /**\r\n         * @insertTagAtMessageSegments\r\n         * in this function we are managing the tag in welcome message area\r\n        */\r\n      insertTagAtMessageSegments(areaId, text) {\r\n        var txtarea = document.getElementById(areaId);\r\n        if (!txtarea) {\r\n        return;\r\n        }\r\n        // if (txtarea.value.length < 188) {\r\n        var scrollPos = txtarea.scrollTop;\r\n        var strPos = 0;\r\n        var br = ((txtarea.selectionStart || txtarea.selectionStart == '0') ?\r\n        \"ff\" : (document.selection ? \"ie\" : false));\r\n        if (br == \"ie\") {\r\n        txtarea.focus();\r\n        var range = document.selection.createRange();\r\n        range.moveStart('character', -txtarea.value.length);\r\n        strPos = range.text.length;\r\n        } else if (br == \"ff\") {\r\n        strPos = txtarea.selectionStart;\r\n        }\r\n        var front = (txtarea.value).substring(0, strPos);\r\n        var back = (txtarea.value).substring(strPos, txtarea.value.length);\r\n        txtarea.value = front + text + back;\r\n        strPos = strPos + text.length;\r\n        let WelcomeMessage = txtarea.value;\r\n        WelcomeMessage = WelcomeMessage.replace(/{first_name}/g, \"\");\r\n        WelcomeMessage = WelcomeMessage.replace(/{last_name}/g, \"\");\r\n        WelcomeMessage = WelcomeMessage.replace(/{date}/g, \"\");\r\n        WelcomeMessage = WelcomeMessage.replace(/{date_time}/g, \"\");\r\n        //console.log(\"This is the message ========\",WelcomeMessage);\r\n        this.setState({ default_message_text: txtarea.value});\r\n        // this.setState({ welcomeContent: txtarea.value, welcomeTextLengthCount: txtarea.value });\r\n        if (br == \"ie\") {\r\n        txtarea.focus();\r\n        var ieRange = document.selection.createRange();\r\n        ieRange.moveStart('character', -txtarea.value.length);\r\n        ieRange.moveStart('character', strPos);\r\n        ieRange.moveEnd('character', 0);\r\n        ieRange.select();\r\n        } else if (br == \"ff\") {\r\n        txtarea.selectionStart = strPos;\r\n        txtarea.selectionEnd = strPos;\r\n        txtarea.focus();\r\n        }\r\n        txtarea.scrollTop = scrollPos;\r\n        // }\r\n      }\r\n      \r\n      submitAddDefaultMessage   =    async   (event) =>  {\r\n        event.preventDefault();\r\n        let payload =   {\r\n            default_message_type:this.state.default_message_type,\r\n            default_message_group:this.state.default_message_group,\r\n            default_message_text:this.state.default_message_text,\r\n            default_time_delay:this.state.default_time_delay,\r\n            kyubi_user_token:localStorage.getItem(\"kyubi_user_token\")\r\n        }\r\n        console.log(\"This I have to save in DB as Segments\",payload);\r\n        await SettingServices.setSetting(payload).then(async result=>{\r\n          if(result.data.code==1){\r\n                      let responsenewvalue =result.data;\r\n                      localStorage.setItem('kyubi_user_token', responsenewvalue.payload.UserInfo.kyubi_user_token);\r\n                      localStorage.setItem('user_id', responsenewvalue.payload.UserInfo.user_id);\r\n                      localStorage.setItem('fb_id', responsenewvalue.payload.UserInfo.facebook_id);\r\n                      localStorage.setItem('fb_username', responsenewvalue.payload.UserInfo.facebook_name);\r\n                      localStorage.setItem('fb_name', responsenewvalue.payload.UserInfo.facebook_profile_name);\r\n                      localStorage.setItem('fb_image', responsenewvalue.payload.UserInfo.facebook_image);\r\n                      \r\n                      if(responsenewvalue.payload.UserSettings.default_message){\r\n                        localStorage.setItem('default_message', responsenewvalue.payload.UserSettings.default_message);\r\n                      }else{\r\n                        localStorage.setItem('default_message', 0);\r\n                      }\r\n                      if(responsenewvalue.payload.UserSettings.default_message_text){\r\n                        localStorage.setItem('default_message_text', responsenewvalue.payload.UserSettings.default_message_text);\r\n                      }else{\r\n                        localStorage.setItem('default_message_text',\"\");\r\n                      }\r\n                      if(responsenewvalue.payload.UserSettings.autoresponder){\r\n                        localStorage.setItem('autoresponder', responsenewvalue.payload.UserSettings.autoresponder);\r\n                        \r\n                      }else{\r\n                        localStorage.setItem('autoresponder', 0);\r\n                      }\r\n                      if(responsenewvalue.payload.UserSettings.default_time_delay){\r\n                        localStorage.setItem('default_time_delay', responsenewvalue.payload.UserSettings.default_time_delay);\r\n                      }\r\n                      \r\n                      localStorage.setItem('keywordsTally', JSON.stringify(responsenewvalue.payload.AutoResponderKeywords));\r\n          }else{\r\n\r\n          }\r\n        })\r\n      }\r\n      componentDidMount(){\r\n        let  params ={\r\n          user_rec    :   localStorage.getItem('kyubi_user_token')\r\n        };\r\n        let GPDID=\"\";\r\n        AuthServices.userRetrive(params).then(async result=>{\r\n          console.log(\"This I got From backGround SUSSSSS Default\",result);\r\n          let opt={}\r\n          if(result.data.payload.UserSettings.default_message_type ===1){\r\n            opt={value:1,label:\"Message Group\"}\r\n          }else{\r\n            opt={value:0,label:\"Text  Message\"}\r\n          }\r\n          if(result.data.payload.UserSettings.default_message_group){\r\n            this.setState({\r\n              default_message_group:result.data.payload.UserSettings.default_message_group\r\n            });\r\n            GPDID=result.data.payload.UserSettings.default_message_group;\r\n          }\r\n          this.setState({\r\n            default_message_type:result.data.payload.UserSettings.default_message_type,\r\n            selectedOption:opt,\r\n            default_message_text:result.data.payload.UserSettings.default_message_text,\r\n            default_time_delay:result.data.payload.UserSettings.default_time_delay,\r\n          })\r\n\r\n\r\n          let GroupParams = {\r\n            user_id    :   localStorage.getItem('user_id')\r\n          }\r\n          GroupServices.getGroup(GroupParams).then(async result=>{\r\n            if(result.data.code == 1){\r\n                let resultGroupList =  [];\r\n                \r\n                result.data.payload.map(data=>{\r\n                  \r\n                  resultGroupList.push({value:data._id,label:data.title})\r\n                  console.log(\"This MGP\",this.state.default_message_group);\r\n                  console.log(\"This GAP\",data._id);\r\n                  console.log(\"This GAP!\",GPDID);\r\n                  if(GPDID != \"\" && GPDID==data._id){\r\n  \r\n                    this.setState({\r\n                      selectedGPL:{value:data._id,label:data.title}\r\n                    });\r\n                  }\r\n                });\r\n                this.setState({\r\n                  MessageGroupList:result.data.payload,\r\n                  GPL:resultGroupList\r\n                })\r\n                \r\n                \r\n            }\r\n          }).catch(error=>{\r\n            console.log(\"This I got From DDDDBBBBBB EROOOOOO\",error);\r\n          })\r\n\r\n\r\n\r\n\r\n        }).catch(error=>{\r\n          console.log(\"This I got From backGround EROOOOOO Default\",error);\r\n        })\r\n        \r\n\r\n        \r\n      }\r\n      render() {\r\n        const { selectedOption,selectedGPL,GPL } = this.state;\r\n\r\n        return (\r\n            <div id=\"tabdefaultMessage\" className=\"subtabcontent\">\r\n\r\n            <form>\r\n              <div className=\"selectbox\">\r\n              <Select\r\n              className=\"selectbox\"\r\n              value={selectedOption}\r\n              onChange={this.handleChange}\r\n              options={options}\r\n              />\r\n\r\n              </div>\r\n              {this.state.default_message_type ? \r\n\r\n              <Select\r\n              className=\"selectbox\"\r\n              value={selectedGPL}\r\n              onChange={this.handleChangeGPL}\r\n              options={GPL}\r\n              />\r\n \r\n              : \r\n              <div>\r\n                <textarea name=\"default_message_text\" value={this.state.default_message_text} onChange={this.inputChangeHandller} id=\"default_message_text\" className=\"withtag otherstyle\" placeholder=\"Build block content\">\r\n                        \r\n                </textarea>\r\n              <a href=\"#\" className=\"formtag\">[ First Name ]</a> <a href=\"#\" className=\"formtag\">[ Last Name ]</a>\r\n              <button type=\"button\" onClick={() => this.insertTagAtMessageSegments('default_message_text', '{first_name}')} className=\"formtag\">[ First Name ]</button> \r\n              <button type=\"button\" onClick={() => this.insertTagAtMessageSegments('default_message_text', '{last_name}')} class=\"formtag\">[ Last Name ]</button>\r\n              <button type=\"button\" onClick={() => this.insertTagAtMessageSegments('default_message_text', '{date}')} class=\"formtag\">[ Todays Date ]</button>\r\n\r\n              </div>\r\n              \r\n              }\r\n\r\n              <label className=\"gap2\">\r\n                Time Interval for Default Message\r\n              </label>\r\n              <div className=\"formnumber\">\r\n                <input type=\"number\" name=\"default_time_delay\" value={this.state.default_time_delay} onChange={this.inputChangeHandller}  placeholder=\"Enter Time Delay\" className=\"otherstyle\" />        \r\n                hour (s)</div>\r\n\r\n                <button onClick={this.submitAddDefaultMessage} className=\"blue_btn\" type=\"submit\">Save Message</button>\r\n            </form>\r\n\r\n          </div>\r\n        )\r\n      }\r\n}\r\nexport default defaultMessage;","C:\\GrammyWammy\\front-end\\src\\components\\modules\\Setting\\DefaultMessageSettings\\IndividualComponents\\segment.js",["339","340","341","342","343","344","345","346","347","348","349","350","351","352","353","354","355","356","357","358","359","360","361","362","363","364","365","366","367","368","369","370","371","372","373"],"import React, { Component } from \"react\";\r\nimport plusLogo from  \"../../../../../images/plus.svg\";\r\nimport editLogo from  \"../../../../../images/edit1.svg\";\r\nimport deleteLogo from  \"../../../../../images/delete1.svg\";\r\nimport viewLogo from  \"../../../../../images/view.svg\";\r\nimport backArrowLogo from \"../../../../../images/arrow2.svg\";\r\nimport SegmentServices from \"../../../../../services/segmentServices.js\";\r\nclass segment extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            segmentList:1,\r\n            segmentCreate:0,\r\n            segmentEdit:0,\r\n            default_message_text:\"\",\r\n            message_block:[],\r\n            hideTextbox:false,\r\n            sagment_name:\"\",\r\n            message_block_List:[],\r\n            sagment_name_edit:\"\",\r\n            message_block_edit:[],\r\n            sagment_id_edit:\"\",\r\n            hideTextboxEdit:false,\r\n            default_message_text_edit:\"\"\r\n        }\r\n      }\r\n        /**\r\n        * @inputChangeHandller \r\n        * getting input field values\r\n        */\r\n        inputChangeHandller = (event) => {\r\n            this.setState({ [event.target.name]: event.target.value })\r\n        }\r\n        addSegmentHandler  = async (event) =>  {\r\n            event.preventDefault();\r\n            this.setState({\r\n                segmentList:0,\r\n                segmentCreate:1,\r\n                segmentEdit:0\r\n            })\r\n        }\r\n        listSegmentHandler  = async (event) =>  {\r\n            event.preventDefault();\r\n            this.setState({\r\n                segmentList:1,\r\n                segmentCreate:0,\r\n                segmentEdit:0\r\n            })\r\n        }\r\n        showTextBoxHandler  = async (event) =>  {\r\n            event.preventDefault();\r\n            this.setState({\r\n                hideTextbox:false\r\n            })\r\n        }\r\n        showTextBoxHandlerEdit  = async (event) =>  {\r\n            event.preventDefault();\r\n            this.setState({\r\n                hideTextboxEdit:false\r\n            })\r\n        } \r\n        storeInMessageBlock =   async   (event) =>  {\r\n            event.preventDefault();\r\n            let Old_message_block   =   this.state.message_block;\r\n            Old_message_block.push(this.state.default_message_text);\r\n\r\n            this.setState({\r\n                message_block:Old_message_block,\r\n                default_message_text:\"\",\r\n                hideTextbox:true\r\n            });\r\n            console.log(\"This are the Message Blocks\",this.state.message_block)\r\n        }\r\n        storeInMessageBlockEdit =   async   (event) =>  {\r\n            event.preventDefault();\r\n            let Old_message_block_edit   =   this.state.message_block_edit;\r\n            Old_message_block_edit.push(this.state.default_message_text_edit);\r\n\r\n            this.setState({\r\n                message_block_edit:Old_message_block_edit,\r\n                default_message_text_edit:\"\",\r\n                hideTextboxEdit:true\r\n            });\r\n            console.log(\"This are the Message Blocks\",this.state.message_block_edit)\r\n        }\r\n        submitAddSegment   =    async   (event) =>  {\r\n            event.preventDefault();\r\n            let payload =   {\r\n                message_segments_block:this.state.message_block,\r\n                message_segment_name:this.state.sagment_name,\r\n                user_id:localStorage.getItem(\"user_id\")\r\n            }\r\n            console.log(\"This I have to save in DB as Segments\",payload);\r\n            SegmentServices.createSegment(payload).then(result=>{\r\n                console.log(\"this is more SUUUUUUCCEEEEESSSS\",result);\r\n                if(result.data.code == 1){\r\n                    this.setState({\r\n                        message_block_List:result.data.payload,\r\n                        segmentList:1,\r\n                        segmentCreate:0,\r\n                        segmentEdit:0\r\n                    })\r\n              }\r\n            }).catch(error=>{\r\n                console.log(\"this is more ERRRRROOOOOORRRRRR\",error);\r\n            })\r\n        }\r\n        submitAddSegmentEdit   =    async   (event) =>  {\r\n            event.preventDefault();\r\n            let payload =   {\r\n                message_segments_block:this.state.message_block_edit,\r\n                message_segment_name:this.state.sagment_name_edit,\r\n                user_id:localStorage.getItem(\"user_id\"),\r\n                sagment_id_edit:this.state.sagment_id_edit\r\n            }\r\n            console.log(\"This I have to save in DB as Segments\",payload);\r\n            SegmentServices.UpdateSegment(payload).then(result=>{\r\n                console.log(\"this is more SUUUUUUCCEEEEESSSS EDIT\",result);\r\n                if(result.data.code == 1){\r\n                    console.log('Edited');\r\n                    this.setState({\r\n                        message_block_List:result.data.payload,\r\n                        segmentList:1,\r\n                        segmentCreate:0,\r\n                        segmentEdit:0\r\n                    })\r\n              }\r\n            }).catch(error=>{\r\n                console.log(\"this is more ERRRRROOOOOORRRRRR\",error);\r\n            })\r\n        }\r\n        /**\r\n         * @insertTagAtMessageSegments\r\n         * in this function we are managing the tag in welcome message area\r\n        */\r\n        insertTagAtMessageSegments(areaId, text) {\r\n                var txtarea = document.getElementById(areaId);\r\n                if (!txtarea) {\r\n                return;\r\n                }\r\n                // if (txtarea.value.length < 188) {\r\n                var scrollPos = txtarea.scrollTop;\r\n                var strPos = 0;\r\n                var br = ((txtarea.selectionStart || txtarea.selectionStart == '0') ?\r\n                \"ff\" : (document.selection ? \"ie\" : false));\r\n                if (br == \"ie\") {\r\n                txtarea.focus();\r\n                var range = document.selection.createRange();\r\n                range.moveStart('character', -txtarea.value.length);\r\n                strPos = range.text.length;\r\n                } else if (br == \"ff\") {\r\n                strPos = txtarea.selectionStart;\r\n                }\r\n                var front = (txtarea.value).substring(0, strPos);\r\n                var back = (txtarea.value).substring(strPos, txtarea.value.length);\r\n                txtarea.value = front + text + back;\r\n                strPos = strPos + text.length;\r\n                let WelcomeMessage = txtarea.value;\r\n                WelcomeMessage = WelcomeMessage.replace(/{first_name}/g, \"\");\r\n                WelcomeMessage = WelcomeMessage.replace(/{last_name}/g, \"\");\r\n                WelcomeMessage = WelcomeMessage.replace(/{date}/g, \"\");\r\n                WelcomeMessage = WelcomeMessage.replace(/{date_time}/g, \"\");\r\n                //console.log(\"This is the message ========\",WelcomeMessage);\r\n                this.setState({ default_message_text: txtarea.value});\r\n                // this.setState({ welcomeContent: txtarea.value, welcomeTextLengthCount: txtarea.value });\r\n                if (br == \"ie\") {\r\n                txtarea.focus();\r\n                var ieRange = document.selection.createRange();\r\n                ieRange.moveStart('character', -txtarea.value.length);\r\n                ieRange.moveStart('character', strPos);\r\n                ieRange.moveEnd('character', 0);\r\n                ieRange.select();\r\n                } else if (br == \"ff\") {\r\n                txtarea.selectionStart = strPos;\r\n                txtarea.selectionEnd = strPos;\r\n                txtarea.focus();\r\n                }\r\n                txtarea.scrollTop = scrollPos;\r\n                // }\r\n        }\r\n        insertTagAtMessageSegments_edit(areaId, text) {\r\n            var txtarea = document.getElementById(areaId);\r\n            if (!txtarea) {\r\n            return;\r\n            }\r\n            // if (txtarea.value.length < 188) {\r\n            var scrollPos = txtarea.scrollTop;\r\n            var strPos = 0;\r\n            var br = ((txtarea.selectionStart || txtarea.selectionStart == '0') ?\r\n            \"ff\" : (document.selection ? \"ie\" : false));\r\n            if (br == \"ie\") {\r\n            txtarea.focus();\r\n            var range = document.selection.createRange();\r\n            range.moveStart('character', -txtarea.value.length);\r\n            strPos = range.text.length;\r\n            } else if (br == \"ff\") {\r\n            strPos = txtarea.selectionStart;\r\n            }\r\n            var front = (txtarea.value).substring(0, strPos);\r\n            var back = (txtarea.value).substring(strPos, txtarea.value.length);\r\n            txtarea.value = front + text + back;\r\n            strPos = strPos + text.length;\r\n            let WelcomeMessage = txtarea.value;\r\n            WelcomeMessage = WelcomeMessage.replace(/{first_name}/g, \"\");\r\n            WelcomeMessage = WelcomeMessage.replace(/{last_name}/g, \"\");\r\n            WelcomeMessage = WelcomeMessage.replace(/{date}/g, \"\");\r\n            WelcomeMessage = WelcomeMessage.replace(/{date_time}/g, \"\");\r\n            //console.log(\"This is the message ========\",WelcomeMessage);\r\n            this.setState({ default_message_text_edit: txtarea.value});\r\n            // this.setState({ welcomeContent: txtarea.value, welcomeTextLengthCount: txtarea.value });\r\n            if (br == \"ie\") {\r\n            txtarea.focus();\r\n            var ieRange = document.selection.createRange();\r\n            ieRange.moveStart('character', -txtarea.value.length);\r\n            ieRange.moveStart('character', strPos);\r\n            ieRange.moveEnd('character', 0);\r\n            ieRange.select();\r\n            } else if (br == \"ff\") {\r\n            txtarea.selectionStart = strPos;\r\n            txtarea.selectionEnd = strPos;\r\n            txtarea.focus();\r\n            }\r\n            txtarea.scrollTop = scrollPos;\r\n            // }\r\n        }\r\n        editMessageSegments(segment_id,event){\r\n            event.preventDefault();\r\n            let  params ={\r\n                segment_id    :   segment_id\r\n            };\r\n            SegmentServices.editSegment(params).then(result  =>{\r\n                if(result.data.code == 1){\r\n                    this.setState({\r\n                        sagment_name_edit:result.data.payload.title,\r\n                        message_block_edit:result.data.payload.message_blocks,\r\n                        sagment_id_edit:result.data.payload._id,\r\n                        segmentList:0,\r\n                        segmentCreate:0,\r\n                        segmentEdit:1\r\n                    })\r\n              }\r\n            })\r\n        }\r\n        RemoveMessageSegmentsBlockEdit(block_index,event){\r\n            event.preventDefault();\r\n            console.log(\"this is the Index\",block_index);\r\n            let  presentSegmentBlock= this.state.message_block_edit;\r\n            presentSegmentBlock.splice(block_index, 1);\r\n            this.setState({message_block_edit:presentSegmentBlock});\r\n\r\n        }\r\n        componentDidMount(){\r\n                let  params ={\r\n                    user_id    :   localStorage.getItem('user_id')\r\n                };\r\n                SegmentServices.getSegment(params).then(result=>{\r\n                  \r\n                \r\n                if(result.data.code == 1){\r\n                      this.setState({\r\n                        message_block_List:result.data.payload\r\n                      })\r\n                }\r\n                }).catch(error=>{\r\n                  console.log(\"This I got From DDDDBBBBBB EROOOOOO\",error);\r\n                })\r\n        }\r\n      render() {\r\n        return (\r\n            <div>\r\n                {this.state.segmentList ?\r\n\r\n                    <div className=\"subtabcontent\">\r\n                        { this.state.message_block_List.length != 0 ?\r\n                            <div>\r\n                                <div className=\"headding\">\r\n                                    <span>Message Segments</span> <a onClick={this.addSegmentHandler} className=\"createbtn\"><img src={plusLogo}/> Create New</a>\r\n                                </div>\r\n                                <div className=\"segmentlists\">\r\n                                {this.state.message_block_List && this.state.message_block_List.map((data, index) =>\r\n                                    <div className=\"segmentlist\">\r\n                                        <span className=\"txt\">{data.title}</span>\r\n                                        <span className=\"txt\">{data.message_blocks.length}<br/> Blocks </span>\r\n                                        <div className=\"action\">\r\n                                            {/* <a href=\"#\"><img src={viewLogo} alt=\"\"/></a> */}\r\n                                            <a href=\"#\" onClick={(event) => this.editMessageSegments(data._id,event)} ><img src={editLogo} alt=\"\"/></a>\r\n                                            {/* <a href=\"#\"><img src={deleteLogo} alt=\"\"/></a> */}\r\n                                        </div>\r\n                                    </div>\r\n                                )}\r\n                                </div>\r\n                            </div>\r\n                        :\r\n                            <div className=\"list_no_record\">\r\n                                <img src=\"images/empty_file.svg\" alt=\"\"/>\r\n                                <p>You haven’t created any Message Segment yet.</p>\r\n                                <a onClick={this.addSegmentHandler} className=\"createbtn\"><img src={plusLogo} alt=\"\"/> Create New</a>\r\n                            </div>\r\n                        }\r\n                        \r\n                    </div>\r\n                :\r\n                \"\"\r\n                }\r\n                {this.state.segmentCreate ?\r\n                    <div className=\"subtabcontent\">\r\n                        <div className=\"headding gap1\">\r\n                            <span className=\"big\">Create a Message Segments</span> \r\n                            <a  onClick={this.listSegmentHandler} href=\"#\" className=\"roundarrow\"><img src={backArrowLogo}/></a>\r\n                        </div>\r\n                        <form>\r\n                            <label>Title</label>\r\n                            <input type=\"text\" name=\"sagment_name\" value={this.state.sagment_name} onChange={this.inputChangeHandller}  placeholder=\"Enter your message segment title\" className=\"otherstyle\" />\r\n                            \r\n                            <label>Create message block (s)<br/>\r\n                                <span>Click on the </span>\"keyword\"\r\n                                <span> to insert into your message</span>\r\n                            </label>\r\n                                {this.state.message_block && this.state.message_block.map((data, index) =>\r\n                                    <span className=\"selectedBlock\">{data}<a href=\"#\" className=\"cross\">X</a></span>\r\n                                )}\r\n                            <div className=\"addblock\">\r\n                                {this.state.hideTextbox\r\n                                ?\r\n                                <p className=\"gap1\"><a href=\"#\" onClick={this.showTextBoxHandler} className=\"blue_link\">Add another block</a></p>\r\n                                :\r\n                                <textarea name=\"default_message_text\" value={this.state.default_message_text} onChange={this.inputChangeHandller} id=\"default_message_text\" className=\"withtag otherstyle\" placeholder=\"Build block content\">\r\n                        \r\n                                </textarea>\r\n                                }\r\n                                \r\n                                {this.state.default_message_text==\"\"\r\n                                ?\r\n                                \"\"\r\n                                :\r\n                                <a href=\"#\" onClick={this.storeInMessageBlock} className=\"add\">Add</a>\r\n                                }\r\n                            </div>\r\n                            <button type=\"button\" onClick={() => this.insertTagAtMessageSegments('default_message_text', '{first_name}')} className=\"formtag\">[ First Name ]</button> \r\n                            <button type=\"button\" onClick={() => this.insertTagAtMessageSegments('default_message_text', '{last_name}')} class=\"formtag\">[ Last Name ]</button>\r\n                            <button type=\"button\" onClick={() => this.insertTagAtMessageSegments('default_message_text', '{date}')} class=\"formtag\">[ Todays Date ]</button>\r\n\r\n                            <p>&nbsp;</p>\r\n\r\n                            <button onClick={this.submitAddSegment} className=\"blue_btn\" type=\"submit\">Save Message Segment</button>\r\n                        </form>  \r\n                    </div>\r\n                :\r\n                \"\"\r\n                }\r\n                {this.state.segmentEdit ?\r\n                    <div className=\"subtabcontent\">\r\n                        <div className=\"headding gap1\">\r\n                            <span className=\"big\">Edit Message Segments</span> \r\n                            <a  onClick={this.listSegmentHandler} href=\"#\" className=\"roundarrow\"><img src={backArrowLogo}/></a>\r\n                        </div>\r\n                        <form>\r\n                            <label>Title</label>\r\n                            <input type=\"text\" name=\"sagment_name_edit\" value={this.state.sagment_name_edit} onChange={this.inputChangeHandller}  placeholder=\"Enter your message segment title\" className=\"otherstyle\" />\r\n                            \r\n                            <label>Edit message block (s)<br/>\r\n                                <span>Click on the </span>\"keyword\"\r\n                                <span> to insert into your message</span>\r\n                            </label>\r\n                                {this.state.message_block_edit && this.state.message_block_edit.map((data, index) =>\r\n                                    <span className=\"selectedBlock\">{data}<a href=\"#\"  onClick={(event) => this.RemoveMessageSegmentsBlockEdit(index,event)} className=\"cross\">X</a></span>\r\n                                )}\r\n                            <div className=\"addblock\">\r\n                                {this.state.hideTextboxEdit\r\n                                ?\r\n                                <p className=\"gap1\"><a href=\"#\" onClick={this.showTextBoxHandlerEdit} className=\"blue_link\">Add another block</a></p>\r\n                                :\r\n                                <textarea name=\"default_message_text_edit\" value={this.state.default_message_text_edit} onChange={this.inputChangeHandller} id=\"default_message_text_edit\" className=\"withtag otherstyle\" placeholder=\"Build block content\">\r\n                        \r\n                                </textarea>\r\n                                }\r\n                                \r\n                                {this.state.default_message_text_edit==\"\"\r\n                                ?\r\n                                \"\"\r\n                                :\r\n                                <a href=\"#\" onClick={this.storeInMessageBlockEdit} className=\"add\">Add</a>\r\n                                }\r\n                            </div>\r\n                            <button type=\"button\" onClick={() => this.insertTagAtMessageSegments_edit('default_message_text_edit', '{first_name}')} className=\"formtag\">[ First Name ]</button> \r\n                            <button type=\"button\" onClick={() => this.insertTagAtMessageSegments_edit('default_message_text_edit', '{last_name}')} class=\"formtag\">[ Last Name ]</button>\r\n                            <button type=\"button\" onClick={() => this.insertTagAtMessageSegments_edit('default_message_text_edit', '{date}')} class=\"formtag\">[ Todays Date ]</button>\r\n\r\n                            <p>&nbsp;</p>\r\n\r\n                            <button onClick={this.submitAddSegmentEdit} className=\"blue_btn\" type=\"submit\">Update Message Segment</button>\r\n                        </form>  \r\n                    </div>\r\n                :\r\n                \"\"\r\n                }\r\n            </div>\r\n        )\r\n      }\r\n}\r\nexport default  segment;","C:\\GrammyWammy\\front-end\\src\\services\\segmentServices.js",["374"],"import axios from 'axios';\r\nimport { host,kyubi } from '../config';\r\n\r\nconst segmentServices = {\r\n    createSegment: function (payload) {\r\n        return new Promise((resolve, reject) => {\r\n            let options = {\r\n                method: 'POST',\r\n                url: host + '/api/segment/create',\r\n                headers: {  'Accept': 'application/json', 'Content-Type': 'application/json' },\r\n                data: payload\r\n            }\r\n            axios(options)\r\n                .then(res => {\r\n                    console.log(\"In Success\");\r\n                    resolve(res)\r\n                })\r\n                .catch(err => {\r\n                    console.log(\"In Error\");\r\n                    reject(err)\r\n                })\r\n        })\r\n    },\r\n    getSegment: function (payload) {\r\n        return new Promise((resolve, reject) => {\r\n            let options = {\r\n                method: 'POST',\r\n                url: host + '/api/segment/list',\r\n                headers: {  'Accept': 'application/json', 'Content-Type': 'application/json' },\r\n                data: payload\r\n            }\r\n            axios(options)\r\n                .then(res => {\r\n                    console.log(\"In Success\");\r\n                    resolve(res)\r\n                })\r\n                .catch(err => {\r\n                    console.log(\"In Error\");\r\n                    reject(err)\r\n                })\r\n        })\r\n    },\r\n    editSegment: function (payload) {\r\n        return new Promise((resolve, reject) => {\r\n            let options = {\r\n                method: 'POST',\r\n                url: host + '/api/segment/edit',\r\n                headers: {  'Accept': 'application/json', 'Content-Type': 'application/json' },\r\n                data: payload\r\n            }\r\n            axios(options)\r\n                .then(res => {\r\n                    console.log(\"In Success\");\r\n                    resolve(res)\r\n                })\r\n                .catch(err => {\r\n                    console.log(\"In Error\");\r\n                    reject(err)\r\n                })\r\n        })\r\n    },\r\n    UpdateSegment: function (payload) {\r\n        return new Promise((resolve, reject) => {\r\n            let options = {\r\n                method: 'POST',\r\n                url: host + '/api/segment/update',\r\n                headers: {  'Accept': 'application/json', 'Content-Type': 'application/json' },\r\n                data: payload\r\n            }\r\n            axios(options)\r\n                .then(res => {\r\n                    console.log(\"In Success\");\r\n                    resolve(res)\r\n                })\r\n                .catch(err => {\r\n                    console.log(\"In Error\");\r\n                    reject(err)\r\n                })\r\n        })\r\n    },\r\n}\r\nexport default segmentServices;","C:\\GrammyWammy\\front-end\\src\\services\\groupServices.js",["375"],"import axios from 'axios';\r\nimport { host,kyubi } from '../config';\r\n\r\nconst groupServices = {\r\n    createGroup: function (payload) {\r\n        return new Promise((resolve, reject) => {\r\n            let options = {\r\n                method: 'POST',\r\n                url: host + '/api/group/create',\r\n                headers: {  'Accept': 'application/json', 'Content-Type': 'application/json' },\r\n                data: payload\r\n            }\r\n            axios(options)\r\n                .then(res => {\r\n                    console.log(\"In Success\");\r\n                    resolve(res)\r\n                })\r\n                .catch(err => {\r\n                    console.log(\"In Error\");\r\n                    reject(err)\r\n                })\r\n        })\r\n    },\r\n    getGroup: function (payload) {\r\n        return new Promise((resolve, reject) => {\r\n            let options = {\r\n                method: 'POST',\r\n                url: host + '/api/group/list',\r\n                headers: {  'Accept': 'application/json', 'Content-Type': 'application/json' },\r\n                data: payload\r\n            }\r\n            axios(options)\r\n                .then(res => {\r\n                    console.log(\"In Success\");\r\n                    resolve(res)\r\n                })\r\n                .catch(err => {\r\n                    console.log(\"In Error\");\r\n                    reject(err)\r\n                })\r\n        })\r\n    },\r\n    editGroup: function (payload) {\r\n        return new Promise((resolve, reject) => {\r\n            let options = {\r\n                method: 'POST',\r\n                url: host + '/api/group/edit',\r\n                headers: {  'Accept': 'application/json', 'Content-Type': 'application/json' },\r\n                data: payload\r\n            }\r\n            axios(options)\r\n                .then(res => {\r\n                    console.log(\"In Success\");\r\n                    resolve(res)\r\n                })\r\n                .catch(err => {\r\n                    console.log(\"In Error\");\r\n                    reject(err)\r\n                })\r\n        })\r\n    },\r\n    UpdateGroup: function (payload) {\r\n        return new Promise((resolve, reject) => {\r\n            let options = {\r\n                method: 'POST',\r\n                url: host + '/api/group/update',\r\n                headers: {  'Accept': 'application/json', 'Content-Type': 'application/json' },\r\n                data: payload\r\n            }\r\n            axios(options)\r\n                .then(res => {\r\n                    console.log(\"In Success\");\r\n                    resolve(res)\r\n                })\r\n                .catch(err => {\r\n                    console.log(\"In Error\");\r\n                    reject(err)\r\n                })\r\n        })\r\n    },\r\n}\r\nexport default groupServices;","C:\\GrammyWammy\\front-end\\src\\components\\modules\\Common\\footer.js",["376","377","378","379","380","381","382","383"],"import React, { Component } from \"react\";\r\nimport logo from \"../../../images/logo.svg\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport FaceBookLogo from \"../../../images/Path3.svg\";\r\nimport MessenderLogo from \"../../../images/Messanger.svg\";\r\nclass footer extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n          \r\n        }\r\n      }\r\n      \r\n    componentDidMount(){\r\n        console.log(\"I am In Header\");\r\n    }\r\n    render() {\r\n        return (\r\n        <div className=\"footer\">\r\n            <p>Powered by <a href=\"#\">Tier5</a> and the <a href=\"#\">Tier5 Partnership</a></p>\r\n            <a href=\"#\"><img src={FaceBookLogo} /></a> <a href=\"#\"><img src={MessenderLogo} /></a>\r\n        </div>\r\n        )\r\n    }\r\n}\r\nexport default footer;","C:\\GrammyWammy\\front-end\\src\\components\\modules\\Common\\header.js",["384","385","386","387","388","389","390","391","392","393","394","395","396","397","398","399"],"import React, { Component } from \"react\";\r\nimport logo from \"../../../images/logo.svg\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport  plog from \"../../../images/avatar_a.png\";\r\nimport  sideMenuLogo from \"../../../images/side_menu.svg\";\r\nimport  SettingServices from \"../../../services/setting\";\r\nclass header extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n          selected:this.props.selectedtab,\r\n          openNavBar:false,\r\n          default_message:0,\r\n          autoresponder_status:0,\r\n          ready_for_activate:0,\r\n          user_name:\"XXXXXX\",\r\n          user_image:plog,\r\n          meven_status:0\r\n         \r\n        }\r\n        \r\n      }\r\n      HideMenu = (event) => {\r\n        event.preventDefault();\r\n        //console.log(this.props.shownav);\r\n        this.setState({\r\n            openNavBar:false\r\n        })\r\n      }\r\n      autoSetting = async (event) => {\r\n        let payload = {\r\n        }\r\n        console.log(\"hiyy\",this.state.meven_status )\r\n        if(this.state.meven_status === 0){\r\n            this.setState({meven_status:1})\r\n            payload = {\r\n              update_load_status:1,\r\n              kyubi_user_token:localStorage.getItem('kyubi_user_token')\r\n            }\r\n\r\n        }else{\r\n            this.setState({meven_status:0})\r\n            payload = {\r\n              update_load_status:0,\r\n              kyubi_user_token:localStorage.getItem('kyubi_user_token')\r\n            }\r\n        }\r\n        await SettingServices.updateLoadStatus(payload).then(async result=>{\r\n          if(result.data.code==1){\r\n            let responsenewvalue =result.data;\r\n\r\n                  localStorage.setItem('kyubi_user_token', responsenewvalue.payload.UserInfo.kyubi_user_token);\r\n                  localStorage.setItem('user_id', responsenewvalue.payload.UserInfo.user_id);\r\n                  localStorage.setItem('fb_id', responsenewvalue.payload.UserInfo.facebook_id);\r\n                  localStorage.setItem('fb_username', responsenewvalue.payload.UserInfo.facebook_name);\r\n                  localStorage.setItem('fb_name', responsenewvalue.payload.UserInfo.facebook_profile_name);\r\n                  localStorage.setItem('fb_image', responsenewvalue.payload.UserInfo.facebook_image);\r\n                  \r\n                  if(responsenewvalue.payload.UserSettings.default_message){\r\n                    localStorage.setItem('default_message', responsenewvalue.payload.UserSettings.default_message);\r\n                  }else{\r\n                    localStorage.setItem('default_message', 0);\r\n                  }\r\n                  if(responsenewvalue.payload.UserSettings.default_message_text){\r\n                    localStorage.setItem('default_message_text', responsenewvalue.payload.UserSettings.default_message_text);\r\n                  }else{\r\n                    localStorage.setItem('default_message_text',\"\");\r\n                  }\r\n                  if(responsenewvalue.payload.UserSettings.autoresponder){\r\n                    localStorage.setItem('autoresponder', responsenewvalue.payload.UserSettings.autoresponder);\r\n                    \r\n                  }else{\r\n                    localStorage.setItem('autoresponder', 0);\r\n                  }\r\n                  if(responsenewvalue.payload.UserSettings.default_time_delay){\r\n                    localStorage.setItem('default_time_delay', responsenewvalue.payload.UserSettings.default_time_delay);\r\n                  }\r\n                  \r\n                  localStorage.setItem('keywordsTally', JSON.stringify(responsenewvalue.payload.AutoResponderKeywords));\r\n                  this.setState({\r\n                    autoresponder_status:localStorage.getItem('autoresponder'),\r\n                    default_message:localStorage.getItem('default_message')\r\n                  })\r\n          }\r\n        });\r\n      }\r\n      ShowMenu = (event) => {\r\n        event.preventDefault();\r\n        //console.log(this.props.shownav);\r\n        this.setState({\r\n            openNavBar:true\r\n        });\r\n\r\n        let fb_username=localStorage.getItem('fb_username');\r\n        let fb_image=localStorage.getItem('fb_image');\r\n        let autoresponder=localStorage.getItem('autoresponder');\r\n        let default_message=localStorage.getItem('default_message');\r\n        console.log(\"I am In Header\");\r\n        if(fb_username){\r\n          this.setState({\r\n            user_name:fb_username\r\n        });\r\n        }\r\n        if(fb_image){\r\n          this.setState({\r\n            user_image:fb_image\r\n        });\r\n        }\r\n        if(autoresponder){\r\n          if(autoresponder==\"1\"){\r\n            this.setState({\r\n            meven_status:1\r\n            });\r\n          }\r\n          this.setState({\r\n            autoresponder_status:autoresponder\r\n          });\r\n        }\r\n        if(default_message){\r\n          if(default_message==\"1\"){\r\n            this.setState({\r\n            meven_status:1\r\n            });\r\n          }\r\n          this.setState({\r\n            default_message:default_message\r\n          });\r\n        }\r\n        \r\n      }\r\n    \r\n    componentDidMount(){\r\n        let fb_username=localStorage.getItem('fb_username');\r\n        let fb_image=localStorage.getItem('fb_image');\r\n        let autoresponder=localStorage.getItem('autoresponder');\r\n        let default_message=localStorage.getItem('default_message');\r\n        console.log(\"I am In Header\");\r\n        if(fb_username){\r\n          this.setState({\r\n            user_name:fb_username\r\n        });\r\n        }\r\n        if(fb_image){\r\n          this.setState({\r\n            user_image:fb_image\r\n        });\r\n        }\r\n        if(autoresponder){\r\n          if(autoresponder==\"1\"){\r\n            this.setState({\r\n            meven_status:1\r\n            });\r\n          }\r\n          this.setState({\r\n            autoresponder_status:autoresponder\r\n          });\r\n        }\r\n        if(default_message){\r\n          if(default_message==\"1\"){\r\n            this.setState({\r\n            meven_status:1\r\n            });\r\n          }\r\n          this.setState({\r\n            default_message:default_message\r\n          });\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"gen_header\">\r\n              <div className=\"logo\"><img src={logo} alt=\"\" /></div>\r\n              <div className=\"hBtnWrapper\">\r\n                <div className=\"toogler\">\r\n                  <label className=\"switch_box box_1\">\r\n                    {this.state.autoresponder_status == \"1\" || this.state.default_message == \"1\" ?\r\n                      <div>\r\n                        <input type=\"checkbox\" className=\"switch_1\" name=\"meven_status\" onChange={this.autoSetting} id=\"swich\" name=\"togg\" checked/>\r\n                        <div className=\"toogler\"></div>\r\n                      </div>\r\n                      \r\n                    :\r\n                      <div>\r\n                        <input type=\"checkbox\" className=\"switch_1\" name=\"meven_status\" onChange={this.autoSetting} id=\"swich\" name=\"togg\" />\r\n                        <div className=\"toogler\"></div>\r\n                      </div>\r\n                    }\r\n\r\n                  </label>\r\n                </div>\r\n                <div className=\"slide_menu_click\">\r\n                  <a href=\"#\" className=\"side_click\" onClick={this.ShowMenu} ><img src={sideMenuLogo}/></a>\r\n                  <div className={this.state.openNavBar ?\"slider_menu active\":\"slider_menu\"}>\r\n                      <a href=\"#\" onClick={this.HideMenu} className=\"cross\">X</a>\r\n                      <div className=\"after_log_profile\">\r\n                        <img src={this.state.user_image} alt=\"\"/>\r\n                        <p>Welcome</p>\r\n                        <h3>{this.state.user_name}</h3>\r\n                      </div>\r\n                      <ul className=\"menunav\">\r\n                        <li><NavLink  to=\"/dashboard\"><img src=\"images/menuicon4.svg\" /> Dashboard</NavLink></li>\r\n                        <li><NavLink  to=\"/setting\"><img src=\"images/menuicon3.svg\"/> Settings</NavLink></li>\r\n                        <li><NavLink  to=\"/dashboard\"><img src=\"images/menuicon2.svg\"/> Friends</NavLink></li>\r\n                        <li><NavLink  to=\"/logout\"><img src=\"images/menuicon1.svg\"/> Logout</NavLink></li>\r\n                      </ul>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default header;",{"ruleId":"400","replacedBy":"401"},{"ruleId":"402","replacedBy":"403"},{"ruleId":"404","severity":1,"message":"405","line":14,"column":7,"nodeType":"406","messageId":"407","endLine":14,"endColumn":15},{"ruleId":"404","severity":1,"message":"408","line":2,"column":10,"nodeType":"406","messageId":"407","endLine":2,"endColumn":18},{"ruleId":"404","severity":1,"message":"409","line":2,"column":20,"nodeType":"406","messageId":"407","endLine":2,"endColumn":30},{"ruleId":"404","severity":1,"message":"410","line":7,"column":10,"nodeType":"406","messageId":"407","endLine":7,"endColumn":17},{"ruleId":"411","severity":1,"message":"412","line":55,"column":36,"nodeType":"413","messageId":"414","endLine":55,"endColumn":37,"suggestions":"415"},{"ruleId":"411","severity":1,"message":"412","line":55,"column":61,"nodeType":"413","messageId":"414","endLine":55,"endColumn":62,"suggestions":"416"},{"ruleId":"417","severity":1,"message":"418","line":75,"column":9,"nodeType":"419","messageId":"420","endLine":75,"endColumn":28},{"ruleId":"404","severity":1,"message":"421","line":85,"column":13,"nodeType":"406","messageId":"407","endLine":85,"endColumn":20},{"ruleId":"404","severity":1,"message":"422","line":104,"column":25,"nodeType":"406","messageId":"407","endLine":104,"endColumn":27},{"ruleId":"423","severity":1,"message":"424","line":157,"column":24,"nodeType":"425","endLine":157,"endColumn":58},{"ruleId":"423","severity":1,"message":"424","line":163,"column":47,"nodeType":"425","endLine":163,"endColumn":75},{"ruleId":"423","severity":1,"message":"424","line":172,"column":47,"nodeType":"425","endLine":172,"endColumn":74},{"ruleId":"423","severity":1,"message":"424","line":176,"column":51,"nodeType":"425","endLine":176,"endColumn":78},{"ruleId":"426","severity":1,"message":"427","line":182,"column":74,"nodeType":"425","endLine":182,"endColumn":99},{"ruleId":"426","severity":1,"message":"427","line":184,"column":94,"nodeType":"425","endLine":184,"endColumn":106},{"ruleId":"426","severity":1,"message":"427","line":188,"column":51,"nodeType":"425","endLine":188,"endColumn":63},{"ruleId":"426","severity":1,"message":"427","line":188,"column":81,"nodeType":"425","endLine":188,"endColumn":93},{"ruleId":"426","severity":1,"message":"427","line":189,"column":37,"nodeType":"425","endLine":189,"endColumn":49},{"ruleId":"423","severity":1,"message":"424","line":189,"column":49,"nodeType":"425","endLine":189,"endColumn":77},{"ruleId":"426","severity":1,"message":"427","line":189,"column":88,"nodeType":"425","endLine":189,"endColumn":100},{"ruleId":"423","severity":1,"message":"424","line":189,"column":100,"nodeType":"425","endLine":189,"endColumn":132},{"ruleId":"404","severity":1,"message":"408","line":2,"column":10,"nodeType":"406","messageId":"407","endLine":2,"endColumn":18},{"ruleId":"404","severity":1,"message":"409","line":2,"column":20,"nodeType":"406","messageId":"407","endLine":2,"endColumn":30},{"ruleId":"404","severity":1,"message":"408","line":2,"column":10,"nodeType":"406","messageId":"407","endLine":2,"endColumn":18},{"ruleId":"404","severity":1,"message":"409","line":2,"column":20,"nodeType":"406","messageId":"407","endLine":2,"endColumn":30},{"ruleId":"404","severity":1,"message":"428","line":7,"column":8,"nodeType":"406","messageId":"407","endLine":7,"endColumn":19},{"ruleId":"411","severity":1,"message":"412","line":55,"column":36,"nodeType":"413","messageId":"414","endLine":55,"endColumn":37,"suggestions":"429"},{"ruleId":"411","severity":1,"message":"412","line":55,"column":61,"nodeType":"413","messageId":"414","endLine":55,"endColumn":62,"suggestions":"430"},{"ruleId":"417","severity":1,"message":"418","line":71,"column":9,"nodeType":"419","messageId":"420","endLine":71,"endColumn":28},{"ruleId":"404","severity":1,"message":"421","line":82,"column":13,"nodeType":"406","messageId":"407","endLine":82,"endColumn":20},{"ruleId":"404","severity":1,"message":"408","line":2,"column":10,"nodeType":"406","messageId":"407","endLine":2,"endColumn":18},{"ruleId":"404","severity":1,"message":"409","line":2,"column":20,"nodeType":"406","messageId":"407","endLine":2,"endColumn":30},{"ruleId":"404","severity":1,"message":"431","line":4,"column":9,"nodeType":"406","messageId":"407","endLine":4,"endColumn":25},{"ruleId":"404","severity":1,"message":"408","line":3,"column":10,"nodeType":"406","messageId":"407","endLine":3,"endColumn":18},{"ruleId":"404","severity":1,"message":"409","line":3,"column":20,"nodeType":"406","messageId":"407","endLine":3,"endColumn":30},{"ruleId":"404","severity":1,"message":"431","line":5,"column":9,"nodeType":"406","messageId":"407","endLine":5,"endColumn":25},{"ruleId":"404","severity":1,"message":"408","line":2,"column":10,"nodeType":"406","messageId":"407","endLine":2,"endColumn":18},{"ruleId":"404","severity":1,"message":"409","line":2,"column":20,"nodeType":"406","messageId":"407","endLine":2,"endColumn":30},{"ruleId":"404","severity":1,"message":"432","line":4,"column":8,"nodeType":"406","messageId":"407","endLine":4,"endColumn":15},{"ruleId":"433","severity":1,"message":"434","line":62,"column":26,"nodeType":"435","messageId":"436","endLine":62,"endColumn":28},{"ruleId":"433","severity":1,"message":"434","line":132,"column":26,"nodeType":"435","messageId":"436","endLine":132,"endColumn":28},{"ruleId":"423","severity":1,"message":"424","line":192,"column":24,"nodeType":"425","endLine":192,"endColumn":58},{"ruleId":"426","severity":1,"message":"427","line":207,"column":37,"nodeType":"425","endLine":207,"endColumn":96},{"ruleId":"423","severity":1,"message":"424","line":207,"column":96,"nodeType":"425","endLine":207,"endColumn":128},{"ruleId":"426","severity":1,"message":"427","line":210,"column":41,"nodeType":"425","endLine":210,"endColumn":95},{"ruleId":"426","severity":1,"message":"427","line":217,"column":49,"nodeType":"425","endLine":217,"endColumn":61},{"ruleId":"423","severity":1,"message":"424","line":217,"column":61,"nodeType":"425","endLine":217,"endColumn":93},{"ruleId":"426","severity":1,"message":"427","line":226,"column":49,"nodeType":"425","endLine":226,"endColumn":61},{"ruleId":"423","severity":1,"message":"424","line":226,"column":61,"nodeType":"425","endLine":226,"endColumn":93},{"ruleId":"423","severity":1,"message":"424","line":227,"column":93,"nodeType":"425","endLine":227,"endColumn":125},{"ruleId":"426","severity":1,"message":"437","line":247,"column":29,"nodeType":"425","endLine":247,"endColumn":79},{"ruleId":"423","severity":1,"message":"424","line":247,"column":79,"nodeType":"425","endLine":247,"endColumn":108},{"ruleId":"426","severity":1,"message":"437","line":248,"column":29,"nodeType":"425","endLine":248,"endColumn":74},{"ruleId":"423","severity":1,"message":"424","line":248,"column":74,"nodeType":"425","endLine":248,"endColumn":104},{"ruleId":"426","severity":1,"message":"427","line":251,"column":43,"nodeType":"425","endLine":251,"endColumn":55},{"ruleId":"426","severity":1,"message":"427","line":251,"column":73,"nodeType":"425","endLine":251,"endColumn":85},{"ruleId":"426","severity":1,"message":"427","line":252,"column":29,"nodeType":"425","endLine":252,"endColumn":41},{"ruleId":"423","severity":1,"message":"424","line":252,"column":41,"nodeType":"425","endLine":252,"endColumn":69},{"ruleId":"426","severity":1,"message":"427","line":252,"column":80,"nodeType":"425","endLine":252,"endColumn":92},{"ruleId":"423","severity":1,"message":"424","line":252,"column":92,"nodeType":"425","endLine":252,"endColumn":124},{"ruleId":"404","severity":1,"message":"410","line":2,"column":10,"nodeType":"406","messageId":"407","endLine":2,"endColumn":17},{"ruleId":"426","severity":1,"message":"427","line":42,"column":25,"nodeType":"425","endLine":42,"endColumn":141},{"ruleId":"426","severity":1,"message":"427","line":43,"column":25,"nodeType":"425","endLine":43,"endColumn":138},{"ruleId":"433","severity":1,"message":"434","line":29,"column":32,"nodeType":"435","messageId":"436","endLine":29,"endColumn":34},{"ruleId":"404","severity":1,"message":"410","line":2,"column":10,"nodeType":"406","messageId":"407","endLine":2,"endColumn":17},{"ruleId":"438","severity":1,"message":"439","line":111,"column":41,"nodeType":"440","endLine":111,"endColumn":82},{"ruleId":"404","severity":1,"message":"410","line":2,"column":10,"nodeType":"406","messageId":"407","endLine":2,"endColumn":17},{"ruleId":"438","severity":1,"message":"439","line":149,"column":41,"nodeType":"440","endLine":149,"endColumn":82},{"ruleId":"404","severity":1,"message":"441","line":2,"column":15,"nodeType":"406","messageId":"407","endLine":2,"endColumn":20},{"ruleId":"404","severity":1,"message":"441","line":2,"column":15,"nodeType":"406","messageId":"407","endLine":2,"endColumn":20},{"ruleId":"404","severity":1,"message":"441","line":2,"column":15,"nodeType":"406","messageId":"407","endLine":2,"endColumn":20},{"ruleId":"404","severity":1,"message":"442","line":4,"column":9,"nodeType":"406","messageId":"407","endLine":4,"endColumn":17},{"ruleId":"426","severity":1,"message":"427","line":37,"column":19,"nodeType":"425","endLine":37,"endColumn":113},{"ruleId":"426","severity":1,"message":"427","line":47,"column":23,"nodeType":"425","endLine":47,"endColumn":59},{"ruleId":"423","severity":1,"message":"424","line":51,"column":27,"nodeType":"425","endLine":51,"endColumn":66},{"ruleId":"426","severity":1,"message":"427","line":36,"column":21,"nodeType":"425","endLine":36,"endColumn":148},{"ruleId":"423","severity":1,"message":"424","line":37,"column":57,"nodeType":"425","endLine":37,"endColumn":106},{"ruleId":"423","severity":1,"message":"424","line":37,"column":107,"nodeType":"425","endLine":37,"endColumn":158},{"ruleId":"426","severity":1,"message":"427","line":41,"column":21,"nodeType":"425","endLine":41,"endColumn":149},{"ruleId":"423","severity":1,"message":"424","line":42,"column":56,"nodeType":"425","endLine":42,"endColumn":105},{"ruleId":"423","severity":1,"message":"424","line":42,"column":106,"nodeType":"425","endLine":42,"endColumn":157},{"ruleId":"426","severity":1,"message":"427","line":39,"column":21,"nodeType":"425","endLine":39,"endColumn":108},{"ruleId":"423","severity":1,"message":"424","line":41,"column":21,"nodeType":"425","endLine":41,"endColumn":70},{"ruleId":"423","severity":1,"message":"424","line":43,"column":21,"nodeType":"425","endLine":43,"endColumn":74},{"ruleId":"426","severity":1,"message":"427","line":48,"column":21,"nodeType":"425","endLine":48,"endColumn":124},{"ruleId":"423","severity":1,"message":"424","line":50,"column":21,"nodeType":"425","endLine":50,"endColumn":68},{"ruleId":"423","severity":1,"message":"424","line":52,"column":21,"nodeType":"425","endLine":52,"endColumn":72},{"ruleId":"433","severity":1,"message":"434","line":96,"column":69,"nodeType":"435","messageId":"436","endLine":96,"endColumn":71},{"ruleId":"433","severity":1,"message":"434","line":98,"column":16,"nodeType":"435","messageId":"436","endLine":98,"endColumn":18},{"ruleId":"433","severity":1,"message":"434","line":103,"column":23,"nodeType":"435","messageId":"436","endLine":103,"endColumn":25},{"ruleId":"404","severity":1,"message":"443","line":114,"column":26,"nodeType":"406","messageId":"407","endLine":114,"endColumn":40},{"ruleId":"433","severity":1,"message":"434","line":116,"column":19,"nodeType":"435","messageId":"436","endLine":116,"endColumn":21},{"ruleId":"433","severity":1,"message":"434","line":123,"column":16,"nodeType":"435","messageId":"436","endLine":123,"endColumn":18},{"ruleId":"433","severity":1,"message":"434","line":130,"column":23,"nodeType":"435","messageId":"436","endLine":130,"endColumn":25},{"ruleId":"433","severity":1,"message":"434","line":158,"column":33,"nodeType":"435","messageId":"436","endLine":158,"endColumn":35},{"ruleId":"433","severity":1,"message":"444","line":164,"column":43,"nodeType":"435","messageId":"436","endLine":164,"endColumn":45},{"ruleId":"433","severity":1,"message":"434","line":200,"column":33,"nodeType":"435","messageId":"436","endLine":200,"endColumn":35},{"ruleId":"433","severity":1,"message":"444","line":206,"column":43,"nodeType":"435","messageId":"436","endLine":206,"endColumn":45},{"ruleId":"433","severity":1,"message":"434","line":258,"column":22,"nodeType":"435","messageId":"436","endLine":258,"endColumn":24},{"ruleId":"433","severity":1,"message":"434","line":270,"column":33,"nodeType":"435","messageId":"436","endLine":270,"endColumn":35},{"ruleId":"433","severity":1,"message":"444","line":276,"column":43,"nodeType":"435","messageId":"436","endLine":276,"endColumn":45},{"ruleId":"433","severity":1,"message":"434","line":304,"column":33,"nodeType":"435","messageId":"436","endLine":304,"endColumn":35},{"ruleId":"433","severity":1,"message":"444","line":310,"column":43,"nodeType":"435","messageId":"436","endLine":310,"endColumn":45},{"ruleId":"433","severity":1,"message":"444","line":333,"column":36,"nodeType":"435","messageId":"436","endLine":333,"endColumn":38},{"ruleId":"433","severity":1,"message":"444","line":353,"column":64,"nodeType":"435","messageId":"436","endLine":353,"endColumn":66},{"ruleId":"426","severity":1,"message":"427","line":357,"column":67,"nodeType":"425","endLine":357,"endColumn":139},{"ruleId":"426","severity":1,"message":"427","line":369,"column":49,"nodeType":"425","endLine":369,"endColumn":122},{"ruleId":"426","severity":1,"message":"427","line":370,"column":49,"nodeType":"425","endLine":370,"endColumn":125},{"ruleId":"426","severity":1,"message":"427","line":396,"column":25,"nodeType":"425","endLine":396,"endColumn":97},{"ruleId":"404","severity":1,"message":"445","line":4,"column":8,"nodeType":"406","messageId":"407","endLine":4,"endColumn":18},{"ruleId":"404","severity":1,"message":"446","line":5,"column":8,"nodeType":"406","messageId":"407","endLine":5,"endColumn":16},{"ruleId":"433","severity":1,"message":"434","line":81,"column":18,"nodeType":"435","messageId":"436","endLine":81,"endColumn":20},{"ruleId":"433","severity":1,"message":"434","line":97,"column":24,"nodeType":"435","messageId":"436","endLine":97,"endColumn":26},{"ruleId":"433","severity":1,"message":"434","line":176,"column":33,"nodeType":"435","messageId":"436","endLine":176,"endColumn":35},{"ruleId":"404","severity":1,"message":"447","line":196,"column":14,"nodeType":"406","messageId":"407","endLine":196,"endColumn":20},{"ruleId":"433","severity":1,"message":"434","line":219,"column":33,"nodeType":"435","messageId":"436","endLine":219,"endColumn":35},{"ruleId":"433","severity":1,"message":"434","line":228,"column":33,"nodeType":"435","messageId":"436","endLine":228,"endColumn":35},{"ruleId":"433","severity":1,"message":"444","line":245,"column":56,"nodeType":"435","messageId":"436","endLine":245,"endColumn":58},{"ruleId":"426","severity":1,"message":"427","line":249,"column":52,"nodeType":"425","endLine":249,"endColumn":116},{"ruleId":"423","severity":1,"message":"424","line":249,"column":116,"nodeType":"425","endLine":249,"endColumn":137},{"ruleId":"426","severity":1,"message":"427","line":256,"column":29,"nodeType":"425","endLine":256,"endColumn":102},{"ruleId":"426","severity":1,"message":"437","line":266,"column":21,"nodeType":"425","endLine":266,"endColumn":77},{"ruleId":"426","severity":1,"message":"427","line":276,"column":69,"nodeType":"425","endLine":276,"endColumn":100},{"ruleId":"423","severity":1,"message":"424","line":276,"column":100,"nodeType":"425","endLine":276,"endColumn":126},{"ruleId":"426","severity":1,"message":"427","line":285,"column":39,"nodeType":"425","endLine":285,"endColumn":138},{"ruleId":"426","severity":1,"message":"427","line":290,"column":65,"nodeType":"425","endLine":290,"endColumn":141},{"ruleId":"423","severity":1,"message":"424","line":290,"column":141,"nodeType":"425","endLine":290,"endColumn":170},{"ruleId":"426","severity":1,"message":"427","line":295,"column":29,"nodeType":"425","endLine":295,"endColumn":71},{"ruleId":"423","severity":1,"message":"424","line":295,"column":78,"nodeType":"425","endLine":295,"endColumn":104},{"ruleId":"426","severity":1,"message":"427","line":299,"column":45,"nodeType":"425","endLine":299,"endColumn":94},{"ruleId":"426","severity":1,"message":"427","line":304,"column":61,"nodeType":"425","endLine":304,"endColumn":154},{"ruleId":"426","severity":1,"message":"427","line":312,"column":45,"nodeType":"425","endLine":312,"endColumn":91},{"ruleId":"426","severity":1,"message":"427","line":323,"column":45,"nodeType":"425","endLine":323,"endColumn":94},{"ruleId":"426","severity":1,"message":"427","line":327,"column":57,"nodeType":"425","endLine":327,"endColumn":147},{"ruleId":"426","severity":1,"message":"427","line":328,"column":57,"nodeType":"425","endLine":328,"endColumn":146},{"ruleId":"426","severity":1,"message":"427","line":329,"column":57,"nodeType":"425","endLine":329,"endColumn":141},{"ruleId":"426","severity":1,"message":"427","line":344,"column":33,"nodeType":"425","endLine":344,"endColumn":96},{"ruleId":"426","severity":1,"message":"427","line":358,"column":67,"nodeType":"425","endLine":358,"endColumn":98},{"ruleId":"423","severity":1,"message":"424","line":358,"column":98,"nodeType":"425","endLine":358,"endColumn":124},{"ruleId":"426","severity":1,"message":"427","line":367,"column":39,"nodeType":"425","endLine":367,"endColumn":138},{"ruleId":"426","severity":1,"message":"427","line":372,"column":65,"nodeType":"425","endLine":372,"endColumn":141},{"ruleId":"423","severity":1,"message":"424","line":372,"column":141,"nodeType":"425","endLine":372,"endColumn":170},{"ruleId":"426","severity":1,"message":"427","line":377,"column":29,"nodeType":"425","endLine":377,"endColumn":71},{"ruleId":"423","severity":1,"message":"424","line":377,"column":78,"nodeType":"425","endLine":377,"endColumn":104},{"ruleId":"426","severity":1,"message":"427","line":381,"column":45,"nodeType":"425","endLine":381,"endColumn":94},{"ruleId":"426","severity":1,"message":"427","line":386,"column":61,"nodeType":"425","endLine":386,"endColumn":154},{"ruleId":"426","severity":1,"message":"427","line":394,"column":45,"nodeType":"425","endLine":394,"endColumn":91},{"ruleId":"426","severity":1,"message":"427","line":405,"column":45,"nodeType":"425","endLine":405,"endColumn":94},{"ruleId":"426","severity":1,"message":"427","line":409,"column":57,"nodeType":"425","endLine":409,"endColumn":147},{"ruleId":"426","severity":1,"message":"427","line":410,"column":57,"nodeType":"425","endLine":410,"endColumn":146},{"ruleId":"426","severity":1,"message":"427","line":411,"column":57,"nodeType":"425","endLine":411,"endColumn":141},{"ruleId":"426","severity":1,"message":"427","line":426,"column":33,"nodeType":"425","endLine":426,"endColumn":96},{"ruleId":"433","severity":1,"message":"434","line":55,"column":69,"nodeType":"435","messageId":"436","endLine":55,"endColumn":71},{"ruleId":"433","severity":1,"message":"434","line":57,"column":16,"nodeType":"435","messageId":"436","endLine":57,"endColumn":18},{"ruleId":"433","severity":1,"message":"434","line":62,"column":23,"nodeType":"435","messageId":"436","endLine":62,"endColumn":25},{"ruleId":"404","severity":1,"message":"443","line":73,"column":26,"nodeType":"406","messageId":"407","endLine":73,"endColumn":40},{"ruleId":"433","severity":1,"message":"434","line":77,"column":16,"nodeType":"435","messageId":"436","endLine":77,"endColumn":18},{"ruleId":"433","severity":1,"message":"434","line":84,"column":23,"nodeType":"435","messageId":"436","endLine":84,"endColumn":25},{"ruleId":"433","severity":1,"message":"434","line":104,"column":30,"nodeType":"435","messageId":"436","endLine":104,"endColumn":32},{"ruleId":"433","severity":1,"message":"434","line":170,"column":33,"nodeType":"435","messageId":"436","endLine":170,"endColumn":35},{"ruleId":"448","severity":1,"message":"449","line":173,"column":45,"nodeType":"450","messageId":"451","endLine":173,"endColumn":47},{"ruleId":"433","severity":1,"message":"444","line":179,"column":28,"nodeType":"435","messageId":"436","endLine":179,"endColumn":30},{"ruleId":"433","severity":1,"message":"434","line":179,"column":42,"nodeType":"435","messageId":"436","endLine":179,"endColumn":44},{"ruleId":"426","severity":1,"message":"427","line":237,"column":15,"nodeType":"425","endLine":237,"endColumn":47},{"ruleId":"426","severity":1,"message":"427","line":237,"column":66,"nodeType":"425","endLine":237,"endColumn":98},{"ruleId":"404","severity":1,"message":"445","line":4,"column":8,"nodeType":"406","messageId":"407","endLine":4,"endColumn":18},{"ruleId":"404","severity":1,"message":"446","line":5,"column":8,"nodeType":"406","messageId":"407","endLine":5,"endColumn":16},{"ruleId":"433","severity":1,"message":"434","line":96,"column":37,"nodeType":"435","messageId":"436","endLine":96,"endColumn":39},{"ruleId":"433","severity":1,"message":"434","line":119,"column":37,"nodeType":"435","messageId":"436","endLine":119,"endColumn":39},{"ruleId":"433","severity":1,"message":"434","line":144,"column":77,"nodeType":"435","messageId":"436","endLine":144,"endColumn":79},{"ruleId":"433","severity":1,"message":"434","line":146,"column":24,"nodeType":"435","messageId":"436","endLine":146,"endColumn":26},{"ruleId":"433","severity":1,"message":"434","line":151,"column":31,"nodeType":"435","messageId":"436","endLine":151,"endColumn":33},{"ruleId":"404","severity":1,"message":"443","line":162,"column":34,"nodeType":"406","messageId":"407","endLine":162,"endColumn":48},{"ruleId":"433","severity":1,"message":"434","line":166,"column":24,"nodeType":"435","messageId":"436","endLine":166,"endColumn":26},{"ruleId":"433","severity":1,"message":"434","line":173,"column":31,"nodeType":"435","messageId":"436","endLine":173,"endColumn":33},{"ruleId":"433","severity":1,"message":"434","line":189,"column":73,"nodeType":"435","messageId":"436","endLine":189,"endColumn":75},{"ruleId":"433","severity":1,"message":"434","line":191,"column":20,"nodeType":"435","messageId":"436","endLine":191,"endColumn":22},{"ruleId":"433","severity":1,"message":"434","line":196,"column":27,"nodeType":"435","messageId":"436","endLine":196,"endColumn":29},{"ruleId":"404","severity":1,"message":"443","line":207,"column":30,"nodeType":"406","messageId":"407","endLine":207,"endColumn":44},{"ruleId":"433","severity":1,"message":"434","line":211,"column":20,"nodeType":"435","messageId":"436","endLine":211,"endColumn":22},{"ruleId":"433","severity":1,"message":"434","line":218,"column":27,"nodeType":"435","messageId":"436","endLine":218,"endColumn":29},{"ruleId":"433","severity":1,"message":"434","line":232,"column":37,"nodeType":"435","messageId":"436","endLine":232,"endColumn":39},{"ruleId":"433","severity":1,"message":"434","line":259,"column":37,"nodeType":"435","messageId":"436","endLine":259,"endColumn":39},{"ruleId":"433","severity":1,"message":"444","line":274,"column":64,"nodeType":"435","messageId":"436","endLine":274,"endColumn":66},{"ruleId":"426","severity":1,"message":"437","line":277,"column":67,"nodeType":"425","endLine":277,"endColumn":125},{"ruleId":"423","severity":1,"message":"424","line":277,"column":125,"nodeType":"425","endLine":277,"endColumn":146},{"ruleId":"426","severity":1,"message":"427","line":286,"column":45,"nodeType":"425","endLine":286,"endColumn":120},{"ruleId":"426","severity":1,"message":"437","line":297,"column":33,"nodeType":"425","endLine":297,"endColumn":91},{"ruleId":"426","severity":1,"message":"427","line":309,"column":29,"nodeType":"425","endLine":309,"endColumn":99},{"ruleId":"423","severity":1,"message":"424","line":309,"column":99,"nodeType":"425","endLine":309,"endColumn":125},{"ruleId":"426","severity":1,"message":"427","line":320,"column":75,"nodeType":"425","endLine":320,"endColumn":105},{"ruleId":"426","severity":1,"message":"427","line":325,"column":53,"nodeType":"425","endLine":325,"endColumn":121},{"ruleId":"433","severity":1,"message":"434","line":332,"column":65,"nodeType":"435","messageId":"436","endLine":332,"endColumn":67},{"ruleId":"426","severity":1,"message":"427","line":336,"column":33,"nodeType":"425","endLine":336,"endColumn":96},{"ruleId":"426","severity":1,"message":"427","line":355,"column":29,"nodeType":"425","endLine":355,"endColumn":99},{"ruleId":"423","severity":1,"message":"424","line":355,"column":99,"nodeType":"425","endLine":355,"endColumn":125},{"ruleId":"426","severity":1,"message":"427","line":366,"column":75,"nodeType":"425","endLine":366,"endColumn":176},{"ruleId":"426","severity":1,"message":"427","line":371,"column":53,"nodeType":"425","endLine":371,"endColumn":125},{"ruleId":"433","severity":1,"message":"434","line":378,"column":70,"nodeType":"435","messageId":"436","endLine":378,"endColumn":72},{"ruleId":"426","severity":1,"message":"427","line":382,"column":33,"nodeType":"425","endLine":382,"endColumn":100},{"ruleId":"404","severity":1,"message":"441","line":2,"column":15,"nodeType":"406","messageId":"407","endLine":2,"endColumn":20},{"ruleId":"404","severity":1,"message":"441","line":2,"column":15,"nodeType":"406","messageId":"407","endLine":2,"endColumn":20},{"ruleId":"404","severity":1,"message":"452","line":2,"column":8,"nodeType":"406","messageId":"407","endLine":2,"endColumn":12},{"ruleId":"404","severity":1,"message":"410","line":3,"column":10,"nodeType":"406","messageId":"407","endLine":3,"endColumn":17},{"ruleId":"426","severity":1,"message":"427","line":20,"column":27,"nodeType":"425","endLine":20,"endColumn":39},{"ruleId":"426","severity":1,"message":"427","line":20,"column":57,"nodeType":"425","endLine":20,"endColumn":69},{"ruleId":"426","severity":1,"message":"427","line":21,"column":13,"nodeType":"425","endLine":21,"endColumn":25},{"ruleId":"423","severity":1,"message":"424","line":21,"column":25,"nodeType":"425","endLine":21,"endColumn":51},{"ruleId":"426","severity":1,"message":"427","line":21,"column":56,"nodeType":"425","endLine":21,"endColumn":68},{"ruleId":"423","severity":1,"message":"424","line":21,"column":68,"nodeType":"425","endLine":21,"endColumn":95},{"ruleId":"433","severity":1,"message":"434","line":49,"column":30,"nodeType":"435","messageId":"436","endLine":49,"endColumn":32},{"ruleId":"433","severity":1,"message":"434","line":110,"column":27,"nodeType":"435","messageId":"436","endLine":110,"endColumn":29},{"ruleId":"433","severity":1,"message":"434","line":120,"column":29,"nodeType":"435","messageId":"436","endLine":120,"endColumn":31},{"ruleId":"433","severity":1,"message":"434","line":149,"column":27,"nodeType":"435","messageId":"436","endLine":149,"endColumn":29},{"ruleId":"433","severity":1,"message":"434","line":159,"column":29,"nodeType":"435","messageId":"436","endLine":159,"endColumn":31},{"ruleId":"433","severity":1,"message":"434","line":176,"column":54,"nodeType":"435","messageId":"436","endLine":176,"endColumn":56},{"ruleId":"433","severity":1,"message":"434","line":176,"column":91,"nodeType":"435","messageId":"436","endLine":176,"endColumn":93},{"ruleId":"438","severity":1,"message":"439","line":178,"column":128,"nodeType":"440","endLine":178,"endColumn":139},{"ruleId":"438","severity":1,"message":"439","line":184,"column":128,"nodeType":"440","endLine":184,"endColumn":139},{"ruleId":"426","severity":1,"message":"427","line":192,"column":19,"nodeType":"425","endLine":192,"endColumn":79},{"ruleId":"423","severity":1,"message":"424","line":192,"column":79,"nodeType":"425","endLine":192,"endColumn":104},{"ruleId":"426","severity":1,"message":"427","line":194,"column":23,"nodeType":"425","endLine":194,"endColumn":77},{"ruleId":"423","severity":1,"message":"424","line":201,"column":55,"nodeType":"425","endLine":201,"endColumn":89},{"ruleId":"423","severity":1,"message":"424","line":202,"column":53,"nodeType":"425","endLine":202,"endColumn":86},{"ruleId":"423","severity":1,"message":"424","line":203,"column":55,"nodeType":"425","endLine":203,"endColumn":88},{"ruleId":"423","severity":1,"message":"424","line":204,"column":52,"nodeType":"425","endLine":204,"endColumn":85},"no-native-reassign",["453"],"no-negated-in-lhs",["454"],"no-unused-vars","'NotFound' is assigned a value but never used.","Identifier","unusedVar","'Redirect' is defined but never used.","'withRouter' is defined but never used.","'NavLink' is defined but never used.","no-useless-escape","Unnecessary escape character: \\[.","Literal","unnecessaryEscape",["455","456"],["457","458"],"no-unreachable","Unreachable code.","ReturnStatement","unreachableCode","'payload' is assigned a value but never used.","'LC' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","'loginHelper' is defined but never used.",["459","460"],["461","462"],"'kyubiExtensionId' is defined but never used.","'Sidebar' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'kyubi' is defined but never used.","'Animated' is defined but never used.","'WelcomeMessage' is assigned a value but never used.","Expected '!==' and instead saw '!='.","'deleteLogo' is defined but never used.","'viewLogo' is defined but never used.","'params' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'logo' is defined but never used.","no-global-assign","no-unsafe-negation",{"messageId":"463","fix":"464","desc":"465"},{"messageId":"466","fix":"467","desc":"468"},{"messageId":"463","fix":"469","desc":"465"},{"messageId":"466","fix":"470","desc":"468"},{"messageId":"463","fix":"471","desc":"465"},{"messageId":"466","fix":"472","desc":"468"},{"messageId":"463","fix":"473","desc":"465"},{"messageId":"466","fix":"474","desc":"468"},"removeEscape",{"range":"475","text":"476"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"477","text":"478"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"479","text":"476"},{"range":"480","text":"478"},{"range":"481","text":"476"},{"range":"482","text":"478"},{"range":"483","text":"476"},{"range":"484","text":"478"},[1796,1797],"",[1796,1796],"\\",[1821,1822],[1821,1821],[1776,1777],[1776,1776],[1801,1802],[1801,1801]]