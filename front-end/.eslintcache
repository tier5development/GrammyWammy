[{"C:\\GrammyWammy\\front-end\\src\\index.js":"1","C:\\GrammyWammy\\front-end\\src\\reportWebVitals.js":"2","C:\\GrammyWammy\\front-end\\src\\App.js":"3","C:\\GrammyWammy\\front-end\\src\\components\\common\\logger.js":"4","C:\\GrammyWammy\\front-end\\src\\components\\layouts\\AppLayout.js":"5","C:\\GrammyWammy\\front-end\\src\\routes\\AppRoute.js":"6","C:\\GrammyWammy\\front-end\\src\\components\\modules\\Auth\\Login.js":"7","C:\\GrammyWammy\\front-end\\src\\components\\modules\\Auth\\logout.js":"8","C:\\GrammyWammy\\front-end\\src\\components\\modules\\Setting\\setting.js":"9","C:\\GrammyWammy\\front-end\\src\\components\\modules\\AutoResponder\\autoResponderCreate.js":"10","C:\\GrammyWammy\\front-end\\src\\components\\modules\\Auth\\NotFound.js":"11","C:\\GrammyWammy\\front-end\\src\\components\\modules\\AutoResponder\\autoResponderEdit.js":"12","C:\\GrammyWammy\\front-end\\src\\components\\modules\\Main\\Dashboard.js":"13","C:\\GrammyWammy\\front-end\\src\\components\\modules\\Auth\\ForgotPassword.js":"14","C:\\GrammyWammy\\front-end\\src\\components\\modules\\AutoResponder\\autoResponder.js":"15","C:\\GrammyWammy\\front-end\\src\\services\\authService.js":"16","C:\\GrammyWammy\\front-end\\src\\components\\modules\\Setting\\DefaultMessageSettings\\defaultMessageSettings.js":"17","C:\\GrammyWammy\\front-end\\src\\components\\modules\\Common\\sidebar.js":"18","C:\\GrammyWammy\\front-end\\src\\services\\setting.js":"19","C:\\GrammyWammy\\front-end\\src\\components\\modules\\Common\\footer.js":"20","C:\\GrammyWammy\\front-end\\src\\services\\autoResponderServices.js":"21","C:\\GrammyWammy\\front-end\\src\\helper\\loginHelper.js":"22","C:\\GrammyWammy\\front-end\\src\\components\\modules\\Common\\header.js":"23","C:\\GrammyWammy\\front-end\\src\\components\\modules\\Setting\\ResponseSetting\\responseSetting.js":"24","C:\\GrammyWammy\\front-end\\src\\config.js":"25","C:\\GrammyWammy\\front-end\\src\\helper\\helper.js":"26","C:\\GrammyWammy\\front-end\\src\\components\\modules\\Setting\\DefaultMessageSettings\\IndividualComponents\\segment.js":"27","C:\\GrammyWammy\\front-end\\src\\components\\modules\\Setting\\ResponseSetting\\IndividualComponents\\autoResponder.js":"28","C:\\GrammyWammy\\front-end\\src\\components\\modules\\Setting\\ResponseSetting\\IndividualComponents\\defaultMessage.js":"29","C:\\GrammyWammy\\front-end\\src\\components\\modules\\Setting\\DefaultMessageSettings\\IndividualComponents\\group.js":"30","C:\\GrammyWammy\\front-end\\src\\services\\segmentServices.js":"31","C:\\GrammyWammy\\front-end\\src\\services\\groupServices.js":"32"},{"size":554,"mtime":1615822762606,"results":"33","hashOfConfig":"34"},{"size":375,"mtime":1615822762606,"results":"35","hashOfConfig":"34"},{"size":353,"mtime":1615822762490,"results":"36","hashOfConfig":"34"},{"size":219,"mtime":1615822762505,"results":"37","hashOfConfig":"34"},{"size":328,"mtime":1615822762505,"results":"38","hashOfConfig":"34"},{"size":2053,"mtime":1618312365571,"results":"39","hashOfConfig":"34"},{"size":10492,"mtime":1622545049363,"results":"40","hashOfConfig":"34"},{"size":1639,"mtime":1622545049385,"results":"41","hashOfConfig":"34"},{"size":2034,"mtime":1615822762537,"results":"42","hashOfConfig":"34"},{"size":8034,"mtime":1615822762521,"results":"43","hashOfConfig":"34"},{"size":289,"mtime":1615822762505,"results":"44","hashOfConfig":"34"},{"size":9522,"mtime":1615822762537,"results":"45","hashOfConfig":"34"},{"size":6795,"mtime":1622545049396,"results":"46","hashOfConfig":"34"},{"size":8836,"mtime":1622621989700,"results":"47","hashOfConfig":"34"},{"size":8149,"mtime":1622545049387,"results":"48","hashOfConfig":"34"},{"size":2242,"mtime":1618312365573,"results":"49","hashOfConfig":"34"},{"size":2322,"mtime":1615822762537,"results":"50","hashOfConfig":"34"},{"size":4154,"mtime":1617526509357,"results":"51","hashOfConfig":"34"},{"size":3511,"mtime":1615822762621,"results":"52","hashOfConfig":"34"},{"size":1610,"mtime":1622545049388,"results":"53","hashOfConfig":"34"},{"size":4204,"mtime":1615822762606,"results":"54","hashOfConfig":"34"},{"size":4737,"mtime":1622545049409,"results":"55","hashOfConfig":"34"},{"size":18183,"mtime":1622545049395,"results":"56","hashOfConfig":"34"},{"size":2140,"mtime":1615822762537,"results":"57","hashOfConfig":"34"},{"size":279,"mtime":1622621429819,"results":"58","hashOfConfig":"34"},{"size":7628,"mtime":1622621050178,"results":"59","hashOfConfig":"34"},{"size":23865,"mtime":1622545049400,"results":"60","hashOfConfig":"34"},{"size":27415,"mtime":1622545049403,"results":"61","hashOfConfig":"34"},{"size":13044,"mtime":1622545049404,"results":"62","hashOfConfig":"34"},{"size":29385,"mtime":1622545049399,"results":"63","hashOfConfig":"34"},{"size":2775,"mtime":1615822762606,"results":"64","hashOfConfig":"34"},{"size":2755,"mtime":1615822762606,"results":"65","hashOfConfig":"34"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},"1tt6fqb",{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"68"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":25,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"68"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"68"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"68"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"68"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"68"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"68"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"68"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"103","messages":"104","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"68"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"68"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"68"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"68"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"68"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"68"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125","usedDeprecatedRules":"68"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":24,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"68"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131","usedDeprecatedRules":"68"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136","usedDeprecatedRules":"68"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":40,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139","usedDeprecatedRules":"68"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":26,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142","usedDeprecatedRules":"68"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145","usedDeprecatedRules":"68"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":44,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148","usedDeprecatedRules":"68"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151","usedDeprecatedRules":"68"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154"},"C:\\GrammyWammy\\front-end\\src\\index.js",[],["155","156"],"C:\\GrammyWammy\\front-end\\src\\reportWebVitals.js",[],"C:\\GrammyWammy\\front-end\\src\\App.js",[],"C:\\GrammyWammy\\front-end\\src\\components\\common\\logger.js",[],"C:\\GrammyWammy\\front-end\\src\\components\\layouts\\AppLayout.js",[],"C:\\GrammyWammy\\front-end\\src\\routes\\AppRoute.js",["157"],"import React, { lazy, Suspense } from \"react\";\r\nimport { Route, Switch, withRouter } from \"react-router-dom\";\r\nimport log from \"../components/common/logger\";\r\nimport { Container } from \"reactstrap\";\r\nimport classNames from \"classnames\";\r\n\r\n\r\n\r\nconst Login = lazy(() => import(\"../components/modules/Auth/Login\"));\r\nconst ForgotPassword = lazy(() => import(\"../components/modules/Auth/ForgotPassword\"));\r\nconst NotFound = lazy(() => import(\"../components/modules/Auth/NotFound\"));\r\nconst Dashboard = lazy(() => import(\"../components/modules/Main/Dashboard\"));\r\nconst Setting = lazy(() => import(\"../components/modules/Setting/setting\"));\r\nconst AutoResponder = lazy(() => import(\"../components/modules/AutoResponder/autoResponder\"));\r\nconst AutoResponderCreate = lazy(() =>  import(\"../components/modules/AutoResponder/autoResponderCreate\"))\r\nconst AutoResponderEdit = lazy(() =>  import(\"../components/modules/AutoResponder/autoResponderEdit\"));\r\n\r\nconst Logout  = lazy(() =>  import(\"../components/modules/Auth/logout\"));\r\nconst AppRoute = ({ sidebarIsOpen, toggleSidebar }) => {\r\n  log.info(\"**** AppRoute ****\");\r\n\r\n  return (\r\n    <Suspense fallback={<div />}>\r\n      <Container\r\n        fluid\r\n        className={classNames(\"content\", { \"is-open\": sidebarIsOpen })}\r\n      >\r\n        {/* <Topbar toggleSidebar={toggleSidebar} /> */}\r\n        <Switch>\r\n        <Route exact path=\"/\" test=\"abc\" component={Login} />\r\n        <Route exact path=\"/forgotPassword\" component={ForgotPassword} />\r\n        <Route  exact  path=\"/dashboard\" component={Dashboard} />\r\n        <Route  exact  path=\"/setting\" component={Setting} />\r\n        <Route  exact  path=\"/autoresponder\" component={AutoResponder} />\r\n        <Route  exact  path=\"/autorespondercreate\" component={AutoResponderCreate} />\r\n        <Route  exact  path=\"/autoresponderedit/:idfy\"  component={AutoResponderEdit} />\r\n        \r\n        <Route  exact  path=\"/logout\"  component={Logout} />\r\n        </Switch>\r\n      </Container>\r\n    </Suspense>\r\n  );\r\n};\r\nexport default withRouter(AppRoute);\r\n","C:\\GrammyWammy\\front-end\\src\\components\\modules\\Auth\\Login.js",["158","159","160","161","162","163","164","165","166","167","168","169","170","171","172","173","174","175","176","177","178","179","180","181","182"],"import React, { Component} from \"react\";\r\nimport { Redirect, withRouter, NavLink } from 'react-router-dom';\r\n\r\nimport {kyubiExtensionId}  from \"../../../config\";\r\nimport \"./login.css\";\r\nimport AuthServices from \"../../../services/authService\";\r\nimport loginHelper from \"../../../helper/loginHelper\";\r\nimport  {OpenPoweredBy,OpenTier5Partnership,OpenFacebookLink,OpenMessengerLink,OpenSignupLink} from  '../../../helper/helper';\r\n\r\n//import logo from \"../../../images/logo1.svg\";\r\nimport logo from \"../../../images/Logo_White.svg\";\r\nimport biglogo from \"../../../images/biglogo.svg\";\r\nimport LoaderLogo from \"../../../images/Loader.gif\"\r\nimport mail from \"../../../images/mail.svg\";\r\nimport lock from \"../../../images/lock.svg\";\r\nimport instagram from \"../../../images/Instagram_Icon.svg\";\r\nimport messanger from \"../../../images/Messanger.svg\";\r\nimport path from \"../../../images/Path3.svg\";\r\nclass Login extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n          email:\"\",\r\n          password:\"\",\r\n          loader:false,\r\n          error:false,\r\n          errorMessage:\"\",\r\n          loadingstatus:false\r\n        }\r\n        \r\n\r\n      }\r\n    /**\r\n    * @inputChangeHandller \r\n    * getting input field values\r\n    */\r\n    inputChangeHandller = (event) => {\r\n        this.setState({ [event.target.name]: event.target.value })\r\n    }\r\n    /**\r\n    * @checkBackgroundFetching \r\n    * Check  Wether Background Fetching is  done or not\r\n    */\r\n    checkBackgroundFetching() {\r\n            // setInterval(() => {\r\n            //     let inBackgroundFetching=localStorage.getItem('inBackgroundFetching');\r\n            //     console.log(\"This check ++++++++++\",inBackgroundFetching);\r\n            //     if(inBackgroundFetching !== \"true\"){\r\n            //         console.log(\"This check 111++++++++++\",inBackgroundFetching);\r\n            //         this.props.history.push('/dashboard');       \r\n                               \r\n            //     }\r\n            // },2000);\r\n        }\r\n    /**\r\n    * @handleLoginFormValidation \r\n    * email and password field blank validation\r\n    */\r\n    handleLoginFormValidation() {\r\n        let fields = {\r\n        email: this.state.email,\r\n        password: this.state.password,\r\n        };\r\n        \r\n        let formIsValid = true;\r\n        let emailRegex = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n        let checkResult = emailRegex.test(String(this.state.email).toLowerCase());\r\n        if (!fields[\"email\"]) {\r\n        formIsValid = false;\r\n        this.setState({errorMessage:\"Email Is Required\"});\r\n        return formIsValid;\r\n        } else if (checkResult === false) {\r\n        formIsValid = false;\r\n        this.setState({errorMessage:\"Please enter a proper email\"});\r\n        return formIsValid;\r\n        }\r\n        else if (!fields[\"password\"]) {\r\n        formIsValid = false;\r\n        this.setState({errorMessage:\"Password Is Required\"});\r\n        return formIsValid;\r\n        }else{\r\n            formIsValid = true;\r\n            return formIsValid;\r\n        }\r\n        \r\n        return formIsValid;\r\n    }\r\n     /**\r\n    * @loginHandler \r\n    * in this function we are checking the email id, password\r\n    * and if the details are correct then login them and also take care about the remember password one\r\n    */\r\n    loginHandler = async (event) => {\r\n        event.preventDefault();\r\n        \r\n        this.setState({ loader: true });\r\n        let payload = {\r\n        email: this.state.email,\r\n        password: this.state.password,\r\n        }\r\n        if (this.handleLoginFormValidation()) {\r\n            this.setState({ error:false});\r\n            this.setState({errorMessage:\"\"});\r\n            let payload  ={\r\n                extensionId: kyubiExtensionId,\r\n                email: this.state.email,\r\n                password: this.state.password,\r\n            }\r\n            await AuthServices.login(payload).then(async result=>{\r\n                if(result.data.code  === 1){\r\n                    let token = result.data.token;\r\n                    let tokens = token.split(\".\");\r\n                    tokens =atob(tokens[1]);\r\n                    let myObj = JSON.parse(tokens);\r\n                    console.log(\"Tis Is my Obj\",myObj)\r\n                    localStorage.setItem('kyubi_user_token', myObj.user.id);\r\n                    localStorage.setItem('inBackgroundFetching', true);\r\n                    let LC=loginHelper.login();\r\n                        setTimeout(() => {\r\n                        this.setState({ loader: false });\r\n                        this.props.history.push('/dashboard');\r\n                        console.log(\"sorry\");\r\n                    }, 4000);\r\n                }else{\r\n                    this.setState({ loader: false });\r\n                    this.setState({errorMessage:\"User not found or In-Active\"});\r\n                    this.setState({ error:true});\r\n                }\r\n                \r\n\r\n            }).catch(error=>{\r\n                console.log(error);\r\n                this.setState({ loader: false });\r\n                this.setState({errorMessage:\"User not found or In-Active\"});\r\n                this.setState({ error:true});\r\n            });\r\n            \r\n\r\n\r\n        }else{\r\n            this.setState({ error:true,loader: false});\r\n\r\n        }\r\n        //this.setState({ loader: false });\r\n    }\r\n    LinkHandler(option,event){\r\n        event.preventDefault();\r\n        if(option == \"optOne\"){\r\n            OpenSignupLink();\r\n        }\r\n        if(option == \"optTwo\"){\r\n            OpenPoweredBy();\r\n        }\r\n        if(option == \"optThree\"){\r\n            OpenTier5Partnership();\r\n        }\r\n        if(option == \"optFour\"){\r\n            OpenFacebookLink();\r\n        }\r\n        if(option == \"optFive\"){\r\n            OpenMessengerLink();\r\n        }\r\n    }\r\n    callFrameHandler    =   async   (event) =>{\r\n        loginHelper.framecaller();\r\n    }\r\n    componentDidMount(){\r\n        this.setState({ loader: true });\r\n        let kyubi_user_token=localStorage.getItem('kyubi_user_token');\r\n        let inBackgroundFetching=localStorage.getItem('inBackgroundFetching');\r\n        if(kyubi_user_token){\r\n            // if(inBackgroundFetching !== \"true\"){\r\n            //     this.props.history.push('/dashboard');    \r\n            // }else{\r\n            //     this.setState({ loader: false });\r\n            // }\r\n            this.props.history.push('/dashboard');\r\n        //    let AutoResponderStatus = localStorage.getItem('autoresponder');\r\n        //    let DefaultMessageStatus = localStorage.getItem('default_message');\r\n        //    let homeTabStatus = localStorage.getItem('home_tab');\r\n        //    if((AutoResponderStatus == 1 || DefaultMessageStatus == 1) && homeTabStatus== 0 ){\r\n        //       window.open(\"https://www.instagram.com/\");   \r\n        //    }\r\n            //window.open(\"https://www.w3schools.com\");    \r\n        }else{\r\n            this.setState({ loader: false });\r\n        }\r\n        \r\n    }\r\n\r\n    render() {\r\n        \r\n        return (\r\n            <div>\r\n                {this.state.loader && (   \r\n                <div class=\"after_login_refresh\"><img src={LoaderLogo} alt=\"\"/></div>\r\n                )}\r\n                <div className=\"loginscreen\">\r\n                <div className=\"graphics1\"></div>\r\n                <div className=\"graphics2\"></div>\r\n                <div className=\"logo\"><img src={logo} /></div>\r\n                <div className=\"login_container\">\r\n                    <div className=\"login_welcome_block\">\r\n                        Welcome,\r\n                        <h3>Login to continue!</h3>\r\n                    </div>\r\n                    <div className=\"login_block\">\r\n                            <form>\r\n                                <label>\r\n                                    <span><img src={mail}/></span>\r\n                                    <input \r\n                                    name=\"email\"\r\n                                    id=\"email\"\r\n                                    type=\"email\"\r\n                                    placeholder=\"Email Address\"\r\n                                    onChange={this.inputChangeHandller}\r\n                                    />\r\n                                </label>\r\n                                <label>\r\n                                    <span><img src={lock} /></span>\r\n                                    <input \r\n                                        type=\"password\" \r\n                                        placeholder=\"**********\"\r\n                                        name=\"password\"\r\n                                        id=\"password\"\r\n                                        onChange={this.inputChangeHandller}\r\n                                    />\r\n                                </label>\r\n                                <div className=\"text-right gap1\">\r\n                                    <NavLink  to=\"/forgotPassword\">\r\n                                        <p className=\"link\">Forgot Password ?</p>\r\n                                    </NavLink>\r\n                                </div>\r\n                                <button type=\"button\" className=\"blue_btn\" onClick={this.loginHandler} >LOGIN</button>\r\n                                <div className=\"login_signup\">\r\n                                    Don’t have an account? <a href=\"#\" onClick={(event) => this.OpenSignupLink(\"optOne\",event)} >Sign up</a>\r\n                                </div>\r\n                                {this.state.error && (   \r\n                                    <div className=\"error\"> {this.state.errorMessage} *</div>\r\n                                )}\r\n                            </form>\r\n                    </div>  \r\n                    \r\n                    <div className=\"footer\">\r\n                        <p>Powered by <a  onClick={(event) => this.LinkHandler(\"optTwo\",event)} href=\"#\">GrammyWammy</a> and the <a  onClick={(event) => this.LinkHandler(\"optThree\",event)}  href=\"#\">GrammyWammy Partnership</a></p>\r\n                        <a  onClick={(event) => this.LinkHandler(\"optFour\",event)}  href=\"#\"><img src={path}/></a> <a  onClick={(event) => this.LinkHandler(\"optFive\",event)} href=\"#\"><img src={messanger}/></a>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default Login;","C:\\GrammyWammy\\front-end\\src\\components\\modules\\Auth\\logout.js",["183","184","185","186"],"import React, { Component} from \"react\";\r\nimport { Redirect, withRouter } from 'react-router-dom';\r\nimport loginHelper from \"../../../helper/loginHelper\";\r\nimport {kyubiExtensionId}  from \"../../../config\";\r\nimport \"./login.css\";\r\n\r\nclass logout extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n          \r\n        }\r\n        \r\n\r\n      }\r\n      componentDidMount(){\r\n        let LO = loginHelper.logout();\r\n        \r\n        \r\n        this.props.history.push('/');\r\n         \r\n      }\r\n    render() {\r\n        return (\r\n\r\n          <div className=\"wrapper\">\r\n            \r\n            \r\n\r\n            <div className=\"content-wrapper\">\r\n              <section className=\"content-header\">\r\n                <div className=\"container-fluid\">\r\n                  <div className=\"row mb-12\">\r\n                    <div className=\"col-sm-6\">\r\n                      \r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </section>\r\n              <section className=\"content\">\r\n                <div className=\"container-fluid\">\r\n                  <div className=\"row\">\r\n                    <div className=\"col-md-12\">\r\n                    <div class=\"alert alert-danger alert-dismissible\">\r\n                  \r\n                  <h5><i class=\"icon fas fa-ban\"></i> Alert!</h5>\r\n                  Thanks For Being With Us We are Loging You Out\r\n                </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </section>\r\n            </div>\r\n          </div>\r\n          \r\n        );\r\n    }\r\n}\r\nexport default logout;","C:\\GrammyWammy\\front-end\\src\\components\\modules\\Setting\\setting.js",["187","188","189"],"import React, { Component } from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport Header from \"../Common/header\";\r\nimport Footer from \"../Common/footer\";\r\nimport biglogo from \"../../../images/biglogo.svg\";\r\nimport ResponseSetting from \"../Setting/ResponseSetting/responseSetting\";\r\nimport MessageSetting  from \"../Setting/DefaultMessageSettings/defaultMessageSettings\"\r\nclass setting extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n          responseSetting:1,\r\n          messageSetting:0,\r\n          loader:false\r\n        }\r\n      }\r\n      activateResponseSetting  = async (event) =>  {\r\n        event.preventDefault();\r\n        this.setState({\r\n            responseSetting:1,\r\n            messageSetting:0\r\n        })\r\n        \r\n      }\r\n      activateMessageSetting  = async (event) =>  {\r\n        event.preventDefault();\r\n        this.setState({\r\n            responseSetting:0,\r\n            messageSetting:1\r\n        })\r\n        \r\n      }\r\n      render() {\r\n        return (\r\n            <div>\r\n                {this.state.loader && (   \r\n                    <div className=\"after_login_refresh\"><img src={biglogo} alt=\"\"/></div>\r\n                )}\r\n                <div className=\"dashboard\">\r\n                <Header selectedtab=\"setting\"></Header>\r\n                <ul class=\"maintab\">\r\n                    <li><a href=\"\" onClick={this.activateResponseSetting} id=\"responce\" className={this.state.responseSetting ?\"active\":\"\"}>Response Settings</a></li>\r\n                    <li><a href=\"\" onClick={this.activateMessageSetting} id=\"message\" className={this.state.messageSetting ?\"active\":\"\"}>Message Settings</a></li>\r\n                </ul>\r\n                {this.state.responseSetting ?\r\n                <ResponseSetting></ResponseSetting>\r\n                :\r\n                <MessageSetting></MessageSetting>\r\n                }\r\n                <Footer></Footer>\r\n                </div>\r\n            </div>\r\n\r\n        )\r\n                }\r\n}\r\nexport default setting;","C:\\GrammyWammy\\front-end\\src\\components\\modules\\AutoResponder\\autoResponderCreate.js",["190","191","192"],"import React, { Component } from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport AutoResponderService from  \"../../../services/autoResponderServices\"\r\nimport Sidebar from \"../Common/sidebar\"\r\nimport ReactDOM from 'react-dom';\r\nimport { WithContext as ReactTags } from 'react-tag-input';\r\nconst KeyCodes = {\r\n    comma: 188,\r\n    enter: 13,\r\n  };\r\n  \r\nconst delimiters = [KeyCodes.comma, KeyCodes.enter];\r\n  \r\nclass autoResponderCreate extends Component {\r\n    constructor(props) {\r\n      super(props)\r\n      this.state = {\r\n        auto_responder_name:\"\",\r\n        auto_responder_message:\"\",\r\n        auto_responder_status:1,\r\n        loader:false,\r\n        auto_responder_keywords: [],\r\n      };\r\n        this.handleDelete = this.handleDelete.bind(this);\r\n        this.handleAddition = this.handleAddition.bind(this);\r\n        \r\n    }\r\n    handleDelete(i) {\r\n        const { auto_responder_keywords } = this.state;\r\n        this.setState({\r\n            auto_responder_keywords: auto_responder_keywords.filter((auto_responder_keyword, index) => index !== i),\r\n        });\r\n    }\r\n\r\n    handleAddition(auto_responder_keyword) {\r\n        this.setState(state => ({ auto_responder_keywords: [...state.auto_responder_keywords, auto_responder_keyword] }));\r\n    }\r\n\r\n    \r\n    /**\r\n        * @inputChangeHandller \r\n        * getting input field values\r\n    */\r\n    inputChangeHandller = (event) => {\r\n        this.setState({ [event.target.name]: event.target.value })\r\n    }\r\n    autoSetting = () => {\r\n        console.log(\"hiyy\",this.state.auto_responder_status )\r\n        if(this.state.auto_responder_status === 0){\r\n            this.setState({auto_responder_status:1})\r\n        }else{\r\n            this.setState({auto_responder_status:0})\r\n        }\r\n    }\r\n    createAutoResponderGroupHandler =  (event) =>{\r\n        this.setState({loader:true});\r\n        event.preventDefault();\r\n        let Token=localStorage.getItem(\"kyubi_user_token\");\r\n        let payload = {\r\n            user_id:Token,\r\n            auto_responder_name:this.state.auto_responder_name,\r\n            auto_responder_keywords:this.state.auto_responder_keywords,\r\n            auto_responder_message:this.state.auto_responder_message,\r\n            auto_responder_status:this.state.auto_responder_status\r\n        }\r\n        console.log(\"This I gottttt\",payload);\r\n        AutoResponderService.createAutoResponder(payload).then(response =>{\r\n          \r\n          this.setState({loader:false});\r\n          this.props.history.push('/autoresponder');\r\n        });\r\n      }\r\n    render() {\r\n        const { auto_responder_keywords } = this.state;\r\n        return (\r\n            <div className=\"wrapper\">\r\n                {this.state.loader && (   \r\n                    <div className=\"overlay\">\r\n                    <i className=\"fas fa-2x fa-sync-alt fa-spin\"></i>\r\n                    </div>\r\n                )}\r\n                <Sidebar  selectedtab=\"setting\"></Sidebar>\r\n                <div className=\"content-wrapper\">\r\n                <section className=\"content-header\">\r\n                    <div className=\"container-fluid\">\r\n                        <div className=\"row mb-12\">\r\n                            <div className=\"col-sm-6\">\r\n                            <h1>Auto-Responder</h1>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </section>\r\n                <section className=\"content\">\r\n                    <div className=\"container-fluid\">\r\n                        <div className=\"row\">\r\n                            <div className=\"col-md-12\">\r\n                            \r\n                            <div className=\"card card-primary\">\r\n                                <div className=\"card-header\">\r\n                                    <h3 className=\"card-title\"> Create Auto-Responder</h3>\r\n                                </div>\r\n                                <form>\r\n                                <div className=\"card-body\">\r\n                                    \r\n                                    <div className=\"form-group\">\r\n                                        <label for=\"exampleInputEmail1\">Auto-Responder Name</label>\r\n                                        <input type=\"text\"\r\n                                            name=\"auto_responder_name\" \r\n                                            className=\"form-control\" \r\n                                            id=\"exampleInputEmail1\" \r\n                                            placeholder=\"Auto-Responder Name\" \r\n                                            value={this.state.auto_responder_name}\r\n                                            onChange={this.inputChangeHandller}\r\n                                        />\r\n                                    </div>\r\n                                    \r\n                                    <div className=\"form-group\">\r\n                                        <label for=\"exampleInputEmail1\">Auto-Responder Keywords</label>\r\n                                        <ReactTags \r\n                                        placeholder=\"Press enter Or Press , to Create Autoresponder Keywords\"\r\n                                        tags={auto_responder_keywords}\r\n                                        handleDelete={this.handleDelete}\r\n                                        handleAddition={this.handleAddition}\r\n                                        allowUnique={true}\r\n                                        delimiters={delimiters} />\r\n                                        \r\n\r\n\r\n                                        \r\n                                    </div>\r\n                                    <div className=\"form-group\">\r\n                                        <label for=\"exampleInputEmail1\">Auto-Responder Response Message</label>\r\n                                        <textarea \r\n                                        name=\"auto_responder_message\" \r\n                                        value=\"\"  \r\n                                        className=\"form-control\" \r\n                                        rows=\"3\"  \r\n                                        placeholder=\"Please enter the response message....\"\r\n                                        value={this.state.auto_responder_message}\r\n                                        onChange={this.inputChangeHandller}\r\n                                        ></textarea>\r\n                                    </div>\r\n                                    <div className=\"form-group clearfix\">\r\n                                        <div className=\"icheck-success d-inline\">\r\n                                        {this.state.auto_responder_status ?\r\n                                        <input type=\"checkbox\" id=\"checkboxPrimary3\" name=\"auto_responder_status\" onChange={this.autoSetting} checked/>\r\n                                        :\r\n                                        <input type=\"checkbox\" id=\"checkboxPrimary3\" name=\"auto_responder_status\" onChange={this.autoSetting}/>\r\n                                        }\r\n                                        <label for=\"checkboxPrimary3\">\r\n                                            Activate Auto-Responder\r\n                                        </label>\r\n                                        </div>\r\n                                    </div>\r\n                                    \r\n                                </div>           \r\n                                <div className=\"card-footer\">\r\n                                <button type=\"submit\" className=\"btn btn-primary\" onClick={this.createAutoResponderGroupHandler} >Submit</button>\r\n                                </div>\r\n                                </form>\r\n                            </div>\r\n\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </section>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default autoResponderCreate;","C:\\GrammyWammy\\front-end\\src\\components\\modules\\Auth\\NotFound.js",["193","194"],"import React, { Component } from 'react';\r\nimport { Redirect, withRouter } from 'react-router-dom'\r\n\r\nclass NotFound extends Component {\r\n    render() {\r\n        return (\r\n          <div className=\"\">\r\n          Hello Login\r\n          </div>\r\n        );\r\n    }\r\n}\r\nexport default NotFound;","C:\\GrammyWammy\\front-end\\src\\components\\modules\\AutoResponder\\autoResponderEdit.js",["195","196","197"],"import React, { Component } from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport AutoResponderService from  \"../../../services/autoResponderServices\"\r\nimport Sidebar from \"../Common/sidebar\"\r\nimport ReactDOM from 'react-dom';\r\nimport { WithContext as ReactTags } from 'react-tag-input';\r\nconst KeyCodes = {\r\n    comma: 188,\r\n    enter: 13,\r\n  };\r\n  \r\nconst delimiters = [KeyCodes.comma, KeyCodes.enter];\r\nclass autoResponderEdit extends Component {\r\n    constructor(props) {\r\n      super(props)\r\n      this.state = {\r\n        auto_responder_id:\"\",\r\n        auto_responder_name:\"\",\r\n        auto_responder_keywords: [],\r\n        auto_responder_message:\"\",\r\n        auto_responder_status:0,\r\n        loader:false\r\n      };\r\n      this.handleDelete = this.handleDelete.bind(this);\r\n        this.handleAddition = this.handleAddition.bind(this);\r\n    }\r\n    handleDelete(i) {\r\n        const { auto_responder_keywords } = this.state;\r\n        this.setState({\r\n            auto_responder_keywords: auto_responder_keywords.filter((auto_responder_keyword, index) => index !== i),\r\n        });\r\n    }\r\n\r\n    handleAddition(auto_responder_keyword) {\r\n        this.setState(state => ({ auto_responder_keywords: [...state.auto_responder_keywords, auto_responder_keyword] }));\r\n    }\r\n    /**\r\n        * @inputChangeHandller \r\n        * getting input field values\r\n    */\r\n    inputChangeHandller = (event) => {\r\n        this.setState({ [event.target.name]: event.target.value })\r\n    }\r\n    autoSetting = () => {\r\n        console.log(\"hiyy\",this.state.auto_responder_status )\r\n        if(this.state.auto_responder_status === 0){\r\n            this.setState({auto_responder_status:1})\r\n        }else{\r\n            this.setState({auto_responder_status:0})\r\n        }\r\n    }\r\n    updateAutoResponderGroupHandler =  (event) =>{\r\n        this.setState({loader:true});\r\n        event.preventDefault();\r\n        let Token=localStorage.getItem(\"kyubi_user_token\");\r\n        let payload = {\r\n            user_id:Token,\r\n            auto_responder_id:this.state.auto_responder_id,\r\n            auto_responder_name:this.state.auto_responder_name,\r\n            auto_responder_keywords:this.state.auto_responder_keywords,\r\n            auto_responder_message:this.state.auto_responder_message,\r\n            auto_responder_status:this.state.auto_responder_status\r\n        }\r\n        console.log(\"This I am Getting\",payload)\r\n        \r\n        AutoResponderService.updateAutoResponder(payload).then(response =>{\r\n          \r\n          this.setState({loader:false});\r\n           this.props.history.push('/autoresponder');\r\n        });\r\n      }\r\n      backAutoResponderGroupHandler =  (event) =>{\r\n        \r\n          this.props.history.push('/autoresponder');\r\n       \r\n      }\r\n      componentDidMount(){\r\n        this.setState({loader:true});\r\n        let payload = { Id: this.props.match.params.idfy };\r\n        console.log(payload);\r\n        AutoResponderService.editAutoResponder(payload).then(async response=>{\r\n            console.log(response);\r\n            if(response.data.code === 1){\r\n                let newKey=[];\r\n                await response.data.payload[0].autoresponderkeywords.map(async (result, i) => {\r\n                    console.log(result.keywords);\r\n                    newKey.push({\"id\":result.keywords,\"text\":result.keywords})\r\n                });\r\n                this.setState({\r\n                    auto_responder_id:response.data.payload[0]._id,\r\n                    auto_responder_name:response.data.payload[0].auto_responder_name,\r\n                    auto_responder_message:response.data.payload[0].message,\r\n                    auto_responder_status:response.data.payload[0].status,\r\n                    auto_responder_keywords:newKey,\r\n                    loader:false\r\n                  })\r\n            }\r\n        }).catch(error=>{\r\n\r\n        })\r\n      }\r\n    render() {\r\n        const { auto_responder_keywords } = this.state;\r\n        return (\r\n            <div className=\"wrapper\">\r\n                {this.state.loader && (   \r\n                    <div className=\"overlay\">\r\n                    <i className=\"fas fa-2x fa-sync-alt fa-spin\"></i>\r\n                    </div>\r\n                )}\r\n                <Sidebar  selectedtab=\"setting\"></Sidebar>\r\n                <div className=\"content-wrapper\">\r\n                <section className=\"content-header\">\r\n                    <div className=\"container-fluid\">\r\n                        <div className=\"row mb-12\">\r\n                            <div className=\"col-sm-6\">\r\n                            <h1>Auto-Responder</h1>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </section>\r\n                <section className=\"content\">\r\n                    <div className=\"container-fluid\">\r\n                        <div className=\"row\">\r\n                            <div className=\"col-md-12\">\r\n                            \r\n                            <div className=\"card card-primary\">\r\n                                <div className=\"card-header\">\r\n                                    <h3 className=\"card-title\"> Create Auto-Responder</h3>\r\n                                </div>\r\n                                <form>\r\n                                <div className=\"card-body\">\r\n                                    \r\n                                    <div className=\"form-group\">\r\n                                        <label for=\"exampleInputEmail1\">Auto-Responder Name</label>\r\n                                        <input type=\"text\"\r\n                                            name=\"auto_responder_name\" \r\n                                            className=\"form-control\" \r\n                                            id=\"exampleInputEmail1\" \r\n                                            placeholder=\"Auto-Responder Name\" \r\n                                            value={this.state.auto_responder_name}\r\n                                            onChange={this.inputChangeHandller}\r\n                                        />\r\n                                    </div>\r\n                                    \r\n                                    <div className=\"form-group\">\r\n                                        <label for=\"exampleInputEmail1\">Auto-Responder Keywords</label>\r\n                                        <ReactTags \r\n                                        placeholder=\"Press enter Or Press , to Create Autoresponder Keywords\"\r\n                                        tags={auto_responder_keywords}\r\n                                        handleDelete={this.handleDelete}\r\n                                        handleAddition={this.handleAddition}\r\n                                        allowUnique={true}\r\n                                        delimiters={delimiters} />\r\n                                    </div>\r\n                                    <div className=\"form-group\">\r\n                                        <label for=\"exampleInputEmail1\">Auto-Responder Response Message</label>\r\n                                        <textarea \r\n                                        name=\"auto_responder_message\" \r\n                                        value=\"\"  \r\n                                        className=\"form-control\" \r\n                                        rows=\"3\"  \r\n                                        placeholder=\"Please enter the response message....\"\r\n                                        value={this.state.auto_responder_message}\r\n                                        onChange={this.inputChangeHandller}\r\n                                        ></textarea>\r\n                                    </div>\r\n                                    <div className=\"form-group clearfix\">\r\n                                        <div className=\"icheck-success d-inline\">\r\n                                        \r\n                                        {this.state.auto_responder_status ?\r\n                                        <input type=\"checkbox\" id=\"checkboxPrimary3\" name=\"auto_responder_status\" onChange={this.autoSetting} checked/>\r\n                                        :\r\n                                        <input type=\"checkbox\" id=\"checkboxPrimary3\" name=\"auto_responder_status\" onChange={this.autoSetting}/>\r\n                                        }\r\n                                        <label for=\"checkboxPrimary3\">\r\n                                            Activate Auto-Responder\r\n                                        </label>\r\n                                        </div>\r\n                                    </div>\r\n                                    \r\n                                </div>           \r\n                                <div className=\"card-footer\">\r\n                                <button type=\"submit\" className=\"btn btn-primary\" onClick={this.updateAutoResponderGroupHandler} >Update</button>\r\n                                <button type=\"button\" className=\"btn btn-secondary  float-right\"  onClick={this.backAutoResponderGroupHandler} ><i className=\"far fa-arrow-alt-circle-left\"></i> Back</button>\r\n                                </div>\r\n                                </form>\r\n                            </div>\r\n\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </section>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default autoResponderEdit;","C:\\GrammyWammy\\front-end\\src\\components\\modules\\Main\\Dashboard.js",["198","199","200","201","202","203","204","205","206"],"/* eslint-disable no-undef */\r\nimport React, { Component } from 'react';\r\nimport { Redirect, withRouter } from 'react-router-dom'\r\nimport  {OpenFacebookInTab,CheckUserInfoFromFaccebook,OpenFacebookProfileInTab,refreshMessaging} from  '../../../helper/helper'\r\nimport Header from \"../Common/header\";\r\nimport Footer from \"../Common/footer\";\r\nimport settingService from \"../../../services/setting\";\r\nimport AuthServices from \"../../../services/authService\";\r\nimport biglogo from \"../../../images/biglogo.svg\";\r\nimport RefreshLogo from \"../../../images/layer1.svg\";\r\nimport FaceBookLogo from \"../../../images/Instagram.png\";\r\nimport IconLogo from \"../../../images/icon.svg\";\r\nimport AvatarLogo from \"../../../images/Avatar.png\";\r\nimport LoaderLogo from \"../../../images/Loader.gif\"\r\nclass Dashboard extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      fb_image:AvatarLogo,\r\n      fb_name:\"XXXXX\",\r\n      fb_username:\"\",\r\n      fb_id:\"\",\r\n      fb_logged_id:\"\",\r\n      autoresponder:\"0\",\r\n      default_message:\"0\",\r\n      loader:true,\r\n      is_user_logged_in_facebook:\"false\"\r\n    }\r\n  }\r\n\r\n  fbHandler = async (event) => {\r\n    event.preventDefault();\r\n    let fb_logged_id=localStorage.getItem('insta_logged_id');\r\n    console.log(\"You Are Loged in\",fb_logged_id);\r\n    if(fb_logged_id === \"false\"){\r\n      OpenFacebookInTab();\r\n    }else{\r\n      OpenFacebookProfileInTab();\r\n    }\r\n  }\r\n  autoresponderHandler  = async (event) =>{\r\n  }\r\n  refreshHandler  = async (event) =>  {\r\n    event.preventDefault();\r\n    refreshMessaging();\r\n  //   this.setState({\r\n  //     loader:true\r\n  //   })\r\n  //  // CheckUserInfoFromFaccebook();\r\n  //   setTimeout(() => {\r\n\r\n  //     let fb_image=localStorage.getItem('insta_image');\r\n  //     let fb_username=localStorage.getItem('insta_username');\r\n  //     let fb_name=localStorage.getItem('insta_name');\r\n  //     let fb_id=localStorage.getItem('insta_id');\r\n      \r\n  //     this.setState({\r\n  //       fb_image:fb_image,\r\n  //       fb_username:fb_username,\r\n  //       fb_name:fb_name,\r\n  //       fb_id:fb_id,\r\n  //       is_user_logged_in_facebook:localStorage.getItem('insta_logged_id'),\r\n  //       loader:false\r\n  //     })\r\n\r\n  //   }, 4000);\r\n  }\r\n  componentDidMount(){\r\n    let  params ={\r\n      user_rec    :   localStorage.getItem('kyubi_user_token')\r\n      };\r\n      AuthServices.userRetrive(params).then(result=>{\r\n        console.log(\"This I got From backGround SUSSSSS\",result);\r\n        if(result.data.code==1){\r\n                  let responsenewvalue =result.data;\r\n                  localStorage.setItem('kyubi_user_token', responsenewvalue.payload.UserInfo.kyubi_user_token);\r\n                  localStorage.setItem('user_id', responsenewvalue.payload.UserInfo.user_id);\r\n                  localStorage.setItem('insta_id', responsenewvalue.payload.UserInfo.instagram_fbid);\r\n                  localStorage.setItem('insta_username', responsenewvalue.payload.UserInfo.instagram_profile_name);\r\n                  localStorage.setItem('insta_name', responsenewvalue.payload.UserInfo.instagram_name);\r\n                  localStorage.setItem('insta_image', responsenewvalue.payload.UserInfo.instagram_image);\r\n                  \r\n                  if(responsenewvalue.payload.UserSettings.default_message){\r\n                    localStorage.setItem('default_message', responsenewvalue.payload.UserSettings.default_message);\r\n                  }else{\r\n                    localStorage.setItem('default_message', 0);\r\n                  }\r\n                  if(responsenewvalue.payload.UserSettings.default_message_text){\r\n                    localStorage.setItem('default_message_text', responsenewvalue.payload.UserSettings.default_message_text);\r\n                  }else{\r\n                    localStorage.setItem('default_message_text',\"\");\r\n                  }\r\n                  if(responsenewvalue.payload.UserSettings.autoresponder){\r\n                    localStorage.setItem('autoresponder', responsenewvalue.payload.UserSettings.autoresponder);\r\n                    \r\n                  }else{\r\n                    localStorage.setItem('autoresponder', 0);\r\n                  }\r\n                  if(responsenewvalue.payload.UserSettings.default_time_delay){\r\n                    localStorage.setItem('default_time_delay', responsenewvalue.payload.UserSettings.default_time_delay);\r\n                  }\r\n                  \r\n                  localStorage.setItem('keywordsTally', JSON.stringify(responsenewvalue.payload.AutoResponderKeywords));\r\n                  this.setState({\r\n                        fb_image:localStorage.getItem('insta_image'),\r\n                        fb_name:localStorage.getItem('insta_name'),\r\n                        fb_username:localStorage.getItem('insta_username'),\r\n                        is_user_logged_in_facebook:localStorage.getItem('insta_logged_id')\r\n                  });\r\n                  \r\n        }else{\r\n          this.setState({\r\n            fb_image:localStorage.getItem('insta_image'),\r\n            fb_name:localStorage.getItem('insta_name'),\r\n            fb_username:localStorage.getItem('insta_username'),\r\n            is_user_logged_in_facebook:localStorage.getItem('insta_logged_id')\r\n          })\r\n        }\r\n        this.setState({\r\n          loader:false\r\n        })\r\n      }).catch(error=>{\r\n        console.log(\"This I got From backGround EROOOOOO\",error);\r\n      })\r\n    \r\n  }\r\n    render() {\r\n        return (\r\n          <div>\r\n            {this.state.loader && (   \r\n                <div className=\"after_login_refresh\"><img src={LoaderLogo} alt=\"\"/></div>\r\n            )}\r\n            <div className=\"dashboard\">\r\n              <Header selectedtab=\"dashboard\"></Header>\r\n              <div className=\"after_log_profile\">\r\n                <img src={AvatarLogo} alt=\"\"/>\r\n                <p>Welcome</p>\r\n                <h3>{this.state.fb_name}</h3>\r\n              </div>\r\n              <div className=\"fb_login_request\">\r\n                {this.state.is_user_logged_in_facebook == \"true\" ?\r\n                \"\" \r\n                :\r\n                <div className=\"login_caution\">\r\n                  <img crossorigin=\"anonymous\" data-testid=\"user-avatar\" src={IconLogo} alt=\"\"  />\r\n                  Please login to your Instagram profile and click the refresh button below to proceed further.\r\n                </div>\r\n                }\r\n                \r\n                <a onClick={this.refreshHandler}  href=\"#\" className=\"bluebtn\"><img src={RefreshLogo} alt=\"\"/> Refresh</a>\r\n                <a  onClick={this.fbHandler} href=\"#\" className=\"whitebtn\"><img src={FaceBookLogo} alt=\"\"/> Instagram</a>\r\n              </div>\r\n              <Footer></Footer>\r\n            </div>\r\n          </div>\r\n        );\r\n    }\r\n}\r\nexport default Dashboard;","C:\\GrammyWammy\\front-end\\src\\components\\modules\\Auth\\ForgotPassword.js",["207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227"],"C:\\GrammyWammy\\front-end\\src\\components\\modules\\AutoResponder\\autoResponder.js",["228"],"import React, { Component } from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport Sidebar from \"../Common/sidebar\";\r\nimport AutoResponderService from  \"../../../services/autoResponderServices\";\r\nimport settingService   from  \"../../../services/setting\";\r\nclass autoResponnder extends Component {\r\n    constructor(props) {\r\n      super(props)\r\n      this.state = {\r\n        autoresponderList :[],\r\n        loader:true\r\n      }\r\n    }\r\n    componentDidMount(){\r\n        let UserToken=localStorage.getItem(\"kyubi_user_token\");\r\n        //this.setState({autoresponderList:autoresponderList})\r\n        let payload ={\r\n            user_id:UserToken\r\n        }\r\n        AutoResponderService.listAutoResponder(payload).then(async response =>{\r\n          console.log(\"This is what i Got\",response);\r\n          if(response.data.payload !=  \"\" ){\r\n            console.log(\"This is what i Got\",response.data.payload);\r\n            if(response.data.payload.autokey.length>0){\r\n                console.log(\"This is what i Got\",response.data.payload.autokey);\r\n                this.setState({autoresponderList:response.data.payload.autokey})\r\n            }\r\n            \r\n          }\r\n          \r\n            this.setState({loader:false});\r\n        }).catch(error=>{\r\n            this.setState({loader:false});\r\n        });\r\n\r\n    \r\n    \r\n          let user_id=localStorage.getItem('user_id');\r\n          let Newpayload   ={user_id:user_id }\r\n          settingService.getUserDetails(Newpayload).then(result  =>{\r\n            console.log(\"This is what i111 Got\",result);\r\n            localStorage.setItem('kyubi_user_token', result.data.payload.UserInfo.kyubi_user_token);\r\n                      localStorage.setItem('user_id', result.data.payload.UserInfo.user_id);\r\n                      localStorage.setItem('insta_id', result.data.payload.UserInfo.instagram_id);\r\n                      localStorage.setItem('insta_username', result.data.payload.UserInfo.instagram_name);\r\n                      localStorage.setItem('insta_name', result.data.payload.UserInfo.instagram_profile_name);\r\n                      localStorage.setItem('fb_image', result.data.payload.UserInfo.instagram_image);\r\n                      \r\n\r\n                      if(result.data.payload.UserSettings.default_message){\r\n                        localStorage.setItem('default_message', result.data.payload.UserSettings.default_message);\r\n                      }\r\n                      if(result.data.payload.UserSettings.default_message_text){\r\n                        localStorage.setItem('default_message_text', result.data.payload.UserSettings.default_message_text);\r\n                      }\r\n                      if(result.data.payload.UserSettings.autoresponder){\r\n                        localStorage.setItem('autoresponder', result.data.payload.UserSettings.autoresponder);\r\n                      }\r\n                      if(result.data.payload.UserSettings.default_time_delay){\r\n                        localStorage.setItem('default_time_delay', result.data.payload.UserSettings.default_time_delay);\r\n                      }\r\n                      \r\n                      localStorage.setItem('keywordsTally', JSON.stringify(result.data.payload.AutoResponderKeywords));\r\n          }).catch(error=>{\r\n            console.log(\"This is what i222 Got\",error);\r\n          })\r\n\r\n    \r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"wrapper\">\r\n                {this.state.loader && (   \r\n                <div className=\"overlay\">\r\n                <i className=\"fas fa-2x fa-sync-alt fa-spin\"></i>\r\n                </div>\r\n                )}\r\n                <Sidebar  selectedtab=\"setting\"></Sidebar>\r\n                <div className=\"content-wrapper\">\r\n                <section className=\"content-header\">\r\n                    <div className=\"container-fluid\">\r\n                        <div className=\"row mb-12\">\r\n                            <div className=\"col-sm-6\">\r\n                            <h1>Auto-Responder</h1>\r\n                            \r\n                            <NavLink  to=\"/autorespondercreate\"  class=\"btn btn-app\">\r\n                                <i class=\"fas fa-plus-square\"></i> Create New Auto-Responder\r\n                            </NavLink>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </section>\r\n                <section className=\"content\">\r\n                    <div className=\"container-fluid\">\r\n                        <div className=\"row overflow-auto\">\r\n                            <div className=\"col-md-12\">\r\n                            {Object.keys(this.state.autoresponderList).length > 0 ?\r\n                            (this.state.autoresponderList.map((data, i) => {\r\n                                let editlink= \"/autoresponderedit/\"+data._id;\r\n                            return(\r\n                                \r\n                            <div className={data.status ===  1 ? \"card card-success shadow-none\" : \"card card-danger shadow-none\" }>\r\n                                <div className=\"card-header\">\r\n                                    <h3 className=\"card-title\">{data.auto_responder_name}</h3>\r\n                                    <div className=\"card-tools\">\r\n                                        <button type=\"button\" className=\"btn btn-tool\" data-card-widget=\"collapse\">\r\n                                        <NavLink  to={editlink}><i className=\"far fa-edit\"></i></NavLink>\r\n                                        </button>\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"card-body\" >\r\n                                    <div className={data.status ===  1 ? \"callout callout-success\" : \"callout callout-danger\" }>\r\n                                        <h6>Response Message :</h6>\r\n                                        <p>{data.message}</p>\r\n                                    </div>\r\n                                    <div className={data.status ===  1 ? \"callout callout-success\" : \"callout callout-danger\" }>\r\n                                        <h6>Keywords :</h6>\r\n                                        <p>\r\n                                        {data.autoresponderkeywords.map((result, i) => {\r\n                                        return (\r\n                                            <span class=\"badge badge-info\">{result.keywords}</span>\r\n                                        )\r\n                                        })\r\n                                        }\r\n                                        \r\n                                        </p>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            \r\n                            )\r\n                            }))\r\n                            :\r\n                            (this.state.loader ? \" \": \r\n                            <div className=\"card card-danger shadow-none\">\r\n                            <div className=\"card-header\">\r\n                                <h3 className=\"card-title\">Oops !</h3>\r\n                                <div className=\"card-tools\">\r\n                                    \r\n                                </div>\r\n                            </div>\r\n                            <div className=\"card-body\" >\r\n                                <div className=\"callout callout-danger\">\r\n                                    <h5>Sorry There Is No Auto-Responder</h5>\r\n                                    \r\n                                </div>\r\n                                \r\n                            </div>\r\n                            </div> \r\n                                )\r\n                              \r\n                            }       \r\n                            \r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </section>\r\n                </div>\r\n            </div>\r\n    \r\n        );\r\n    }\r\n}\r\n\r\nexport default autoResponnder;","C:\\GrammyWammy\\front-end\\src\\services\\authService.js",[],"C:\\GrammyWammy\\front-end\\src\\components\\modules\\Setting\\DefaultMessageSettings\\defaultMessageSettings.js",["229","230","231","232","233","234"],"import React, { Component } from \"react\";\r\nimport SegmentActiveLogo from  \"../../../../images/icon2b.svg\";\r\nimport SegmentInActiveLogo from  \"../../../../images/icon2a.svg\";\r\nimport GroupActiveLogo from  \"../../../../images/icon3b.svg\";\r\nimport GroupInActiveLogo from  \"../../../../images/icon3a.svg\";\r\nimport GroupSection from  \"../DefaultMessageSettings/IndividualComponents/group\";\r\nimport SegmentSection from  \"../DefaultMessageSettings/IndividualComponents/segment\";\r\nclass defaultMessageSettings extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n          Segment:1,\r\n          Group:0,\r\n          \r\n          loader:false\r\n        }\r\n      }\r\n      activateSegment  = async (event) =>  {\r\n        event.preventDefault();\r\n        this.setState({\r\n            Segment:1,\r\n            Group:0\r\n        })\r\n        \r\n      }\r\n      activateGroup  = async (event) =>  {\r\n        event.preventDefault();\r\n        this.setState({\r\n            Segment:0,\r\n            Group:1\r\n        })\r\n        \r\n      }\r\n      render() {\r\n        return (\r\n            <div id=\"tabResponse\" className=\"maintabcontent\">\r\n                <ul class=\"subtab\">\r\n                  <li>\r\n                    <a href=\"#\" onClick={this.activateSegment} className={this.state.Segment ?\"active\":\"\"}>\r\n                    {this.state.Segment ?\r\n                    <img src={SegmentActiveLogo} className=\"active\"/>\r\n                    :\r\n                    <img src={SegmentInActiveLogo} className=\"inactive\"/>\r\n                    }\r\n                    Segments</a>\r\n                  </li>\r\n                  <li>\r\n                    <a href=\"#\" onClick={this.activateGroup} id=\"defaultMessage\" className={this.state.Group ?\"active\":\"\"}>\r\n                    {this.state.Group ?\r\n                    <img src={GroupActiveLogo} className=\"active\"/>\r\n                    :\r\n                    <img src={GroupInActiveLogo} className=\"inactive\"/>\r\n                    }\r\n                    Groups</a>\r\n                  </li>\r\n                </ul>\r\n                {this.state.Segment ?\r\n                  <SegmentSection></SegmentSection>\r\n                :\r\n                  <GroupSection></GroupSection>\r\n                }\r\n            </div>)\r\n      }\r\n}\r\nexport default defaultMessageSettings;","C:\\GrammyWammy\\front-end\\src\\components\\modules\\Common\\sidebar.js",["235","236","237","238"],"import React, { Component } from \"react\";\r\nimport logo from \"../../../image/Logo_Side.png\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport {Animated} from \"react-animated-css\";\r\nclass sidebar extends Component {\r\n    constructor(props) {\r\n      super(props)\r\n      this.state = {\r\n        selected:this.props.selectedtab,\r\n        openSidebar:false,\r\n        \r\n      }\r\n    }\r\n    HideMenu = (event) => {\r\n      event.preventDefault();\r\n      //console.log(this.props.shownav);\r\n      this.setState({\r\n        openSidebar:false\r\n      })\r\n    }\r\n    ShowMenu = (event) => {\r\n      event.preventDefault();\r\n      //console.log(this.props.shownav);\r\n      this.setState({\r\n        openSidebar:true\r\n      })\r\n    }\r\n    componentDidMount(){\r\n        //console.log(this.props.shownav);\r\n    }\r\n    render() {\r\n        return (\r\n        <div>\r\n          <nav className=\"main-header navbar navbar-expand  navbar-dark\">\r\n              <ul className=\"navbar-nav\">\r\n                <li className=\"nav-item\">\r\n                  <a className=\"nav-link\" onClick={this.ShowMenu} data-widget=\"pushmenu\" href=\"#\" role=\"button\">\r\n                    <i className=\"fas fa-bars\"></i>\r\n                  </a>\r\n                </li>\r\n              </ul>\r\n          </nav>\r\n        {this.state.openSidebar ?\r\n                      \r\n                      <div className=\"main-sidebar sidebar-light-primary elevation-4 sidebar-no-expand\" id=\"navbarMenu\">\r\n              \r\n                      <a href=\"\" onClick={this.HideMenu} ><div className=\"crossbox\"><i class=\"fas fa-times\"></i></div></a>\r\n                      \r\n                        <NavLink  to=\"/dashboard\" className=\"brand-link\">\r\n                        \r\n                          <img  src={logo} className=\"Brandlogo\"></img>\r\n                        \r\n                        </NavLink>\r\n                        <div className=\"sidebar\">\r\n                          <nav className=\"mt-2\">\r\n                            <ul className=\"nav nav-pills nav-sidebar flex-column\" data-widget=\"treeview\" role=\"menu\" data-accordion=\"false\">\r\n                              <li className=\"nav-item\">\r\n                                  <NavLink  to=\"/dashboard\" className=\"nav-link\">\r\n                                    <i className=\"nav-icon fas fa-tachometer-alt\"></i>\r\n                                    <p>\r\n                                      Dashboard\r\n                                    </p>\r\n                                  </NavLink>\r\n                              </li>\r\n                              <li className=\"nav-item\">\r\n                                  <NavLink  to=\"/setting\" className=\"nav-link\">\r\n                                    <i className=\"nav-icon fas fa-cogs\"></i>\r\n                                    <p>\r\n                                      Setting\r\n                                    </p>\r\n                                  </NavLink>\r\n                              </li>  \r\n                              <li className=\"nav-item\">\r\n                                  <NavLink  to=\"/autoresponder\" className=\"nav-link\">\r\n                                    <i className=\"nav-icon fas fa-magic\"></i>\r\n                                    <p>\r\n                                      Auto-Responder\r\n                                    </p>\r\n                                  </NavLink>\r\n                              </li>\r\n                              \r\n                              <li className=\"nav-item\">\r\n                                  <NavLink  to=\"/logout\" className=\"nav-link\">\r\n                                    <i className=\"nav-icon fas fa-sign-out-alt\"></i>\r\n                                    <p>\r\n                                      Logout\r\n                                    </p>\r\n                                  </NavLink>\r\n                              </li>\r\n                            </ul>\r\n                          </nav>\r\n                        </div>\r\n                      </div>\r\n                   \r\n        :\r\n        \"\"\r\n        }\r\n        </div>\r\n          \r\n         \r\n\r\n          \r\n        );\r\n    }\r\n}\r\n\r\nexport default sidebar;","C:\\GrammyWammy\\front-end\\src\\services\\setting.js",["239"],"import axios from 'axios';\r\nimport { host,kyubi } from '../config';\r\n\r\nconst settingService = {\r\n    setSetting: function (payload) {\r\n        return new Promise((resolve, reject) => {\r\n            let options = {\r\n                method: 'POST',\r\n                url: host + '/api/setting/setsetting',\r\n                headers: {  'Accept': 'application/json', 'Content-Type': 'application/json' },\r\n                data: payload\r\n            }\r\n            axios(options)\r\n                .then(res => {\r\n                    console.log(\"In Success\");\r\n                    resolve(res)\r\n                })\r\n                .catch(err => {\r\n                    console.log(\"In Error\");\r\n                    reject(err)\r\n                })\r\n        })\r\n    },\r\n    getSetting: function (payload) {\r\n        return new Promise((resolve, reject) => {\r\n            let options = {\r\n                method: 'POST',\r\n                url: host + '/api/setting/getSetting',\r\n                headers: {  'Accept': 'application/json', 'Content-Type': 'application/json' },\r\n                data: payload\r\n            }\r\n            axios(options)\r\n                .then(res => {\r\n                    console.log(\"In Success\");\r\n                    resolve(res)\r\n                })\r\n                .catch(err => {\r\n                    console.log(\"In Error\");\r\n                    reject(err)\r\n                })\r\n        })\r\n    },\r\n    updateAutoresponderSetting: function (payload) {\r\n        return new Promise((resolve, reject) => {\r\n            let options = {\r\n                method: 'POST',\r\n                url: host + '/api/setting/updateautoresponder',\r\n                headers: {  'Accept': 'application/json', 'Content-Type': 'application/json' },\r\n                data: payload\r\n            }\r\n            axios(options)\r\n                .then(res => {\r\n                    console.log(\"In Success\");\r\n                    resolve(res)\r\n                })\r\n                .catch(err => {\r\n                    console.log(\"In Error\");\r\n                    reject(err)\r\n                })\r\n        })\r\n    },\r\n    getUserDetails: function    (payload)   {\r\n        return new Promise((resolve, reject) => {\r\n            let options = {\r\n                method: 'POST',\r\n                url: host + '/api/setting/getUserDetails',\r\n                headers: {  'Accept': 'application/json', 'Content-Type': 'application/json' },\r\n                data: payload\r\n            }\r\n            axios(options)\r\n                .then(res => {\r\n                    console.log(\"In Success\");\r\n                    resolve(res)\r\n                })\r\n                .catch(err => {\r\n                    console.log(\"In Error\");\r\n                    reject(err)\r\n                })\r\n        })\r\n    },\r\n    updateLoadStatus: function   (payload)   {\r\n        return new Promise((resolve, reject) => {\r\n            let options = {\r\n                method: 'POST',\r\n                url: host + '/api/setting/updateLoadStatus',\r\n                headers: {  'Accept': 'application/json', 'Content-Type': 'application/json' },\r\n                data: payload\r\n            }\r\n            axios(options)\r\n                .then(res => {\r\n                    console.log(\"In Success\");\r\n                    resolve(res)\r\n                })\r\n                .catch(err => {\r\n                    console.log(\"In Error\");\r\n                    reject(err)\r\n                })\r\n        })\r\n    }\r\n    \r\n}\r\n\r\nexport default settingService;","C:\\GrammyWammy\\front-end\\src\\components\\modules\\Common\\footer.js",["240","241","242","243","244","245","246","247","248","249","250","251","252"],"import React, { Component } from \"react\";\r\nimport logo from \"../../../images/logo.svg\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport  {OpenPoweredBy,OpenTier5Partnership,OpenFacebookLink,OpenMessengerLink,OpenSignupLink} from '../../../helper/helper'\r\nimport FaceBookLogo from \"../../../images/Path3.svg\";\r\nimport MessenderLogo from \"../../../images/Messanger.svg\";\r\nclass footer extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n          \r\n        }\r\n      }\r\n      LinkHandler(option,event){\r\n        event.preventDefault();\r\n        if(option == \"optOne\"){\r\n            OpenSignupLink();\r\n        }\r\n        if(option == \"optTwo\"){\r\n            OpenPoweredBy();\r\n        }\r\n        if(option == \"optThree\"){\r\n            OpenTier5Partnership();\r\n        }\r\n        if(option == \"optFour\"){\r\n            OpenFacebookLink();\r\n        }\r\n        if(option == \"optFive\"){\r\n            OpenMessengerLink();\r\n        }\r\n    }\r\n    componentDidMount(){\r\n        console.log(\"I am In Header\");\r\n    }\r\n    render() {\r\n        return (\r\n        <div className=\"footer\">\r\n            <p>Powered by <a onClick={(event) => this.LinkHandler(\"optTwo\",event)}  href=\"#\">GrammyWammy</a> and the <a onClick={(event) => this.LinkHandler(\"optThree\",event)} href=\"#\">GrammyWammy Partnership</a></p>\r\n            <a   onClick={(event) => this.LinkHandler(\"optFour\",event)}  href=\"#\"><img src={FaceBookLogo} /></a> <a   onClick={(event) => this.LinkHandler(\"optFive\",event)}  href=\"#\"><img src={MessenderLogo} /></a>\r\n        </div>\r\n        )\r\n    }\r\n}\r\nexport default footer;","C:\\GrammyWammy\\front-end\\src\\services\\autoResponderServices.js",["253"],"import axios from 'axios';\r\nimport { host,kyubi } from '../config';\r\n\r\nconst autoResponderServices = {\r\n    createAutoResponder: function (payload) {\r\n        return new Promise((resolve, reject) => {\r\n            let options = {\r\n                method: 'POST',\r\n                url: host + '/api/autoresponder/create',\r\n                headers: {  'Accept': 'application/json', 'Content-Type': 'application/json' },\r\n                data: payload\r\n            }\r\n            axios(options)\r\n                .then(res => {\r\n                    console.log(\"In Success\");\r\n                    resolve(res)\r\n                })\r\n                .catch(err => {\r\n                    console.log(\"In Error\");\r\n                    reject(err)\r\n                })\r\n        })\r\n    },\r\n    listAutoResponder: function (payload) {\r\n        return new Promise((resolve, reject) => {\r\n            let options = {\r\n                method: 'POST',\r\n                url: host + '/api/autoresponder/list',\r\n                headers: {  'Accept': 'application/json', 'Content-Type': 'application/json' },\r\n                data: payload\r\n            }\r\n            axios(options)\r\n                .then(res => {\r\n                    console.log(\"In Success\");\r\n                    resolve(res)\r\n                })\r\n                .catch(err => {\r\n                    console.log(\"In Error\");\r\n                    reject(err)\r\n                })\r\n        })\r\n    },\r\n    editAutoResponder: function (payload) {\r\n        return new Promise((resolve, reject) => {\r\n            let options = {\r\n                method: 'POST',\r\n                url: host + '/api/autoresponder/edit',\r\n                headers: {  'Accept': 'application/json', 'Content-Type': 'application/json' },\r\n                data: payload\r\n            }\r\n            axios(options)\r\n                .then(res => {\r\n                    console.log(\"In Success\");\r\n                    resolve(res)\r\n                })\r\n                .catch(err => {\r\n                    console.log(\"In Error\");\r\n                    reject(err)\r\n                })\r\n        })\r\n    },\r\n    updateAutoResponder: function (payload) {\r\n        return new Promise((resolve, reject) => {\r\n            let options = {\r\n                method: 'POST',\r\n                url: host + '/api/autoresponder/update',\r\n                headers: {  'Accept': 'application/json', 'Content-Type': 'application/json' },\r\n                data: payload\r\n            }\r\n            axios(options)\r\n                .then(res => {\r\n                    console.log(\"In Success\");\r\n                    resolve(res)\r\n                })\r\n                .catch(err => {\r\n                    console.log(\"In Error\");\r\n                    reject(err)\r\n                })\r\n        })\r\n    },\r\n    updateAutoResponderStatus: function (payload) {\r\n        return new Promise((resolve, reject) => {\r\n            let options = {\r\n                method: 'POST',\r\n                url: host + '/api/autoresponder/updateStatus',\r\n                headers: {  'Accept': 'application/json', 'Content-Type': 'application/json' },\r\n                data: payload\r\n            }\r\n            axios(options)\r\n                .then(res => {\r\n                    console.log(\"In Success\");\r\n                    resolve(res)\r\n                })\r\n                .catch(err => {\r\n                    console.log(\"In Error\");\r\n                    reject(err)\r\n                })\r\n        })\r\n    },\r\n    deleteAutoResponderStatus: function (payload) {\r\n        return new Promise((resolve, reject) => {\r\n            let options = {\r\n                method: 'POST',\r\n                url: host + '/api/autoresponder/delete',\r\n                headers: {  'Accept': 'application/json', 'Content-Type': 'application/json' },\r\n                data: payload\r\n            }\r\n            axios(options)\r\n                .then(res => {\r\n                    console.log(\"In Success\");\r\n                    resolve(res)\r\n                })\r\n                .catch(err => {\r\n                    console.log(\"In Error\");\r\n                    reject(err)\r\n                })\r\n        })\r\n    },\r\n}\r\nexport default autoResponderServices;","C:\\GrammyWammy\\front-end\\src\\helper\\loginHelper.js",["254","255"],"/* eslint-disable no-undef */\r\nconst loginHelper = {\r\n    \r\n    login: function () {\r\n        try{\r\n            // if(localStorage.getItem('instaprofile')){\r\n            //     let newtab=parseInt(localStorage.getItem('instaprofile'));\r\n            //     chrome.tabs.remove(newtab, function() { \r\n\r\n            //         localStorage.removeItem('instaprofile');\r\n            //     });\r\n            // }\r\n            // if(localStorage.getItem('instamunread')){\r\n            //     let newtabx=parseInt(localStorage.getItem('instamunread'));\r\n            //     chrome.tabs.remove(newtabx, function() { \r\n\r\n            //         localStorage.removeItem('instamunread');\r\n            //     });\r\n            // }\r\n            // localStorage.removeItem('instathread');\r\n            const myNewUrl  =   `https://www.instagram.com/`;\r\n            let CreateTab    =   chrome.tabs.create({\r\n                url: myNewUrl,\r\n                active: true,\r\n                pinned:true\r\n            },function(tab) { \r\n                let instaprofile=tab.id;\r\n                localStorage.setItem('instaprofile', instaprofile);\r\n            });\r\n            // console.log(\"This is a \",CreateTab);\r\n            return CreateTab;\r\n        }catch(error){\r\n            return error\r\n        }\r\n    },\r\n    logout: function () {\r\n    try{\r\n        const myNewUrl  =   `https://www.instagram.com/`;\r\n        let CreateWindow    = chrome.runtime.sendMessage({type: \"CloseAllForResponse\", options: myNewUrl});\r\n        if(localStorage.getItem('instaprofile')){\r\n            let instaprofile=parseInt(localStorage.getItem('instaprofile'));\r\n            chrome.tabs.remove(instaprofile);\r\n            localStorage.removeItem('instaprofile');\r\n        }\r\n        if(localStorage.getItem('InstagramMessageList')){\r\n            let InstagramMessageList=parseInt(localStorage.getItem('InstagramMessageList'));\r\n            chrome.tabs.remove(InstagramMessageList);\r\n            localStorage.removeItem('InstagramMessageList');\r\n        }\r\n        if(localStorage.getItem('InstagramMessageIndividual')){\r\n            let InstagramMessageIndividual=parseInt(localStorage.getItem('InstagramMessageIndividual'));\r\n            chrome.tabs.remove(InstagramMessageIndividual);\r\n            localStorage.removeItem('InstagramMessageIndividual');\r\n        }\r\n        localStorage.removeItem('instathread');\r\n        localStorage.removeItem(\"insta_id\")\r\n        localStorage.removeItem(\"token\")\r\n        localStorage.removeItem(\"keywordsTally\")\r\n        localStorage.removeItem('inBackgroundFetching');\r\n        localStorage.removeItem('insta_image');\r\n        localStorage.removeItem('insta_logged_id');\r\n        localStorage.removeItem('insta_name');\r\n        localStorage.removeItem('insta_username');\r\n        localStorage.removeItem(\"autoresponder\")\r\n        localStorage.removeItem(\"kyubi_user_token\")\r\n        localStorage.removeItem(\"user_id\")\r\n        localStorage.removeItem(\"default_message_text\")\r\n        localStorage.removeItem(\"insta_username\")\r\n        localStorage.removeItem(\"default_time_delay\")\r\n        localStorage.removeItem(\"default_message\")\r\n        localStorage.removeItem(\"individualThreadList\")\r\n        localStorage.removeItem('fbthread');\r\n        localStorage.removeItem('fbmunread');\r\n        localStorage.removeItem('fbprofile');\r\n        localStorage.removeItem('profileFetch');\r\n        localStorage.removeItem('messageListFetch');\r\n        localStorage.removeItem('individualMessageFetch');\r\n        localStorage.removeItem('instaprofile');\r\n        let NewListIdArray=[];\r\n        localStorage.setItem('CheckMessageNReply',0);\r\n        localStorage.setItem('ListIdArray', NewListIdArray);\r\n        localStorage.removeItem('instamunread');\r\n       \r\n        return CreateWindow;\r\n    }catch(error){\r\n        return error\r\n    }\r\n    },\r\n    refreshMessaging:   function    ()  {\r\n        try{\r\n            let CreateInstagramMessageListTab    =   chrome.tabs.create({\r\n                url: myNewUrl,\r\n                active: true,\r\n                pinned:true\r\n            },function(tab) { \r\n                let InstagramMessageList=tab.id;\r\n                localStorage.setItem('InstagramMessageList', InstagramMessageList);\r\n            });\r\n\r\n            let CreateInstagramMessageIndividualTab    =   chrome.tabs.create({\r\n                url: myNewUrl,\r\n                active: true,\r\n                pinned:true\r\n            },function(tab) { \r\n                let InstagramMessageIndividual=tab.id;\r\n                localStorage.setItem('InstagramMessageIndividual', InstagramMessageIndividual);\r\n            });\r\n        }catch(error){\r\n            return error\r\n        }\r\n    }\r\n    \r\n}\r\n\r\nexport default loginHelper","C:\\GrammyWammy\\front-end\\src\\components\\modules\\Common\\header.js",["256","257","258","259","260","261","262","263","264","265","266","267","268","269","270","271","272","273","274","275","276","277","278","279"],"/* eslint-disable no-undef */\r\nimport React, { Component } from \"react\";\r\nimport logo from \"../../../images/Logo_Side.svg\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport  plog from \"../../../images/Avatar.png\";\r\nimport  sideMenuLogo from \"../../../images/side_menu.svg\";\r\nimport  SettingServices from \"../../../services/setting\";\r\nimport  {OpenFacebookInTab,CheckUserInfoFromFaccebook,OpenFacebookProfileInTab} from  '../../../helper/helper'\r\nimport  LoadingLogo from \"../../../images/Loader.gif\";\r\nimport loginHelper from  \"../../../helper/loginHelper.js\"\r\nclass header extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n          selected:this.props.selectedtab,\r\n          openNavBar:false,\r\n          default_message:0,\r\n          autoresponder_status:0,\r\n          ready_for_activate:0,\r\n          user_name:\"\",\r\n          user_image:plog,\r\n          meven_status:0,\r\n         loader:false\r\n        }\r\n        \r\n      }\r\n      HideMenu = (event) => {\r\n        event.preventDefault();\r\n        //console.log(this.props.shownav);\r\n        this.setState({\r\n            openNavBar:false\r\n        })\r\n      }\r\n      autoSetting = async (event) => {\r\n        this.setState({loader:true});\r\n        let payload = {\r\n        }\r\n        console.log(\"hiyy\",this.state.meven_status )\r\n        if(this.state.meven_status === 0){\r\n            this.setState({meven_status:1})\r\n            payload = {\r\n              update_load_status:1,\r\n              kyubi_user_token:localStorage.getItem('kyubi_user_token')\r\n            }\r\n            //let LC=loginHelper.login();\r\n\r\n        }else{\r\n            this.setState({meven_status:0})\r\n            payload = {\r\n              update_load_status:0,\r\n              kyubi_user_token:localStorage.getItem('kyubi_user_token')\r\n            }\r\n            //let LO = loginHelper.logout();\r\n        }\r\n        await SettingServices.updateLoadStatus(payload).then(async result=>{\r\n          console.log(\"This -s what -----------------------------\",result)\r\n          if(result.data.code==1){\r\n                  let responsenewvalue =result.data;\r\n                  localStorage.setItem('kyubi_user_token', responsenewvalue.payload.UserInfo.kyubi_user_token);\r\n                  localStorage.setItem('user_id', responsenewvalue.payload.UserInfo.user_id);\r\n                  localStorage.setItem('insta_id', responsenewvalue.payload.UserInfo.instagram_id);\r\n                  localStorage.setItem('insta_username', responsenewvalue.payload.UserInfo.instagram_profile_name);\r\n                  localStorage.setItem('insta_name', responsenewvalue.payload.UserInfo.instagram_name);\r\n                  localStorage.setItem('insta_image', responsenewvalue.payload.UserInfo.instagram_image);\r\n                  if(responsenewvalue.payload.UserSettings.default_message){\r\n                    localStorage.setItem('default_message', responsenewvalue.payload.UserSettings.default_message);\r\n                  }else{\r\n                    localStorage.setItem('default_message', 0);\r\n                  }\r\n                  if(responsenewvalue.payload.UserSettings.default_message_text){\r\n                    localStorage.setItem('default_message_text', responsenewvalue.payload.UserSettings.default_message_text);\r\n                  }else{\r\n                    localStorage.setItem('default_message_text',\"\");\r\n                  }\r\n                  if(responsenewvalue.payload.UserSettings.autoresponder){\r\n                    localStorage.setItem('autoresponder', responsenewvalue.payload.UserSettings.autoresponder);\r\n\r\n                  }else{\r\n                    localStorage.setItem('autoresponder', 0);\r\n                  }\r\n                  if(responsenewvalue.payload.UserSettings.default_time_delay){\r\n                    localStorage.setItem('default_time_delay', responsenewvalue.payload.UserSettings.default_time_delay);\r\n                  }\r\n                  localStorage.setItem('keywordsTally', JSON.stringify(responsenewvalue.payload.AutoResponderKeywords));\r\n                  this.setState({\r\n                    autoresponder_status:localStorage.getItem('autoresponder'),\r\n                    default_message:localStorage.getItem('default_message')\r\n                  })\r\n                  if(localStorage.getItem('autoresponder') ==1 && localStorage.getItem('default_message')==1 && localStorage.getItem('inBackgroundFetching') ==\"false\" && localStorage.getItem('insta_logged_id')==\"true\"){\r\n                    if(localStorage.getItem('InstagramMessageList')){\r\n                      let InstagramMessageList=parseInt(localStorage.getItem('InstagramMessageList'));\r\n                      chrome.tabs.remove(InstagramMessageList);\r\n                      localStorage.removeItem('InstagramMessageList');\r\n                    }\r\n                    if(localStorage.getItem('InstagramMessageIndividual')){\r\n                      let InstagramMessageIndividual=parseInt(localStorage.getItem('InstagramMessageIndividual'));\r\n                      chrome.tabs.remove(InstagramMessageIndividual);\r\n                      localStorage.removeItem('InstagramMessageIndividual');\r\n                    }\r\n                    let NewListIdArray=[];\r\n                    localStorage.setItem('CheckMessageNReply',0);\r\n                    localStorage.setItem('ListIdArray', NewListIdArray);\r\n                    let CreateInstagramMessageListTab    =   chrome.tabs.create({\r\n                      url: `https://www.instagram.com/direct/inbox/`,\r\n                      active: true,\r\n                      pinned:true\r\n                    },function(tab) { \r\n                        let InstagramMessageList=tab.id;\r\n                        localStorage.setItem('InstagramMessageList', InstagramMessageList);\r\n                    });\r\n                  }else{\r\n                    if(localStorage.getItem('InstagramMessageList')){\r\n                      let InstagramMessageList=parseInt(localStorage.getItem('InstagramMessageList'));\r\n                      chrome.tabs.remove(InstagramMessageList);\r\n                      localStorage.removeItem('InstagramMessageList');\r\n                    }\r\n                    if(localStorage.getItem('InstagramMessageIndividual')){\r\n                      let InstagramMessageIndividual=parseInt(localStorage.getItem('InstagramMessageIndividual'));\r\n                      chrome.tabs.remove(InstagramMessageIndividual);\r\n                      localStorage.removeItem('InstagramMessageIndividual');\r\n                    }\r\n                    let NewListIdArray=[];\r\n                    localStorage.setItem('CheckMessageNReply',0);\r\n                    localStorage.setItem('ListIdArray', NewListIdArray);\r\n                  }\r\n                  this.setState({loader:false});\r\n          }else{\r\n            this.setState({loader:false});\r\n          }\r\n        }).catch(error =>{\r\n          this.setState({loader:false});\r\n        })\r\n      }\r\n      // autoSetting = async (event) => {\r\n      //   this.setState({loader:true});\r\n      //   let payload = {\r\n      //   }\r\n      //   console.log(\"hiyy\",this.state.meven_status )\r\n      //   if(this.state.meven_status === 0){\r\n      //       this.setState({meven_status:1})\r\n      //       payload = {\r\n      //         update_load_status:1,\r\n      //         kyubi_user_token:localStorage.getItem('kyubi_user_token')\r\n      //       }\r\n      //       //let LC=loginHelper.login();\r\n      //       }\r\n      //       else{\r\n      //       this.setState({meven_status:0})\r\n      //       payload = {\r\n      //         update_load_status:0,\r\n      //         kyubi_user_token:localStorage.getItem('kyubi_user_token')\r\n      //       }\r\n      //       //let LO = loginHelper.logout();\r\n      //   }\r\n      //   await SettingServices.updateLoadStatus(payload).then(async result=>{\r\n      //     if(result.data.code==1){\r\n      //             let responsenewvalue =result.data;\r\n\r\n      //             localStorage.setItem('kyubi_user_token', responsenewvalue.payload.UserInfo.kyubi_user_token);\r\n      //             localStorage.setItem('user_id', responsenewvalue.payload.UserInfo.user_id);\r\n      //             localStorage.setItem('insta_id', responsenewvalue.payload.UserInfo.instagram_id);\r\n      //             localStorage.setItem('insta_username', responsenewvalue.payload.UserInfo.instagram_profile_name);\r\n      //             localStorage.setItem('insta_name', responsenewvalue.payload.UserInfo.instagram_name);\r\n      //             localStorage.setItem('insta_image', responsenewvalue.payload.UserInfo.instagram_image);\r\n                  \r\n      //             if(responsenewvalue.payload.UserSettings.default_message){\r\n      //               localStorage.setItem('default_message', responsenewvalue.payload.UserSettings.default_message);\r\n      //             }else{\r\n      //               localStorage.setItem('default_message', 0);\r\n      //             }\r\n      //             if(responsenewvalue.payload.UserSettings.default_message_text){\r\n      //               localStorage.setItem('default_message_text', responsenewvalue.payload.UserSettings.default_message_text);\r\n      //             }else{\r\n      //               localStorage.setItem('default_message_text',\"\");\r\n      //             }\r\n      //             if(responsenewvalue.payload.UserSettings.autoresponder){\r\n      //               localStorage.setItem('autoresponder', responsenewvalue.payload.UserSettings.autoresponder);\r\n                    \r\n      //             }else{\r\n      //               localStorage.setItem('autoresponder', 0);\r\n      //             }\r\n      //             if(responsenewvalue.payload.UserSettings.default_time_delay){\r\n      //               localStorage.setItem('default_time_delay', responsenewvalue.payload.UserSettings.default_time_delay);\r\n      //             }\r\n                  \r\n      //             localStorage.setItem('keywordsTally', JSON.stringify(responsenewvalue.payload.AutoResponderKeywords));\r\n      //             this.setState({\r\n      //               autoresponder_status:localStorage.getItem('autoresponder'),\r\n      //               default_message:localStorage.getItem('default_message')\r\n      //             })\r\n      //             if(localStorage.getItem('autoresponder') ==0 && localStorage.getItem('default_message')==0){\r\n      //               if(localStorage.getItem('instaprofile')){\r\n      //                 let newtab=parseInt(localStorage.getItem('instaprofile'));\r\n      //                 chrome.tabs.remove(newtab);\r\n      //                 localStorage.removeItem('instaprofile');\r\n      //               }\r\n      //               if(localStorage.getItem('instamunread')){\r\n      //                   let newtabx=parseInt(localStorage.getItem('instamunread'));\r\n      //                   chrome.tabs.remove(newtabx);\r\n      //                   localStorage.removeItem('instamunread');\r\n      //               }\r\n      //               if(localStorage.getItem('instaIndividualMessage')){\r\n      //                   let instaIndividualMessage=parseInt(localStorage.getItem('instaIndividualMessage'));\r\n      //                   chrome.tabs.remove(instaIndividualMessage);\r\n      //                   localStorage.removeItem('instaIndividualMessage');\r\n      //               }\r\n                    \r\n      //             }\r\n      //             if(localStorage.getItem('autoresponder') ==1 && localStorage.getItem('default_message')==1 && localStorage.getItem('inBackgroundFetching') ==\"false\" && localStorage.getItem('insta_logged_id')==\"true\"){\r\n      //               if(localStorage.getItem('instamunread')){\r\n      //                 console.log(\"In ONE\");\r\n      //                 let newtab=parseInt(localStorage.getItem('instamunread'));\r\n      //                 chrome.tabs.get(newtab, function(tab) {\r\n      //                   if (!tab) { \r\n      //                     //console.log('tab does not exist'); \r\n      //                     const myNewUrl  =   `https://www.instagram.com/direct/inbox/`;\r\n      //                     let CreateTab    =   chrome.tabs.create({\r\n      //                         url: myNewUrl,\r\n      //                         active: false,\r\n      //                         pinned:true\r\n      //                     },function(tab) { \r\n      //                         let instamunread=tab.id;\r\n      //                         localStorage.setItem('instamunread', instamunread);\r\n                              \r\n      //                     });\r\n      //                   }\r\n      //                 })\r\n      //               }else{\r\n      //                   const myNewUrl  =   `https://www.instagram.com/direct/inbox/`;\r\n      //                   let CreateTab    =   chrome.tabs.create({\r\n      //                         url: myNewUrl,\r\n      //                         active: false,\r\n      //                         pinned:true\r\n      //                   },function(tab) { \r\n      //                         let instamunread=tab.id;\r\n      //                         localStorage.setItem('instamunread', instamunread);\r\n                              \r\n      //                   });\r\n      //               }\r\n      //             }\r\n\r\n      //             this.setState({loader:false});\r\n      //     }\r\n      //   }).catch(error=>{\r\n      //     this.setState({loader:false});\r\n      //   });\r\n\r\n      // }\r\n      ShowMenu = (event) => {\r\n        event.preventDefault();\r\n        //console.log(this.props.shownav);\r\n        this.setState({\r\n            openNavBar:true\r\n        });\r\n\r\n        let fb_username=localStorage.getItem('insta_username');\r\n        let fb_image=localStorage.getItem('insta_image');\r\n        let fb_name=localStorage.getItem('insta_name');\r\n        let autoresponder=localStorage.getItem('autoresponder');\r\n        let default_message=localStorage.getItem('default_message');\r\n        console.log(\"I am In Header\");\r\n        if(fb_username){\r\n          this.setState({\r\n            user_name:fb_name\r\n        });\r\n        }\r\n        if(fb_image){\r\n          this.setState({\r\n            user_image:fb_image\r\n        });\r\n        }\r\n        if(autoresponder){\r\n          if(autoresponder==\"1\"){\r\n            this.setState({\r\n            meven_status:1\r\n            });\r\n          }\r\n          this.setState({\r\n            autoresponder_status:autoresponder\r\n          });\r\n        }\r\n        if(default_message){\r\n          if(default_message==\"1\"){\r\n            this.setState({\r\n            meven_status:1\r\n            });\r\n          }\r\n          this.setState({\r\n            default_message:default_message\r\n          });\r\n        }\r\n        \r\n      }\r\n    \r\n    componentDidMount(){\r\n      this.setState({loader:true});\r\n        let fb_username=localStorage.getItem('insta_username');\r\n        let fb_name=localStorage.getItem('insta_name');\r\n        let fb_image=localStorage.getItem('insta_image');\r\n        let autoresponder=localStorage.getItem('autoresponder');\r\n        let default_message=localStorage.getItem('default_message');\r\n        console.log(\"I am In Header\");\r\n        if(fb_username){\r\n          this.setState({\r\n            user_name:fb_name\r\n        });\r\n        }\r\n        if(fb_image){\r\n          this.setState({\r\n            user_image:fb_image\r\n        });\r\n        }\r\n        if(autoresponder){\r\n          if(autoresponder==\"1\"){\r\n            this.setState({\r\n            meven_status:1\r\n            });\r\n          }\r\n          this.setState({\r\n            autoresponder_status:autoresponder\r\n          });\r\n        }\r\n        if(default_message){\r\n          if(default_message==\"1\"){\r\n            this.setState({\r\n            meven_status:1\r\n            });\r\n          }\r\n          this.setState({\r\n            default_message:default_message\r\n          });\r\n        }\r\n        this.setState({loader:false});\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"gen_header\">\r\n              {this.state.loader && (   \r\n                                <div className=\"after_login_refresh\"><img src={LoadingLogo} alt=\"\"/></div>\r\n              )}\r\n              <div className=\"logo\"><img src={logo} alt=\"\" /></div>\r\n              <div className=\"hBtnWrapper\">\r\n                <div className=\"toogler\">\r\n                  <label className=\"switch_box box_1\">\r\n                    {this.state.autoresponder_status == \"1\" || this.state.default_message == \"1\" ?\r\n                      <div>\r\n                        <input type=\"checkbox\" className=\"switch_1\" name=\"meven_status\" onChange={this.autoSetting} id=\"swich\" name=\"togg\" checked/>\r\n                        <div className=\"toogler\"></div>\r\n                      </div>\r\n                      \r\n                    :\r\n                      <div>\r\n                        <input type=\"checkbox\" className=\"switch_1\" name=\"meven_status\" onChange={this.autoSetting} id=\"swich\" name=\"togg\" />\r\n                        <div className=\"toogler\"></div>\r\n                      </div>\r\n                    }\r\n\r\n                  </label>\r\n                </div>\r\n                <div className=\"slide_menu_click\">\r\n                  <a href=\"#\" className=\"side_click\" onClick={this.ShowMenu} ><img src={sideMenuLogo}/></a>\r\n                  <div className={this.state.openNavBar ?\"slider_menu active\":\"slider_menu\"}>\r\n                      <a href=\"#\" onClick={this.HideMenu} className=\"cross\">X</a>\r\n                      <div className=\"after_log_profile\">\r\n                        <img src={plog} alt=\"\"/>\r\n                        <p>Welcome</p>\r\n                        <h3>{this.state.user_name}</h3>\r\n                      </div>\r\n                      <ul className=\"menunav\">\r\n                        <li><NavLink  to=\"/dashboard\"><img src=\"images/menuicon4.svg\" /> Dashboard</NavLink></li>\r\n                        <li><NavLink  to=\"/setting\"><img src=\"images/menuicon3.svg\"/> Settings</NavLink></li>\r\n\r\n                        <li><NavLink  to=\"/logout\"><img src=\"images/menuicon1.svg\"/> Logout</NavLink></li>\r\n                      </ul>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default header;","C:\\GrammyWammy\\front-end\\src\\components\\modules\\Setting\\ResponseSetting\\responseSetting.js",["280","281","282","283","284","285"],"import React, { Component } from \"react\";\r\nimport AutoResponder from \"../ResponseSetting/IndividualComponents/autoResponder\";\r\nimport DefaultMessage from \"../ResponseSetting/IndividualComponents/defaultMessage\";\r\nclass responseSetting extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n          autoResponsederSetting:1,\r\n          \r\n          DefaultMessageSetting:0,\r\n          \r\n          loader:false\r\n        }\r\n      }\r\n      activateAutoResponder  = async (event) =>  {\r\n        event.preventDefault();\r\n        this.setState({\r\n            autoResponsederSetting:1,\r\n            DefaultMessageSetting:0\r\n        })\r\n        \r\n      }\r\n      activateDefaultMessage  = async (event) =>  {\r\n        event.preventDefault();\r\n        this.setState({\r\n            autoResponsederSetting:0,\r\n            DefaultMessageSetting:1\r\n        })\r\n        \r\n      }\r\n      render() {\r\n        return (\r\n            <div id=\"tabResponse\" className=\"maintabcontent\">\r\n                <ul class=\"subtab\">\r\n                  <li>\r\n                    <a href=\"#\" onClick={this.activateAutoResponder} className={this.state.autoResponsederSetting ?\"active\":\"\"} id=\"autoResponder\">\r\n                    {this.state.autoResponsederSetting ?<img src=\"images/icon1a.svg\" className=\"active\"/>:<img src=\"images/icon1b.svg\" className=\"inactive\"/>}\r\n                    Auto Responder</a>\r\n                  </li>\r\n                  <li>\r\n                    <a href=\"#\" onClick={this.activateDefaultMessage} id=\"defaultMessage\" className={this.state.DefaultMessageSetting ?\"active\":\"\"}>\r\n                    {this.state.DefaultMessageSetting ?<img src=\"images/icon2b.svg\" className=\"active\"/>:<img src=\"images/icon2a.svg\" className=\"inactive\"/>}\r\n                    Default Message</a>\r\n                  </li>\r\n                </ul>\r\n                {this.state.autoResponsederSetting ?\r\n                  <AutoResponder></AutoResponder>\r\n                :\r\n                  <DefaultMessage></DefaultMessage>\r\n                }\r\n            </div>          \r\n        )\r\n      }\r\n}\r\nexport default responseSetting;","C:\\GrammyWammy\\front-end\\src\\config.js",[],"C:\\GrammyWammy\\front-end\\src\\helper\\helper.js",["286","287"],"/* eslint-disable no-undef */\r\n/** \r\n * @OpenFacebookInTab\r\n * this function will open Facebook in a new  tab and will  focus  on it\r\n * \r\n*/\r\nexport function OpenFacebookInTab() {\r\n    try{\r\n        const myNewUrl  =   `https://www.instagram.com/`;\r\n            let CreateTab    =   chrome.tabs.create({\r\n                url: myNewUrl,\r\n                active: true\r\n              });\r\n              console.log(\"This is a \",CreateTab);\r\n              return CreateTab;\r\n    }catch(error){\r\n        console.log(\"This is a \",error);\r\n    }\r\n  }\r\n\r\n/** \r\n * @CheckUserInfoFromFaccebook\r\n * this function will open Facebook in a new Window and grab its info\r\n * \r\n*/\r\nexport function CheckUserInfoFromFaccebook() {\r\n    // try{\r\n    //         const myNewUrl  =   `https://www.instagram.com/`+localStorage.getItem('fb_username');\r\n            \r\n    //         let CreateWindow    = chrome.runtime.sendMessage({type: \"OpenMessageProfileToRead\", options: myNewUrl});\r\n    //         return CreateWindow;\r\n            \r\n    // }catch(error){\r\n    //     console.log(\"This is a \",error);\r\n    // }\r\n    chrome.tabs.update( parseInt(localStorage.getItem(\"profileTabId\")), { \r\n        url: `https://www.instagram.com/explore/people/suggested/`,\r\n        active: false, pinned:true});\r\n  }\r\n\r\n/** \r\n * @OpenFacebookProfileInTab\r\n * this function will open Facebook Profile in a new Tab\r\n * \r\n*/\r\nexport function OpenFacebookProfileInTab() {\r\n    try{\r\n        const myNewUrl  =   `https://www.instagram.com/`+localStorage.getItem('insta_username');\r\n        let CreateTab    =   chrome.tabs.create({\r\n            url: myNewUrl,\r\n            active: true\r\n          });\r\n          console.log(\"This is a \",CreateTab);\r\n          return CreateTab;\r\n    }catch(error){\r\n        console.log(\"This is a \",error);\r\n    }\r\n  }\r\nexport function framecaller()   {\r\n    try{\r\n        const myNewUrl  =   'https://www.instagram.com/'+\r\n        console.log(\"This is a \",myNewUrl);\r\n        return myNewUrl;\r\n    }catch(error){\r\n        console.log(\"This is a \",error);\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nexport function OpenPoweredBy() {\r\n    try{\r\n        const myNewUrl  =   'https://go.grammywammy.net/signup';\r\n        let CreateTab    =   chrome.tabs.create({\r\n            url: myNewUrl,\r\n            active: true\r\n          });\r\n          console.log(\"This is a \",CreateTab);\r\n          return CreateTab;\r\n    }catch(error){\r\n        console.log(\"This is a \",error);\r\n    }\r\n  }\r\n/** \r\n * @OpenTier5Partnership\r\n * this function will open Tier5 Partnership in a new Tab\r\n * \r\n*/\r\nexport function OpenTier5Partnership() {\r\n    try{\r\n       // const myNewUrl  =   'https://go.grammywammy.net/partners';\r\n       const myNewUrl  =   'https://partner.tier5.us/jrpartnership666?utm_source=GrammyWammy';\r\n        let CreateTab    =   chrome.tabs.create({\r\n            url: myNewUrl,\r\n            active: true\r\n          });\r\n          console.log(\"This is a \",CreateTab);\r\n          return CreateTab;\r\n    }catch(error){\r\n        console.log(\"This is a \",error);\r\n    }\r\n  }\r\n/** \r\n * @OpenFacebookLink\r\n * this function will open Facebook Link in a new Tab\r\n * \r\n*/\r\nexport function OpenFacebookLink() {\r\n    try{\r\n        const myNewUrl  =   'https://go.grammywammy.net/facebook-page';\r\n        let CreateTab    =   chrome.tabs.create({\r\n            url: myNewUrl,\r\n            active: true\r\n          });\r\n          console.log(\"This is a \",CreateTab);\r\n          return CreateTab;\r\n    }catch(error){\r\n        console.log(\"This is a \",error);\r\n    }\r\n  }\r\n/** \r\n * @OpenMessengerLink\r\n * this function will open Powered By in a new Tab\r\n * \r\n*/\r\nexport function OpenMessengerLink() {\r\n    try{\r\n        const myNewUrl  =   'https://go.grammywammy.net/messenger';\r\n        let CreateTab    =   chrome.tabs.create({\r\n            url: myNewUrl,\r\n            active: true\r\n          });\r\n          console.log(\"This is a \",CreateTab);\r\n          return CreateTab;\r\n    }catch(error){\r\n        console.log(\"This is a \",error);\r\n    }\r\n  }\r\n/** \r\n * @OpenSignupLink\r\n * this function will open Signup Link in a new Tab\r\n * \r\n*/\r\nexport function OpenSignupLink() {\r\n    try{\r\n        const myNewUrl  =   'https://go.grammywammy.net/signup';\r\n        let CreateTab    =   chrome.tabs.create({\r\n            url: myNewUrl,\r\n            active: true\r\n          });\r\n          console.log(\"This is a \",CreateTab);\r\n          return CreateTab;\r\n    }catch(error){\r\n        console.log(\"This is a \",error);\r\n    }\r\n  }\r\nexport function refreshMessaging()  {\r\n      try{\r\n        if(localStorage.getItem('instaprofile')){\r\n            let instaprofile=parseInt(localStorage.getItem('instaprofile'));\r\n            chrome.tabs.remove(instaprofile);\r\n            localStorage.removeItem('instaprofile');\r\n        }\r\n        if(localStorage.getItem('InstagramMessageList')){\r\n            let InstagramMessageList=parseInt(localStorage.getItem('InstagramMessageList'));\r\n            chrome.tabs.remove(InstagramMessageList);\r\n            localStorage.removeItem('InstagramMessageList');\r\n        }\r\n        if(localStorage.getItem('InstagramMessageIndividual')){\r\n            let InstagramMessageIndividual=parseInt(localStorage.getItem('InstagramMessageIndividual'));\r\n            chrome.tabs.remove(InstagramMessageIndividual);\r\n            localStorage.removeItem('InstagramMessageIndividual');\r\n        }\r\n        let  ListIdArray=[];\r\n        let NewListIdArray=JSON.stringify(ListIdArray);\r\n        localStorage.setItem('CheckMessageNReply', 0);\r\n        localStorage.setItem('ListIdArray', NewListIdArray);\r\n        if(localStorage.getItem('instaprofile')){\r\n            let instaprofile=parseInt(localStorage.getItem('instaprofile'));\r\n            chrome.tabs.remove(instaprofile);\r\n            localStorage.removeItem('instaprofile');\r\n        }\r\n        if(localStorage.getItem('InstagramMessageList')){\r\n            let InstagramMessageList=parseInt(localStorage.getItem('InstagramMessageList'));\r\n            chrome.tabs.remove(InstagramMessageList);\r\n            localStorage.removeItem('InstagramMessageList');\r\n        }\r\n        if(localStorage.getItem('InstagramMessageIndividual')){\r\n            let InstagramMessageIndividual=parseInt(localStorage.getItem('InstagramMessageIndividual'));\r\n            chrome.tabs.remove(InstagramMessageIndividual);\r\n            localStorage.removeItem('InstagramMessageIndividual');\r\n        }\r\n        const myNewUrl  =   `https://www.instagram.com/`;\r\n        let CreateTab    =   chrome.tabs.create({\r\n            url: myNewUrl,\r\n            active: true,\r\n            pinned:true\r\n        },function(tab) { \r\n            let instaprofile=tab.id;\r\n            localStorage.setItem('instaprofile', instaprofile);\r\n        });\r\n\r\n        //   let CreateInstagramMessageListTab    =   chrome.tabs.create({\r\n        //       url: `https://www.instagram.com/direct/inbox/`,\r\n        //       active: true,\r\n        //       pinned:true\r\n        //   },function(tab) { \r\n        //       let InstagramMessageList=tab.id;\r\n        //       localStorage.setItem('InstagramMessageList', InstagramMessageList);\r\n        //   });\r\n\r\n        //   let CreateInstagramMessageIndividualTab    =   chrome.tabs.create({\r\n        //       url: `https://www.instagram.com/direct/inbox/`,\r\n        //       active: true,\r\n        //       pinned:true\r\n        //   },function(tab) { \r\n        //       let InstagramMessageIndividual=tab.id;\r\n        //       localStorage.setItem('InstagramMessageIndividual', InstagramMessageIndividual);\r\n        //   });\r\n          return \"Done\";\r\n      }catch(error){\r\n          return error\r\n      }\r\n  }\r\n\r\n","C:\\GrammyWammy\\front-end\\src\\components\\modules\\Setting\\DefaultMessageSettings\\IndividualComponents\\segment.js",["288","289","290","291","292","293","294","295","296","297","298","299","300","301","302","303","304","305","306","307","308","309","310","311","312","313","314","315","316","317","318","319","320","321","322","323","324","325","326","327"],"import React, { Component } from \"react\";\r\nimport plusLogo from  \"../../../../../images/plus.svg\";\r\nimport editLogo from  \"../../../../../images/edit1.svg\";\r\nimport deleteLogo from  \"../../../../../images/delete1.svg\";\r\nimport viewLogo from  \"../../../../../images/view.svg\";\r\nimport backArrowLogo from \"../../../../../images/arrow2.svg\";\r\nimport SegmentServices from \"../../../../../services/segmentServices.js\";\r\nimport biglogo from \"../../../../../images/Loader.gif\"\r\nclass segment extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            segmentList:1,\r\n            segmentCreate:0,\r\n            segmentEdit:0,\r\n            default_message_text:\"\",\r\n            message_block:[],\r\n            hideTextbox:false,\r\n            sagment_name:\"\",\r\n            message_block_List:[],\r\n            sagment_name_edit:\"\",\r\n            message_block_edit:[],\r\n            sagment_id_edit:\"\",\r\n            hideTextboxEdit:false,\r\n            default_message_text_edit:\"\",\r\n            loader:true,\r\n            csn:false,\r\n            esn:false\r\n        }\r\n      }\r\n        /**\r\n        * @inputChangeHandller \r\n        * getting input field values\r\n        */\r\n        inputChangeHandller = (event) => {\r\n            this.setState({ [event.target.name]: event.target.value })\r\n        }\r\n        addSegmentHandler  = async (event) =>  {\r\n            event.preventDefault();\r\n            this.setState({\r\n                segmentList:0,\r\n                segmentCreate:1,\r\n                segmentEdit:0\r\n            })\r\n        }\r\n        listSegmentHandler  = async (event) =>  {\r\n            event.preventDefault();\r\n            this.setState({\r\n                segmentList:1,\r\n                segmentCreate:0,\r\n                segmentEdit:0\r\n            })\r\n        }\r\n        showTextBoxHandler  = async (event) =>  {\r\n            event.preventDefault();\r\n            this.setState({\r\n                hideTextbox:false\r\n            })\r\n        }\r\n        showTextBoxHandlerEdit  = async (event) =>  {\r\n            event.preventDefault();\r\n            this.setState({\r\n                hideTextboxEdit:false\r\n            })\r\n        } \r\n        storeInMessageBlock =   async   (event) =>  {\r\n            event.preventDefault();\r\n            let Old_message_block   =   this.state.message_block;\r\n            Old_message_block.push(this.state.default_message_text);\r\n\r\n            this.setState({\r\n                message_block:Old_message_block,\r\n                default_message_text:\"\",\r\n                hideTextbox:true,\r\n                cmb:false\r\n            });\r\n            console.log(\"This are the Message Blocks\",this.state.message_block)\r\n        }\r\n        storeInMessageBlockEdit =   async   (event) =>  {\r\n            event.preventDefault();\r\n            let Old_message_block_edit   =   this.state.message_block_edit;\r\n            Old_message_block_edit.push(this.state.default_message_text_edit);\r\n\r\n            this.setState({\r\n                message_block_edit:Old_message_block_edit,\r\n                default_message_text_edit:\"\",\r\n                hideTextboxEdit:true\r\n            });\r\n            console.log(\"This are the Message Blocks\",this.state.message_block_edit)\r\n        }\r\n        submitAddSegment   =    async   (event) =>  {\r\n            this.setState({loader:true})\r\n            event.preventDefault();\r\n            if(this.state.sagment_name == \"\"){\r\n                this.setState({csn:true,loader:false})\r\n            }else{\r\n                this.setState({csn:false})\r\n            }\r\n            \r\n            if(this.state.sagment_name !=\"\" ){\r\n                let payload =   {\r\n                    message_segments_block:this.state.message_block,\r\n                    message_segment_name:this.state.sagment_name,\r\n                    user_id:localStorage.getItem(\"user_id\")\r\n                }\r\n                console.log(\"This I have to save in DB as Segments\",payload);\r\n                SegmentServices.createSegment(payload).then(result=>{\r\n                    \r\n                    let  params ={\r\n                        user_id    :   localStorage.getItem('user_id')\r\n                    };\r\n                    SegmentServices.getSegment(params).then(result=>{\r\n                        if(result.data.code == 1){\r\n                            this.setState({\r\n                            message_block_List:result.data.payload,\r\n                            loader:false,\r\n                            segmentList:1,\r\n                            segmentCreate:0,\r\n                            segmentEdit:0,\r\n                            message_block:[],\r\n                            sagment_name:\"\"\r\n\r\n                            })  \r\n                        }else{\r\n                            this.setState({\r\n                                loader:false,\r\n                                segmentList:1,\r\n                                segmentCreate:0,\r\n                                segmentEdit:0,\r\n                                message_block:[],\r\n                                sagment_name:\"\"\r\n                                })\r\n                        }\r\n                    }).catch(error=>{\r\n                        console.log(\"This I got From DDDDBBBBBB EROOOOOO\",error);\r\n                    })\r\n    \r\n                }).catch(error=>{\r\n                    let  params ={\r\n                        user_id    :   localStorage.getItem('user_id')\r\n                    };\r\n                    SegmentServices.getSegment(params).then(result=>{\r\n                        if(result.data.code == 1){\r\n                            this.setState({\r\n                            message_block_List:result.data.payload,\r\n                            loader:false\r\n                            })  \r\n                        }else{\r\n                            this.setState({\r\n                                loader:false\r\n                                })\r\n                        }\r\n                    }).catch(error=>{\r\n                        console.log(\"This I got From DDDDBBBBBB EROOOOOO\",error);\r\n                    })\r\n    \r\n                })\r\n            }\r\n            \r\n        }\r\n        submitAddSegmentEdit   =    async   (event) =>  {\r\n            this.setState({loader:true})\r\n            event.preventDefault();\r\n            if(this.state.sagment_name_edit == \"\"){\r\n                this.setState({esn:true,loader:false})\r\n            }else{\r\n                this.setState({esn:false})\r\n            }\r\n            if(this.state.sagment_name_edit !=\"\" ){\r\n            let payload =   {\r\n                message_segments_block:this.state.message_block_edit,\r\n                message_segment_name:this.state.sagment_name_edit,\r\n                user_id:localStorage.getItem(\"user_id\"),\r\n                sagment_id_edit:this.state.sagment_id_edit\r\n            }\r\n            console.log(\"This I have to save in DB as Segments\",payload);\r\n            SegmentServices.UpdateSegment(payload).then(result=>{\r\n                console.log(\"this is more SUUUUUUCCEEEEESSSS\",result);\r\n                if(result.data.code == 1){\r\n                    this.setState({\r\n                    message_block_List:result.data.payload,\r\n                    loader:false,\r\n                    segmentList:1,\r\n                    segmentCreate:0,\r\n                    segmentEdit:0,\r\n                    message_block_edit:[],\r\n                    sagment_name_edit:\"\",\r\n                    sagment_id_edit:\"\"\r\n                    })  \r\n                }else{\r\n                    this.setState({\r\n                        loader:false,\r\n                        segmentList:1,\r\n                        segmentCreate:0,\r\n                        segmentEdit:0,\r\n                        message_block_edit:[],\r\n                        sagment_name_edit:\"\",\r\n                        sagment_id_edit:\"\"\r\n                        })\r\n                }\r\n            }).catch(error=>{\r\n                console.log(\"this is more ERRRRROOOOOORRRRRR\",error);\r\n            })\r\n            }\r\n        }\r\n        /**\r\n         * @insertTagAtMessageSegments\r\n         * in this function we are managing the tag in welcome message area\r\n        */\r\n        insertTagAtMessageSegments(areaId, text) {\r\n                var txtarea = document.getElementById(areaId);\r\n                if (!txtarea) {\r\n                return;\r\n                }\r\n                // if (txtarea.value.length < 188) {\r\n                var scrollPos = txtarea.scrollTop;\r\n                var strPos = 0;\r\n                var br = ((txtarea.selectionStart || txtarea.selectionStart == '0') ?\r\n                \"ff\" : (document.selection ? \"ie\" : false));\r\n                if (br == \"ie\") {\r\n                txtarea.focus();\r\n                var range = document.selection.createRange();\r\n                range.moveStart('character', -txtarea.value.length);\r\n                strPos = range.text.length;\r\n                } else if (br == \"ff\") {\r\n                strPos = txtarea.selectionStart;\r\n                }\r\n                var front = (txtarea.value).substring(0, strPos);\r\n                var back = (txtarea.value).substring(strPos, txtarea.value.length);\r\n                txtarea.value = front + text + back;\r\n                strPos = strPos + text.length;\r\n                let WelcomeMessage = txtarea.value;\r\n                WelcomeMessage = WelcomeMessage.replace(/{user_name}/g, \"\");\r\n                WelcomeMessage = WelcomeMessage.replace(/{last_name}/g, \"\");\r\n                WelcomeMessage = WelcomeMessage.replace(/{date}/g, \"\");\r\n                WelcomeMessage = WelcomeMessage.replace(/{date_time}/g, \"\");\r\n                //console.log(\"This is the message ========\",WelcomeMessage);\r\n                this.setState({ default_message_text: txtarea.value});\r\n                // this.setState({ welcomeContent: txtarea.value, welcomeTextLengthCount: txtarea.value });\r\n                if (br == \"ie\") {\r\n                txtarea.focus();\r\n                var ieRange = document.selection.createRange();\r\n                ieRange.moveStart('character', -txtarea.value.length);\r\n                ieRange.moveStart('character', strPos);\r\n                ieRange.moveEnd('character', 0);\r\n                ieRange.select();\r\n                } else if (br == \"ff\") {\r\n                txtarea.selectionStart = strPos;\r\n                txtarea.selectionEnd = strPos;\r\n                txtarea.focus();\r\n                }\r\n                txtarea.scrollTop = scrollPos;\r\n                // }\r\n        }\r\n        insertTagAtMessageSegments_edit(areaId, text) {\r\n            var txtarea = document.getElementById(areaId);\r\n            if (!txtarea) {\r\n            return;\r\n            }\r\n            // if (txtarea.value.length < 188) {\r\n            var scrollPos = txtarea.scrollTop;\r\n            var strPos = 0;\r\n            var br = ((txtarea.selectionStart || txtarea.selectionStart == '0') ?\r\n            \"ff\" : (document.selection ? \"ie\" : false));\r\n            if (br == \"ie\") {\r\n            txtarea.focus();\r\n            var range = document.selection.createRange();\r\n            range.moveStart('character', -txtarea.value.length);\r\n            strPos = range.text.length;\r\n            } else if (br == \"ff\") {\r\n            strPos = txtarea.selectionStart;\r\n            }\r\n            var front = (txtarea.value).substring(0, strPos);\r\n            var back = (txtarea.value).substring(strPos, txtarea.value.length);\r\n            txtarea.value = front + text + back;\r\n            strPos = strPos + text.length;\r\n            let WelcomeMessage = txtarea.value;\r\n            WelcomeMessage = WelcomeMessage.replace(/{user_name}/g, \"\");\r\n            WelcomeMessage = WelcomeMessage.replace(/{last_name}/g, \"\");\r\n            WelcomeMessage = WelcomeMessage.replace(/{date}/g, \"\");\r\n            WelcomeMessage = WelcomeMessage.replace(/{date_time}/g, \"\");\r\n            //console.log(\"This is the message ========\",WelcomeMessage);\r\n            this.setState({ default_message_text_edit: txtarea.value});\r\n            // this.setState({ welcomeContent: txtarea.value, welcomeTextLengthCount: txtarea.value });\r\n            if (br == \"ie\") {\r\n            txtarea.focus();\r\n            var ieRange = document.selection.createRange();\r\n            ieRange.moveStart('character', -txtarea.value.length);\r\n            ieRange.moveStart('character', strPos);\r\n            ieRange.moveEnd('character', 0);\r\n            ieRange.select();\r\n            } else if (br == \"ff\") {\r\n            txtarea.selectionStart = strPos;\r\n            txtarea.selectionEnd = strPos;\r\n            txtarea.focus();\r\n            }\r\n            txtarea.scrollTop = scrollPos;\r\n            // }\r\n        }\r\n        editMessageSegments(segment_id,event){\r\n            event.preventDefault();\r\n            let  params ={\r\n                segment_id    :   segment_id\r\n            };\r\n            SegmentServices.editSegment(params).then(result  =>{\r\n                if(result.data.code == 1){\r\n                    this.setState({\r\n                        sagment_name_edit:result.data.payload.title,\r\n                        message_block_edit:result.data.payload.message_blocks,\r\n                        sagment_id_edit:result.data.payload._id,\r\n                        segmentList:0,\r\n                        segmentCreate:0,\r\n                        segmentEdit:1\r\n                    })\r\n              }\r\n            })\r\n        }\r\n        RemoveMessageSegmentsBlockEdit(block_index,event){\r\n            event.preventDefault();\r\n            console.log(\"this is the Index\",block_index);\r\n            let  presentSegmentBlock= this.state.message_block_edit;\r\n            presentSegmentBlock.splice(block_index, 1);\r\n            this.setState({message_block_edit:presentSegmentBlock});\r\n\r\n        }\r\n        componentDidMount(){\r\n                let  params ={\r\n                    user_id    :   localStorage.getItem('user_id')\r\n                };\r\n                SegmentServices.getSegment(params).then(result=>{\r\n                  \r\n                \r\n                if(result.data.code == 1){\r\n                      this.setState({\r\n                        message_block_List:result.data.payload,\r\n                        loader:false\r\n                      })\r\n                }else{\r\n                    this.setState({\r\n                        loader:false\r\n                      })\r\n                }\r\n                }).catch(error=>{\r\n                    this.setState({\r\n                        loader:false\r\n                      })\r\n                  console.log(\"This I got From DDDDBBBBBB EROOOOOO\",error);\r\n                })\r\n        }\r\n      render() {\r\n        return (\r\n            <div>\r\n                {this.state.segmentList ?\r\n\r\n                    <div className=\"subtabcontent\">\r\n                            {this.state.loader && (   \r\n                                <div className=\"after_login_refresh\"><img src={biglogo} alt=\"\"/></div>\r\n                            )}\r\n                        { this.state.message_block_List.length != 0 ?\r\n                            <div>\r\n                                <div className=\"headding\">\r\n                                    <span>Message Segments</span> <a onClick={this.addSegmentHandler} className=\"createbtn\"><img src={plusLogo}/> Create New</a>\r\n                                </div>\r\n                                <div className=\"segmentlists\">\r\n                                {this.state.message_block_List && this.state.message_block_List.map((data, index) =>\r\n                                    <div className=\"segmentlist\">\r\n                                        <span className=\"txt\">{data.title}</span>\r\n                                        <span className=\"txt\">{data.message_blocks.length}<br/> Blocks </span>\r\n                                        <div className=\"action\">\r\n                                            {/* <a href=\"#\"><img src={viewLogo} alt=\"\"/></a> */}\r\n                                            <a href=\"#\" onClick={(event) => this.editMessageSegments(data._id,event)} ><img src={editLogo} alt=\"\"/></a>\r\n                                            {/* <a href=\"#\"><img src={deleteLogo} alt=\"\"/></a> */}\r\n                                        </div>\r\n                                    </div>\r\n                                )}\r\n                                </div>\r\n                            </div>\r\n                        :\r\n                            <div className=\"list_no_record\">\r\n                                <img src=\"images/empty_file.svg\" alt=\"\"/>\r\n                                <p>You haven’t created any Message Segment yet.</p>\r\n                                <a onClick={this.addSegmentHandler} className=\"createbtn\"><img src={plusLogo} alt=\"\"/> Create New</a>\r\n                            </div>\r\n                        }\r\n                        \r\n                    </div>\r\n                :\r\n                \"\"\r\n                }\r\n                {this.state.segmentCreate ?\r\n                    <div className=\"subtabcontent\">\r\n                        {this.state.loader && (   \r\n                                <div className=\"after_login_refresh\"><img src={biglogo} alt=\"\"/></div>\r\n                        )}\r\n                        <div className=\"headding gap1\">\r\n                            <span className=\"big\">Create a Message Segments</span> \r\n                            <a  onClick={this.listSegmentHandler} href=\"#\" className=\"roundarrow\"><img src={backArrowLogo}/></a>\r\n                        </div>\r\n                        <form>\r\n                            <label>Title</label>\r\n                            <input type=\"text\" name=\"sagment_name\" value={this.state.sagment_name} onChange={this.inputChangeHandller}  placeholder=\"Enter your message segment title\" className=\"otherstyle\" />\r\n                            {this.state.csn && (\r\n                            <div className=\"error\"> Please Provide Message Segments Title *</div>\r\n                            )}\r\n                            <label>Create message block (s)<br/>\r\n                                <span>Click on the </span>\"keyword\"\r\n                                <span> to insert into your message</span>\r\n                            </label>\r\n                                {this.state.message_block && this.state.message_block.map((data, index) =>\r\n                                    <span className=\"selectedBlock\">{data}<a href=\"#\" className=\"cross\">X</a></span>\r\n                                )}\r\n                            <div className=\"addblock\">\r\n                                {this.state.hideTextbox\r\n                                ?\r\n                                <p className=\"gap1\"><a href=\"#\" onClick={this.showTextBoxHandler} className=\"blue_link\">Add another block</a></p>\r\n                                :\r\n                                <textarea name=\"default_message_text\" value={this.state.default_message_text} onChange={this.inputChangeHandller} id=\"default_message_text\" className=\"withtag otherstyle\" placeholder=\"Build block content\">\r\n                        \r\n                                </textarea>\r\n                                \r\n                                }\r\n                                \r\n                                {this.state.default_message_text==\"\"\r\n                                ?\r\n                                \"\"\r\n                                :\r\n                                <a href=\"#\" onClick={this.storeInMessageBlock} className=\"add\">Add</a>\r\n                                }\r\n                                \r\n                            </div>\r\n                            <button type=\"button\" onClick={() => this.insertTagAtMessageSegments('default_message_text', '{user_name}')} className=\"formtag\">[ User Name ]</button> \r\n                            <button type=\"button\" onClick={() => this.insertTagAtMessageSegments('default_message_text', '{date}')} class=\"formtag\">[ Todays Date ]</button>\r\n\r\n                            <p>&nbsp;</p>\r\n\r\n                            <button onClick={this.submitAddSegment} className=\"blue_btn\" type=\"submit\">Save Message Segment</button>\r\n                        </form>  \r\n                    </div>\r\n                :\r\n                \"\"\r\n                }\r\n                {this.state.segmentEdit ?\r\n                    <div className=\"subtabcontent\">\r\n                        {this.state.loader && (   \r\n                                <div className=\"after_login_refresh\"><img src={biglogo} alt=\"\"/></div>\r\n                        )}\r\n                        <div className=\"headding gap1\">\r\n                            <span className=\"big\">Edit a Message Segments</span> \r\n                            <a  onClick={this.listSegmentHandler} href=\"#\" className=\"roundarrow\"><img src={backArrowLogo}/></a>\r\n                        </div>\r\n                        <form>\r\n                            <label>Title</label>\r\n                            <input type=\"text\" name=\"sagment_name_edit\" value={this.state.sagment_name_edit} onChange={this.inputChangeHandller}  placeholder=\"Enter your message segment title\" className=\"otherstyle\" />\r\n                            {this.state.esn && (\r\n                                <div className=\"error\"> Please Provide Message Segments Title *</div>\r\n                            )}\r\n                            <label>Edit message block (s)<br/>\r\n                                <span>Click on the </span>\"keyword\"\r\n                                <span> to insert into your message</span>\r\n                            </label>\r\n                                {this.state.message_block_edit && this.state.message_block_edit.map((data, index) =>\r\n                                    <span className=\"selectedBlock\">{data}<a href=\"#\"  onClick={(event) => this.RemoveMessageSegmentsBlockEdit(index,event)} className=\"cross\">X</a></span>\r\n                                )}\r\n                            <div className=\"addblock\">\r\n                                {this.state.hideTextboxEdit\r\n                                ?\r\n                                <p className=\"gap1\"><a href=\"#\" onClick={this.showTextBoxHandlerEdit} className=\"blue_link\">Add another block</a></p>\r\n                                :\r\n                                <textarea name=\"default_message_text_edit\" value={this.state.default_message_text_edit} onChange={this.inputChangeHandller} id=\"default_message_text_edit\" className=\"withtag otherstyle\" placeholder=\"Build block content\">\r\n                        \r\n                                </textarea>\r\n                                }\r\n                                \r\n                                {this.state.default_message_text_edit==\"\"\r\n                                ?\r\n                                \"\"\r\n                                :\r\n                                <a href=\"#\" onClick={this.storeInMessageBlockEdit} className=\"add\">Add</a>\r\n                                }\r\n                            </div>\r\n                            <button type=\"button\" onClick={() => this.insertTagAtMessageSegments_edit('default_message_text_edit', '{user_name}')} className=\"formtag\">[ User Name ]</button> \r\n                            <button type=\"button\" onClick={() => this.insertTagAtMessageSegments_edit('default_message_text_edit', '{date}')} class=\"formtag\">[ Todays Date ]</button>\r\n\r\n                            <p>&nbsp;</p>\r\n\r\n                            <button onClick={this.submitAddSegmentEdit} className=\"blue_btn\" type=\"submit\">Update Message Segment</button>\r\n                        </form>  \r\n                    </div>\r\n                :\r\n                \"\"\r\n                }\r\n            </div>\r\n        )\r\n      }\r\n}\r\nexport default  segment;","C:\\GrammyWammy\\front-end\\src\\components\\modules\\Setting\\ResponseSetting\\IndividualComponents\\autoResponder.js",["328","329","330","331","332","333","334","335","336","337","338","339","340","341","342","343","344","345","346","347","348","349","350","351","352","353"],"import React, { Component } from \"react\";\r\nimport plusLogo from  \"../../../../../images/plus.svg\";\r\nimport editLogo from  \"../../../../../images/edit.svg\";\r\nimport deleteLogo from  \"../../../../../images/delete.svg\";\r\nimport EmptyFileLogo from \"../../../../../images/empty_file.svg\";\r\nimport LoaderLogo from \"../../../../../images/Loader.gif\"\r\nimport backArrowLogo from \"../../../../../images/arrow2.svg\";\r\nimport AutoResponderService from  \"../../../../../services/autoResponderServices\";\r\nimport { WithContext as ReactTags } from 'react-tag-input';\r\nconst KeyCodes = {\r\n    comma: 188,\r\n    enter: 13,\r\n  };\r\n  \r\nconst delimiters = [KeyCodes.comma, KeyCodes.enter];\r\nclass responseSetting extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n          autoResponsederList:1,\r\n          autoResponsederCreate:0,\r\n          autoResponsederEdit:0,\r\n          autoresponderListValue:[],\r\n          auto_responder_name:\"\",\r\n          auto_responder_keywords: [],\r\n          auto_responder_message:\"\",\r\n          auto_responder_status:1,\r\n            loader:false,\r\n            auto_responder_id_edit:\"\",\r\n            auto_responder_name_edit:\"\",\r\n            auto_responder_message_edit:\"\",\r\n            auto_responder_status_edit:1,\r\n            auto_responder_keywords_edits:[]\r\n        }\r\n        this.handleDelete = this.handleDelete.bind(this);\r\n        this.handleAddition = this.handleAddition.bind(this);\r\n\r\n        this.handleEditDelete = this.handleEditDelete.bind(this);\r\n        this.handleEditAddition = this.handleEditAddition.bind(this);\r\n    }\r\n    autoSetting = () => {\r\n        console.log(\"hiyy\",this.state.auto_responder_status )\r\n        if(this.state.auto_responder_status === 0){\r\n            this.setState({auto_responder_status:1})\r\n        }else{\r\n            this.setState({auto_responder_status:0})\r\n        }\r\n    }\r\n    autoSettingEdit = () => {\r\n        console.log(\"hiyy\",this.state.auto_responder_status_edit )\r\n        if(this.state.auto_responder_status_edit === 0){\r\n            this.setState({auto_responder_status_edit:1})\r\n        }else{\r\n            this.setState({auto_responder_status_edit:0})\r\n        }\r\n    }\r\n\r\n    handleDelete(i) {\r\n        const { auto_responder_keywords } = this.state;\r\n        this.setState({\r\n            auto_responder_keywords: auto_responder_keywords.filter((auto_responder_keyword, index) => index !== i),\r\n        });\r\n    }\r\n    handleEditDelete(i) {\r\n        const { auto_responder_keywords_edits } = this.state;\r\n        this.setState({\r\n            auto_responder_keywords_edits: auto_responder_keywords_edits.filter((auto_responder_keywords_edit, index) => index !== i),\r\n        });\r\n    }\r\n    handleAddition(auto_responder_keyword) {\r\n        this.setState(state => ({ auto_responder_keywords: [...state.auto_responder_keywords, auto_responder_keyword] }));\r\n    }\r\n    handleEditAddition(auto_responder_keywords_edit) {\r\n        this.setState(state => ({ auto_responder_keywords_edits: [...state.auto_responder_keywords_edits, auto_responder_keywords_edit] }));\r\n    }\r\n    addAutoResponderHandler  = async (event) =>  {\r\n        this.setState({loader:true});\r\n    event.preventDefault();\r\n    this.setState({\r\n        autoResponsederList:0,\r\n        autoResponsederCreate:1,\r\n        autoResponsederEdit:0,\r\n        loader:false\r\n    })\r\n    \r\n    }\r\n    listAutoResponderHandler  = async (event) =>  {\r\n        event.preventDefault();\r\n        this.setState({\r\n            autoResponsederList:1,\r\n            autoResponsederCreate:0,\r\n            autoResponsederEdit:0,\r\n        })\r\n    }\r\n    /**\r\n     * @insertTagAtMessageSegments\r\n     * in this function we are managing the tag in welcome message area\r\n    */\r\n    insertTagAtMessageSegments(areaId, text) {\r\n        console.log(\"Yo\");\r\n        var txtarea = document.getElementById(areaId);\r\n        if (!txtarea) {\r\n        return;\r\n        }\r\n        // if (txtarea.value.length < 188) {\r\n        var scrollPos = txtarea.scrollTop;\r\n        var strPos = 0;\r\n        var br = ((txtarea.selectionStart || txtarea.selectionStart == '0') ?\r\n        \"ff\" : (document.selection ? \"ie\" : false));\r\n        if (br == \"ie\") {\r\n        txtarea.focus();\r\n        var range = document.selection.createRange();\r\n        range.moveStart('character', -txtarea.value.length);\r\n        strPos = range.text.length;\r\n        } else if (br == \"ff\") {\r\n        strPos = txtarea.selectionStart;\r\n        }\r\n        var front = (txtarea.value).substring(0, strPos);\r\n        var back = (txtarea.value).substring(strPos, txtarea.value.length);\r\n        txtarea.value = front + text + back;\r\n        strPos = strPos + text.length;\r\n        let WelcomeMessage = txtarea.value;\r\n        WelcomeMessage = WelcomeMessage.replace(/{user_name}/g, \"\");\r\n        WelcomeMessage = WelcomeMessage.replace(/{last_name}/g, \"\");\r\n        WelcomeMessage = WelcomeMessage.replace(/{date}/g, \"\");\r\n        WelcomeMessage = WelcomeMessage.replace(/{date_time}/g, \"\");\r\n        //console.log(\"This is the message ========\",WelcomeMessage);\r\n        if(areaId == \"auto_responder_message\"){\r\n            this.setState({ auto_responder_message: txtarea.value});\r\n        }else{\r\n            this.setState({ auto_responder_message_edit: txtarea.value});\r\n        }\r\n        \r\n        // this.setState({ welcomeContent: txtarea.value, welcomeTextLengthCount: txtarea.value });\r\n        if (br == \"ie\") {\r\n        txtarea.focus();\r\n        var ieRange = document.selection.createRange();\r\n        ieRange.moveStart('character', -txtarea.value.length);\r\n        ieRange.moveStart('character', strPos);\r\n        ieRange.moveEnd('character', 0);\r\n        ieRange.select();\r\n        } else if (br == \"ff\") {\r\n        txtarea.selectionStart = strPos;\r\n        txtarea.selectionEnd = strPos;\r\n        txtarea.focus();\r\n        }\r\n        txtarea.scrollTop = scrollPos;\r\n        // }\r\n    }\r\n     /**\r\n        * @inputChangeHandller \r\n        * getting input field values\r\n    */\r\n    inputChangeHandller = (event) => {\r\n        this.setState({ [event.target.name]: event.target.value })\r\n    }\r\n    createAutoResponderGroupHandler =  (event) =>{\r\n        event.preventDefault();\r\n        let Token=localStorage.getItem(\"kyubi_user_token\");\r\n        let payload = {\r\n            user_id:Token,\r\n            auto_responder_name:this.state.auto_responder_name,\r\n            auto_responder_keywords:this.state.auto_responder_keywords,\r\n            auto_responder_message:this.state.auto_responder_message,\r\n            auto_responder_status:this.state.auto_responder_status\r\n        }\r\n      \r\n         AutoResponderService.createAutoResponder(payload).then(response =>{\r\n            console.log(\"This I gottttt\",payload);\r\n          if(response.data.code == 1){\r\n            let UserTokenNew=localStorage.getItem(\"kyubi_user_token\");\r\n            let payloadNew ={\r\n                user_id:UserTokenNew\r\n            }\r\n            AutoResponderService.listAutoResponder(payloadNew).then(async responsex =>{\r\n                if(responsex.data.payload !=  \"\" ){\r\n                    console.log(\"This is what i Got\",responsex.data.payload);\r\n                    if(responsex.data.payload.autokey.length>0){\r\n                        console.log(\"This is what i Got\",responsex.data.payload.autokey);\r\n                        localStorage.setItem('keywordsTally', JSON.stringify(responsex.data.payload.listkey));\r\n                        this.setState({\r\n                                        autoresponderListValue:responsex.data.payload.autokey,\r\n                                        autoResponsederList:1,\r\n                                        autoResponsederCreate:0,\r\n                                        autoResponsederEdit:0,\r\n                                        auto_responder_name:\"\",\r\n                                        auto_responder_keywords: [],\r\n                                        auto_responder_message:\"\",\r\n                                        auto_responder_status:1,\r\n                        })\r\n                    }\r\n                  }\r\n            })\r\n          }\r\n          console.log(\"This Is I Got ====== \",response);\r\n        });\r\n    }\r\n    createAutoResponderGroupHandlerEdit =  (event) =>{\r\n        event.preventDefault();\r\n        this.setState({loader:true})\r\n        let Token=localStorage.getItem(\"kyubi_user_token\");\r\n        let payload = {\r\n            user_id:Token,\r\n            auto_responder_id:this.state.auto_responder_id_edit,\r\n            auto_responder_name:this.state.auto_responder_name_edit,\r\n            auto_responder_keywords:this.state.auto_responder_keywords_edits,\r\n            auto_responder_message:this.state.auto_responder_message_edit,\r\n            auto_responder_status:this.state.auto_responder_status_edit\r\n        }\r\n        console.log(\"This I am Getting\",payload)\r\n      \r\n        AutoResponderService.updateAutoResponder(payload).then(response =>{\r\n            console.log(\"This I gottttt\",payload);\r\n          if(response.data.code == 1){\r\n            let UserTokenNew=localStorage.getItem(\"kyubi_user_token\");\r\n            let payloadNew ={\r\n                user_id:UserTokenNew\r\n            }\r\n            //localStorage.setItem('keywordsTally', JSON.stringify(response.data.payload.auto_responder_keywords));\r\n\r\n            AutoResponderService.listAutoResponder(payloadNew).then(async responsex =>{\r\n                if(responsex.data.payload !=  \"\" ){\r\n                    console.log(\"This is what i Got\",responsex.data.payload);\r\n                    if(responsex.data.payload.autokey.length>0){\r\n                        localStorage.setItem('keywordsTally', JSON.stringify(responsex.data.payload.listkey));\r\n                        console.log(\"This is what i Got\",responsex.data.payload.autokey);\r\n                        this.setState({\r\n                                        autoresponderListValue:responsex.data.payload.autokey,\r\n                                        autoResponsederList:1,\r\n                                        autoResponsederCreate:0,\r\n                                        autoResponsederEdit:0,\r\n                                        auto_responder_id_edit:\"\",\r\n                                        auto_responder_name_edit:\"\",\r\n                                        auto_responder_keywords_edits:[],\r\n                                        auto_responder_message_edit:\"\",\r\n                                        auto_responder_status_edit:1,\r\n                                        loader:false\r\n                        })\r\n                    }\r\n                  }\r\n            })\r\n          }\r\n          console.log(\"This Is I Got ====== \",response);\r\n        });\r\n    }\r\n    editAutoResponder(autoresponder_id,event){\r\n        this.setState({loader:true})\r\n        event.preventDefault();\r\n        let payload = { \r\n            Id: autoresponder_id \r\n        }; \r\n        AutoResponderService.editAutoResponder(payload).then(async response=>{\r\n            console.log(\"O)OO)O)O\",response);\r\n            if(response.data.code === 1){\r\n                let newKey=[];\r\n                await response.data.payload[0].autoresponderkeywords.map(async (result, i) => {\r\n                    console.log(result.keywords);\r\n                    newKey.push({\"id\":result.keywords,\"text\":result.keywords})\r\n                });\r\n                this.setState({\r\n                    auto_responder_id_edit:response.data.payload[0]._id,\r\n                    auto_responder_name_edit:response.data.payload[0].auto_responder_name,\r\n                    auto_responder_message_edit:response.data.payload[0].message,\r\n                    auto_responder_status_edit:response.data.payload[0].status,\r\n                    auto_responder_keywords_edits:newKey,\r\n                    autoResponsederList:0,\r\n                    autoResponsederCreate:0,\r\n                    autoResponsederEdit:1,\r\n                    loader:false\r\n                  })\r\n            }\r\n        }).catch(error=>{\r\n\r\n        })\r\n    }\r\n    editAutoResponderStatus(autoresponder_id,prestatus){\r\n        this.setState({loader:true})\r\n        let status =1;\r\n        if(prestatus == 1){\r\n            status=0;\r\n        }else{\r\n            status=1;\r\n        }\r\n        let payload = {\r\n            autoresponder_id:autoresponder_id,\r\n            status:status\r\n        };\r\n        console.log(\"This is a Seeeee====>\",payload);\r\n        AutoResponderService.updateAutoResponderStatus(payload).then(response =>{\r\n            console.log(\"This I gottttt\",payload);\r\n          if(response.data.code == 1){\r\n            let UserTokenNew=localStorage.getItem(\"kyubi_user_token\");\r\n            let payloadNew ={\r\n                user_id:UserTokenNew\r\n            }\r\n            AutoResponderService.listAutoResponder(payloadNew).then(async responsex =>{\r\n                if(responsex.data.payload !=  \"\" ){\r\n                    console.log(\"This is what i Got\",responsex.data.payload);\r\n                    if(responsex.data.payload.autokey.length>0){\r\n                        console.log(\"This is what i Got\",responsex.data.payload.autokey);\r\n                        this.setState({\r\n                                        autoresponderListValue:responsex.data.payload.autokey,\r\n                                        autoResponsederList:1,\r\n                                        autoResponsederCreate:0,\r\n                                        autoResponsederEdit:0,\r\n                                        loader:false\r\n                                        \r\n                        })\r\n                    }\r\n                  }\r\n            })\r\n          }\r\n          console.log(\"This Is I Got ====== \",response);\r\n        });\r\n    }\r\n    deleteAutoResponder(autoresponder_id,event){\r\n        this.setState({loader:true})\r\n        event.preventDefault();\r\n        let user_id=localStorage.getItem(\"user_id\");\r\n        let payload = { \r\n            Id: autoresponder_id ,\r\n            user_id:user_id\r\n        }; \r\n        console.log(\"O)OO)O)O\",payload);\r\n        AutoResponderService.deleteAutoResponderStatus(payload).then(response =>{\r\n            console.log(\"This I gottttt\",payload);\r\n          if(response.data.code == 1){\r\n            let UserTokenNew=localStorage.getItem(\"kyubi_user_token\");\r\n            let payloadNew ={\r\n                user_id:UserTokenNew\r\n            }\r\n            AutoResponderService.listAutoResponder(payloadNew).then(async responsex =>{\r\n                \r\n                if(responsex.data.payload !=  \"\" ){\r\n                    localStorage.setItem('keywordsTally', JSON.stringify(responsex.data.payload.listkey));\r\n                        this.setState({\r\n                                        autoresponderListValue:responsex.data.payload.autokey,\r\n                                        autoResponsederList:1,\r\n                                        autoResponsederCreate:0,\r\n                                        autoResponsederEdit:0,\r\n                                        loader:false\r\n                                        \r\n                        })\r\n                  }\r\n            })\r\n          }\r\n          console.log(\"This Is I Got ====== \",response);\r\n        });\r\n    }\r\n    componentDidMount(){\r\n        this.setState({loader:true});\r\n        let UserToken=localStorage.getItem(\"kyubi_user_token\");\r\n        //this.setState({autoresponderList:autoresponderList})\r\n        let payload ={\r\n            user_id:UserToken\r\n        }\r\n        AutoResponderService.listAutoResponder(payload).then(async response =>{\r\n            console.log(\"This is what i Got\",response);\r\n            \r\n          if(response.data.payload !=  \"\" ){\r\n            console.log(\"This is what i Got\",response.data.payload);\r\n            if(response.data.payload.autokey.length>0){\r\n                console.log(\"This is what i Got\",response.data.payload.autokey);\r\n                this.setState({autoresponderListValue:response.data.payload.autokey,loader:false})\r\n            }\r\n            \r\n          }\r\n          this.setState({loader:false});\r\n        }).catch(error=>{\r\n            this.setState({loader:false});\r\n            this.setState({autoresponderListValue:[],loader:false})\r\n        });\r\n    }\r\n      render() {\r\n        const { auto_responder_keywords,auto_responder_keywords_edits } = this.state;\r\n        return (\r\n        <div>\r\n                {this.state.autoResponsederList ?\r\n                \r\n                <div id=\"tabautoResponder\" className=\"subtabcontent\">\r\n                    {this.state.loader && (   \r\n                                <div className=\"after_login_refresh\"><img src={LoaderLogo} alt=\"\"/></div>\r\n                    )}\r\n                    { this.state.autoresponderListValue.length != 0 ?\r\n\r\n                        <div>\r\n                            <div className=\"headding\">\r\n                                <span>Auto Responder Lists</span> <a href=\"\" onClick={this.addAutoResponderHandler} className=\"createbtn\"><img alt=\"\" src={plusLogo}/> Create New</a>\r\n                            </div>\r\n                            <div className=\"listingholder\">\r\n\r\n                            {this.state.autoresponderListValue.map((data, i) => {\r\n                                return(\r\n                                    \r\n                                    <div className={data.status === 1  ?  \"listing_card\" :\"listing_card inactive\"}>\r\n                                        <div className=\"head\">\r\n                                            <div className=\"txt\">{data.auto_responder_name}</div>\r\n                                            <div className=\"action\">\r\n                                                <label className=\"switch_box box_2\">\r\n                                                <input type=\"checkbox\" onChange={() => this.editAutoResponderStatus(data._id,data.status)} className=\"switch_2\" id=\"\" name=\"\" checked={data.status === 1  ?  \"checked\" :\"\"}  />\r\n                                                <div className=\"toogler\"></div>\r\n                                                </label>\r\n                                                <a href=\"#\" onClick={(event) => this.editAutoResponder(data._id,event)} ><img src={editLogo} alt=\"\"/></a> \r\n                                                <a href=\"#\"  onClick={(event) => this.deleteAutoResponder(data._id,event)} ><img src={deleteLogo} alt=\"\"/></a>\r\n                                            </div>\r\n                                        </div>\r\n                                        <div className=\"body\">\r\n                                                <p className=\"qn\">{data.message}</p>\r\n                                            <div className=\"listfooter\">\r\n                                                <p>Keywords:</p>\r\n                                                {   data.autoresponderkeywords.map((result, i) => {\r\n                                                        return (\r\n                                                            <span class=\"tags\">{result.keywords}</span>\r\n                                                        )\r\n                                                    })\r\n                                                }\r\n                                                \r\n                                            </div>\r\n                                        </div>\r\n                                        \r\n                                    </div>                                  \r\n\r\n                                )\r\n                            })}\r\n                            </div>\r\n\r\n                        </div>\r\n                            \r\n                    :\r\n                    <div className=\"list_no_record\">\r\n                        <img src={EmptyFileLogo} alt=\"\"/>\r\n                        <p>You haven’t created any Auto Responder yet.</p>\r\n                        <a href=\"\" onClick={this.addAutoResponderHandler} className=\"createbtn\"><img src={plusLogo} alt=\"\"/> Create New</a>\r\n                    </div>\r\n                    }\r\n                </div> \r\n                :\r\n                \"\"\r\n                }\r\n                {this.state.autoResponsederCreate ?\r\n                <div id=\"tabautoResponder\" className=\"subtabcontent\">\r\n                    {this.state.loader && (   \r\n                                <div className=\"after_login_refresh\"><img src={LoaderLogo} alt=\"\"/></div>\r\n                    )}\r\n                    <div className=\"headding gap1\">\r\n                            <span className=\"big\">Create a Auto Responder</span> \r\n                            <a  onClick={this.listAutoResponderHandler} href=\"#\" className=\"roundarrow\"><img src={backArrowLogo}/></a>\r\n                        </div>\r\n                   <div className=\"makeitScroll\">     \r\n                    <form>\r\n                        <label>\r\n                            Auto Responder Name\r\n                        </label>\r\n                            <input type=\"text\" \r\n                            name=\"auto_responder_name\" \r\n                            id=\"auto_responder_name\" \r\n                            placeholder=\"Auto-Responder Name\" \r\n                            value={this.state.auto_responder_name}\r\n                            onChange={this.inputChangeHandller}/>\r\n                        <label>\r\n                            Keywords\r\n                        </label>\r\n                            <ReactTags \r\n                            placeholder=\"Press enter Or Press , to Create Autoresponder Keywords\"\r\n                            tags={auto_responder_keywords}\r\n                            handleDelete={this.handleDelete}\r\n                            handleAddition={this.handleAddition}\r\n                            allowUnique={true}\r\n                            delimiters={delimiters} />\r\n                            \r\n                        <label>Auto Response Message</label>\r\n                            <textarea className=\"withtag\" \r\n                            name=\"auto_responder_message\"\r\n                            id=\"auto_responder_message\"\r\n                            rows=\"3\"  \r\n                            placeholder=\"Please enter the response message....\"\r\n                            value={this.state.auto_responder_message}\r\n                            onChange={this.inputChangeHandller}\r\n                            ></textarea>\r\n                            <button type=\"button\" onClick={() => this.insertTagAtMessageSegments('auto_responder_message', '{user_name}')} className=\"formtag\">[ User Name ]</button> \r\n                            <button type=\"button\" onClick={() => this.insertTagAtMessageSegments('auto_responder_message', '{date}')} class=\"formtag\">[ Todays Date ]</button>\r\n\r\n\r\n                            \r\n                        <label>\r\n                            {this.state.auto_responder_status ?\r\n                                <input className=\"checking\" type=\"checkbox\" id=\"checkboxPrimary3\" name=\"auto_responder_status\" onChange={this.autoSetting} checked/>\r\n                            :\r\n                                <input className=\"checking\" type=\"checkbox\" id=\"checkboxPrimary3\" name=\"auto_responder_status\" onChange={this.autoSetting}/>\r\n                            }\r\n                            Activate this Auto Responder\r\n                        </label>\r\n    \r\n                        <button className=\"blue_btn\" onClick={this.createAutoResponderGroupHandler} type=\"submit\">Save Auto Responder</button>\r\n                    </form>\r\n                    </div>\r\n                </div>\r\n                :\r\n                \"\"\r\n                }\r\n                {this.state.autoResponsederEdit?\r\n                <div id=\"tabautoResponder\" className=\"subtabcontent\">\r\n                    {this.state.loader && (   \r\n                                <div className=\"after_login_refresh\"><img src={LoaderLogo} alt=\"\"/></div>\r\n                    )}\r\n                    <div className=\"headding gap1\">\r\n                            <span className=\"big\">Edit a Auto Responder</span> \r\n                            <a  onClick={this.listAutoResponderHandler} href=\"#\" className=\"roundarrow\"><img src={backArrowLogo}/></a>\r\n                        </div>\r\n                <div className=\"makeitScroll\">      \r\n                    <form>\r\n                        <label>\r\n                            Auto Responder Name\r\n                        </label>\r\n                            <input type=\"text\" \r\n                            name=\"auto_responder_name_edit\" \r\n                            id=\"auto_responder_name_edit\" \r\n                            placeholder=\"Auto-Responder Name\" \r\n                            value={this.state.auto_responder_name_edit}\r\n                            onChange={this.inputChangeHandller}/>\r\n                        <label>\r\n                            Keywords\r\n                        </label>\r\n                            <ReactTags \r\n                            placeholder=\"Press enter Or Press , to Create Autoresponder Keywords\"\r\n                            tags={auto_responder_keywords_edits}\r\n                            handleDelete={this.handleEditDelete}\r\n                            handleAddition={this.handleEditAddition}\r\n                            allowUnique={true}\r\n                            delimiters={delimiters} />\r\n                        \r\n                        <label>Auto Response Message</label>\r\n                            <textarea className=\"withtag\" \r\n                            name=\"auto_responder_message_edit\"\r\n                            id=\"auto_responder_message_edit\"\r\n                            rows=\"3\"  \r\n                            placeholder=\"Please enter the response message....\"\r\n                            value={this.state.auto_responder_message_edit}\r\n                            onChange={this.inputChangeHandller}\r\n                            ></textarea>\r\n                            <button type=\"button\" onClick={() => this.insertTagAtMessageSegments('auto_responder_message_edit', '{user_name}')} className=\"formtag\">[ User Name ]</button> \r\n                            <button type=\"button\" onClick={() => this.insertTagAtMessageSegments('auto_responder_message_edit', '{date}')} class=\"formtag\">[ Todays Date ]</button>\r\n\r\n                        <label>\r\n                            {this.state.auto_responder_status_edit ?\r\n                                <input className=\"checking\" type=\"checkbox\" id=\"checkboxPrimary3\" name=\"auto_responder_status_edit\" onChange={this.autoSettingEdit} checked/>\r\n                            :\r\n                                <input className=\"checking\" type=\"checkbox\" id=\"checkboxPrimary3\" name=\"auto_responder_status_edit\" onChange={this.autoSettingEdit}/>\r\n                            }\r\n                            Activate this Auto Responder\r\n                        </label>\r\n                        <button className=\"blue_btn\" onClick={this.createAutoResponderGroupHandlerEdit} type=\"submit\">Update Auto Responder</button>\r\n\r\n                    </form>\r\n                    </div>\r\n                </div>\r\n                :\r\n                \"\"\r\n                }\r\n\r\n        </div>\r\n            \r\n            \r\n       \r\n        )\r\n      }\r\n}\r\nexport default responseSetting;","C:\\GrammyWammy\\front-end\\src\\components\\modules\\Setting\\ResponseSetting\\IndividualComponents\\defaultMessage.js",["354","355","356","357","358","359","360","361","362","363","364"],"import React, { Component } from \"react\";\r\nimport AuthServices from \"../../../../../services/authService\";\r\nimport GroupServices from \"../../../../../services/groupServices\";\r\nimport SettingServices from \"../../../../../services/setting\";\r\nimport LoaderLogo from \"../../../../../images/Loader.gif\";\r\n\r\nimport Select from 'react-select';\r\nconst options = [\r\n  {value:0,label:\"Text  Message\"},\r\n  {value:1,label:\"Message Group\"}\r\n];\r\nclass defaultMessage extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n          selectedOption:  {value:1,label:\"Message Group\"},\r\n          default_message_type:0,\r\n          MessageGroupList:[],\r\n          GPL:[],\r\n          selectedGPL:null,\r\n          default_message_group:\"\",\r\n          default_message_text:\"\",\r\n          default_time_delay:0,\r\n          loader:false,\r\n          notifier:false,\r\n          notifier_head:\"\",\r\n          notifier_message:\"\"\r\n        }\r\n      }\r\n      handleChange = selectedOption => {\r\n        this.setState({ selectedOption });\r\n        console.log(`Option selected:`, selectedOption);\r\n        console.log(`Opppppppppppp`, selectedOption.value);\r\n        this.setState({default_message_type:selectedOption.value});\r\n      };\r\n      handleChangeGPL = selectedGPL =>  {\r\n        this.setState({ selectedGPL });\r\n        console.log(`Option selected:`, selectedGPL);\r\n        console.log(`Opppppppppppp`, selectedGPL.value);\r\n        this.setState({default_message_group:selectedGPL.value});\r\n      }\r\n      /**\r\n        * @inputChangeHandller \r\n        * getting input field values\r\n      */\r\n      inputChangeHandller = (event) => {\r\n        this.setState({ [event.target.name]: event.target.value })\r\n      }\r\n      /**\r\n         * @insertTagAtMessageSegments\r\n         * in this function we are managing the tag in welcome message area\r\n        */\r\n      insertTagAtMessageSegments(areaId, text) {\r\n        var txtarea = document.getElementById(areaId);\r\n        if (!txtarea) {\r\n        return;\r\n        }\r\n        // if (txtarea.value.length < 188) {\r\n        var scrollPos = txtarea.scrollTop;\r\n        var strPos = 0;\r\n        var br = ((txtarea.selectionStart || txtarea.selectionStart == '0') ?\r\n        \"ff\" : (document.selection ? \"ie\" : false));\r\n        if (br == \"ie\") {\r\n        txtarea.focus();\r\n        var range = document.selection.createRange();\r\n        range.moveStart('character', -txtarea.value.length);\r\n        strPos = range.text.length;\r\n        } else if (br == \"ff\") {\r\n        strPos = txtarea.selectionStart;\r\n        }\r\n        var front = (txtarea.value).substring(0, strPos);\r\n        var back = (txtarea.value).substring(strPos, txtarea.value.length);\r\n        txtarea.value = front + text + back;\r\n        strPos = strPos + text.length;\r\n        let WelcomeMessage = txtarea.value;\r\n        WelcomeMessage = WelcomeMessage.replace(/{user_name}/g, \"\");\r\n        WelcomeMessage = WelcomeMessage.replace(/{last_name}/g, \"\");\r\n        WelcomeMessage = WelcomeMessage.replace(/{date}/g, \"\");\r\n        WelcomeMessage = WelcomeMessage.replace(/{date_time}/g, \"\");\r\n        //console.log(\"This is the message ========\",WelcomeMessage);\r\n        this.setState({ default_message_text: txtarea.value});\r\n        // this.setState({ welcomeContent: txtarea.value, welcomeTextLengthCount: txtarea.value });\r\n        if (br == \"ie\") {\r\n        txtarea.focus();\r\n        var ieRange = document.selection.createRange();\r\n        ieRange.moveStart('character', -txtarea.value.length);\r\n        ieRange.moveStart('character', strPos);\r\n        ieRange.moveEnd('character', 0);\r\n        ieRange.select();\r\n        } else if (br == \"ff\") {\r\n        txtarea.selectionStart = strPos;\r\n        txtarea.selectionEnd = strPos;\r\n        txtarea.focus();\r\n        }\r\n        txtarea.scrollTop = scrollPos;\r\n        // }\r\n      }\r\n      \r\n      submitAddDefaultMessage   =    async   (event) =>  {\r\n        event.preventDefault();\r\n        this.setState({loader:true})\r\n        let payload =   {\r\n            default_message_type:this.state.default_message_type,\r\n            default_message_group:this.state.default_message_group,\r\n            default_message_text:this.state.default_message_text,\r\n            default_time_delay:this.state.default_time_delay,\r\n            kyubi_user_token:localStorage.getItem(\"kyubi_user_token\")\r\n        }\r\n        console.log(\"This I have to save in DB as Segments\",payload);\r\n        await SettingServices.setSetting(payload).then(async result=>{\r\n          if(result.data.code==1){\r\n                      let responsenewvalue =result.data;\r\n                      localStorage.setItem('kyubi_user_token', responsenewvalue.payload.UserInfo.kyubi_user_token);\r\n                      localStorage.setItem('user_id', responsenewvalue.payload.UserInfo.user_id);\r\n                      localStorage.setItem('insta_id', responsenewvalue.payload.UserInfo.instagram_id);\r\n                      localStorage.setItem('insta_username', responsenewvalue.payload.UserInfo.instagram_name);\r\n                      localStorage.setItem('insta_name', responsenewvalue.payload.UserInfo.instagram_profile_name);\r\n                      localStorage.setItem('insta_image', responsenewvalue.payload.UserInfo.instagram_image);\r\n                      \r\n                      if(responsenewvalue.payload.UserSettings.default_message){\r\n                        localStorage.setItem('default_message', responsenewvalue.payload.UserSettings.default_message);\r\n                      }else{\r\n                        localStorage.setItem('default_message', 0);\r\n                      }\r\n                      if(responsenewvalue.payload.UserSettings.default_message_text){\r\n                        localStorage.setItem('default_message_text', responsenewvalue.payload.UserSettings.default_message_text);\r\n                      }else{\r\n                        localStorage.setItem('default_message_text',\"\");\r\n                      }\r\n                      if(responsenewvalue.payload.UserSettings.autoresponder){\r\n                        localStorage.setItem('autoresponder', responsenewvalue.payload.UserSettings.autoresponder);\r\n                        \r\n                      }else{\r\n                        localStorage.setItem('autoresponder', 0);\r\n                      }\r\n                      if(responsenewvalue.payload.UserSettings.default_time_delay){\r\n                        localStorage.setItem('default_time_delay', responsenewvalue.payload.UserSettings.default_time_delay);\r\n                      }\r\n                      \r\n                      localStorage.setItem('keywordsTally', JSON.stringify(responsenewvalue.payload.AutoResponderKeywords));\r\n                      this.setState({\r\n                        loader:false,\r\n                        notifier:true,\r\n                        notifier_head:\"Well Done !\",\r\n                        notifier_message:\"Awesome, you successfully Updated the Default Settings\"\r\n                      });\r\n                      setInterval(() => {\r\n                        this.setState({\r\n                                notifier:false,\r\n                                notifier_head:\"\",\r\n                                notifier_message:\"\"\r\n                        });\r\n                      },2000);\r\n          }else{\r\n            this.setState({\r\n              loader:false,\r\n              notifier:true,\r\n              notifier_head:\"OOhh Snap !\",\r\n              notifier_message:\"Something went Wrong  Please try again after sometime\"\r\n            });\r\n            setInterval(() => {\r\n              this.setState({\r\n                      loader:false,\r\n                      notifier:false,\r\n                      notifier_head:\"\",\r\n                      notifier_message:\"\"\r\n              });\r\n            },2000);\r\n          }\r\n          \r\n        })\r\n      }\r\n      componentDidMount(){\r\n        this.setState({loader:true})\r\n        let  params ={\r\n          user_rec    :   localStorage.getItem('kyubi_user_token')\r\n        };\r\n        let GPDID=\"\";\r\n        AuthServices.userRetrive(params).then(async result=>{\r\n          console.log(\"This I got From backGround SUSSSSS Default\",result);\r\n          let opt={}\r\n          if(result.data.payload.UserSettings.default_message_type ===1){\r\n            opt={value:1,label:\"Message Group\"}\r\n          }else{\r\n            opt={value:0,label:\"Text  Message\"}\r\n          }\r\n          if(result.data.payload.UserSettings.default_message_group){\r\n            this.setState({\r\n              default_message_group:result.data.payload.UserSettings.default_message_group\r\n            });\r\n            GPDID=result.data.payload.UserSettings.default_message_group;\r\n          }\r\n          this.setState({\r\n            default_message_type:result.data.payload.UserSettings.default_message_type,\r\n            selectedOption:opt,\r\n            default_message_text:result.data.payload.UserSettings.default_message_text,\r\n            default_time_delay:result.data.payload.UserSettings.default_time_delay,\r\n          })\r\n\r\n\r\n          let GroupParams = {\r\n            user_id    :   localStorage.getItem('user_id')\r\n          }\r\n          GroupServices.getGroup(GroupParams).then(async result=>{\r\n            if(result.data.code == 1){\r\n                let resultGroupList =  [];\r\n                \r\n                result.data.payload.map(data=>{\r\n                  \r\n                  resultGroupList.push({value:data._id,label:data.title})\r\n                  console.log(\"This MGP\",this.state.default_message_group);\r\n                  console.log(\"This GAP\",data._id);\r\n                  console.log(\"This GAP!\",GPDID);\r\n                  if(GPDID != \"\" && GPDID==data._id){\r\n  \r\n                    this.setState({\r\n                      selectedGPL:{value:data._id,label:data.title}\r\n                    });\r\n                  }\r\n                });\r\n                this.setState({\r\n                  MessageGroupList:result.data.payload,\r\n                  GPL:resultGroupList\r\n                })\r\n                \r\n                \r\n            }\r\n            \r\n          }).catch(error=>{\r\n            console.log(\"This I got From DDDDBBBBBB EROOOOOO\",error);\r\n          })\r\n\r\n          this.setState({loader:false})\r\n\r\n\r\n        }).catch(error=>{\r\n          this.setState({loader:false})\r\n          console.log(\"This I got From backGround EROOOOOO Default\",error);\r\n        })\r\n        \r\n\r\n        \r\n      }\r\n      render() {\r\n        const { selectedOption,selectedGPL,GPL } = this.state;\r\n\r\n        return (\r\n            <div id=\"tabdefaultMessage\" className=\"subtabcontent\">\r\n              {this.state.loader && (   \r\n                <div className=\"after_login_refresh\"><img src={LoaderLogo} alt=\"\"/></div>\r\n               )}\r\n               {this.state.notifier  && (\r\n                        <div className=\"group_delete_sreen\">\r\n                            <div className=\"group_delete_popup\">\r\n                                <h3>{this.state.notifier_head}</h3>\r\n                                <p>{this.state.notifier_message}</p>\r\n                            </div>\r\n                        </div>\r\n                )}\r\n            <form>\r\n              <div className=\"selectbox\">\r\n              <Select\r\n              \r\n              value={selectedOption}\r\n              onChange={this.handleChange}\r\n              options={options}\r\n              />\r\n\r\n              </div>\r\n              {this.state.default_message_type ? \r\n              <div className=\"selectbox\">\r\n              <Select\r\n              \r\n              value={selectedGPL}\r\n              onChange={this.handleChangeGPL}\r\n              options={GPL}\r\n              />\r\n              </div>\r\n              : \r\n              <div>\r\n                <textarea name=\"default_message_text\" value={this.state.default_message_text} onChange={this.inputChangeHandller} id=\"default_message_text\" className=\"withtag otherstyle\" placeholder=\"Build block content\">\r\n                        \r\n                </textarea>\r\n\r\n              <button type=\"button\" onClick={() => this.insertTagAtMessageSegments('default_message_text', '{user_name}')} className=\"formtag\">[ User Name ]</button> \r\n              <button type=\"button\" onClick={() => this.insertTagAtMessageSegments('default_message_text', '{date}')} class=\"formtag\">[ Todays Date ]</button>\r\n\r\n              </div>\r\n              \r\n              }\r\n\r\n              <label className=\"gap2\">\r\n                Time Interval for Default Message\r\n              </label>\r\n              <div className=\"formnumber\">\r\n                <input type=\"number\" name=\"default_time_delay\" value={this.state.default_time_delay} onChange={this.inputChangeHandller}  placeholder=\"Enter Time Delay\" className=\"otherstyle\" />        \r\n                hour (s)</div>\r\n\r\n                <button onClick={this.submitAddDefaultMessage} className=\"blue_btn\" type=\"submit\">Save Message</button>\r\n            </form>\r\n            \r\n          </div>\r\n        )\r\n      }\r\n}\r\nexport default defaultMessage;","C:\\GrammyWammy\\front-end\\src\\components\\modules\\Setting\\DefaultMessageSettings\\IndividualComponents\\group.js",["365","366","367","368","369","370","371","372","373","374","375","376","377","378","379","380","381","382","383","384","385","386","387","388","389","390","391","392","393","394","395","396","397","398","399","400","401","402","403","404","405","406","407","408"],"import React, { Component } from \"react\";\r\nimport plusLogo from  \"../../../../../images/plus.svg\";\r\nimport editLogo from  \"../../../../../images/edit1.svg\";\r\nimport deleteLogo from  \"../../../../../images/delete1.svg\";\r\nimport viewLogo from  \"../../../../../images/view.svg\";\r\nimport backArrowLogo from \"../../../../../images/arrow2.svg\";\r\nimport smallPlusLogo    from \"../../../../../images/smallplus.svg\";\r\nimport blackCrossLogo   from \"../../../../../images/black_cross.svg\";\r\nimport SegmentServices from \"../../../../../services/segmentServices.js\";\r\nimport GroupServices from \"../../../../../services/groupServices.js\";\r\nimport LoaderLogo from \"../../../../../images/Loader.gif\";\r\nclass group extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n          groupList:1,\r\n          groupCreate:0,\r\n          groupEdit:0,\r\n          openCreateOption:0,\r\n          openCreateOptionKeyWord:0,\r\n          openCreateOptionStaticText:0,\r\n          openCreateOptionSegment:0,\r\n          DefaultSegments:[],\r\n          BlockStorage:[],\r\n          BlockStorageEdit:[],\r\n          TemporaryBlockStorage:[],\r\n          TemporaryBlockStorageEdit:[],\r\n          default_message_text_add:\"\",\r\n          default_message_text_edit:\"\",\r\n          showAddButton:0,\r\n          message_Group_List:[],\r\n          group_name_edit:\"\",\r\n          group_block_edit:[],\r\n          cgn:false,\r\n          egn:false,\r\n          loader:true,\r\n          group_id_edit:\"\",\r\n            openEditOption:0,\r\n            openEditOptionKeyWord:0,\r\n            openEditOptionStaticText:0,\r\n            openEditOptionSegment:0,\r\n            showEditButton:0\r\n        }\r\n      }\r\n\r\n    addGroupHandler  = async (event) =>  {\r\n        event.preventDefault();\r\n        this.setState({\r\n            groupList:0,\r\n            groupCreate:1,\r\n            groupEdit:0,\r\n            openCreateOption:0,\r\n            openCreateOptionKeyWord:0,\r\n            openCreateOptionStaticText:0,\r\n            openCreateOptionSegment:0\r\n        })\r\n    }\r\n    editGroupHandler  = async (event) =>  {\r\n        event.preventDefault();\r\n        this.setState({\r\n            groupList:0,\r\n            groupCreate:0,\r\n            groupEdit:1,\r\n            openEditOption:0,\r\n            openEditOptionKeyWord:0,\r\n            openEditOptionStaticText:0,\r\n            openEditOptionSegment:0\r\n        })\r\n    }\r\n    addOpenOptions  = async (event) =>  {\r\n        event.preventDefault();\r\n        this.setState({\r\n            openCreateOption:1,\r\n            openCreateOptionKeyWord:0,\r\n            openCreateOptionStaticText:0,\r\n            openCreateOptionSegment:0,\r\n            showAddButton:0\r\n        })\r\n    }\r\n    editOpenOptions = async (event) =>  {\r\n        event.preventDefault();\r\n        this.setState({\r\n            openEditOption:1,\r\n            openEditOptionKeyWord:0,\r\n            openEditOptionStaticText:0,\r\n            openEditOptionSegment:0,\r\n            showEditButton:0\r\n        })\r\n    }\r\n    listGroupHandler  = async (event) =>  {\r\n        event.preventDefault();\r\n        this.setState({\r\n            groupList:1,\r\n            groupCreate:0,\r\n            groupEdit:0,\r\n        })\r\n    }\r\n    addOpenOptionsSegment  = async (event) =>  {\r\n        event.preventDefault();\r\n        this.setState({\r\n            openCreateOptionKeyWord:0,\r\n            openCreateOptionStaticText:0,\r\n            openCreateOptionSegment:1\r\n        })\r\n    }\r\n    editOpenOptionsSegment  = async (event) =>  {\r\n        event.preventDefault();\r\n        this.setState({\r\n            openEditOptionKeyWord:0,\r\n            openEditOptionStaticText:0,\r\n            openEditOptionSegment:1\r\n        })\r\n    }\r\n    addOpenOptionsText  = async (event) =>  {\r\n        event.preventDefault();\r\n        this.setState({\r\n            openCreateOptionKeyWord:0,\r\n            openCreateOptionStaticText:1,\r\n            openCreateOptionSegment:0\r\n        })\r\n    }\r\n    editOpenOptionsText  = async (event) =>  {\r\n        event.preventDefault();\r\n        this.setState({\r\n            openEditOptionKeyWord:0,\r\n            openEditOptionStaticText:1,\r\n            openEditOptionSegment:0\r\n        })\r\n    }\r\n    addOpenOptionsKeyword  = async (event) =>  {\r\n        event.preventDefault();\r\n        this.setState({\r\n            openCreateOptionKeyWord:1,\r\n            openCreateOptionStaticText:0,\r\n            openCreateOptionSegment:0\r\n        })\r\n    }\r\n    editOpenOptionsKeyword  = async (event) =>  {\r\n        event.preventDefault();\r\n        this.setState({\r\n            openEditOptionKeyWord:1,\r\n            openEditOptionStaticText:0,\r\n            openEditOptionSegment:0\r\n        })\r\n    }\r\n    insertBlockIntoTempStore    =   async (type,OptId,OptText,event)=>{\r\n\r\n        event.preventDefault();\r\n        let OldTemporaryBlockStorage =this.state.TemporaryBlockStorage;  \r\n        if(type  == 1){\r\n            let eachBlockSegmet ={\r\n                type:\"id\",\r\n                value:OptId,\r\n                contents:\"[\"+OptText+\"]\"\r\n\r\n            }\r\n            OldTemporaryBlockStorage.push(eachBlockSegmet);\r\n            this.setState({\r\n                TemporaryBlockStorage:OldTemporaryBlockStorage,\r\n                openCreateOption:0,\r\n                openCreateOptionKeyWord:0,\r\n                openCreateOptionStaticText:0,\r\n                openCreateOptionSegment:0,\r\n                showAddButton:1\r\n            })\r\n        }else if(type  == 2){\r\n            let eachBlockText ={\r\n                type:\"text\",\r\n                value:OptText,\r\n                contents:OptText\r\n\r\n            }\r\n            OldTemporaryBlockStorage.push(eachBlockText);\r\n            this.setState({\r\n\r\n                TemporaryBlockStorage:OldTemporaryBlockStorage,\r\n                openCreateOption:0,\r\n                openCreateOptionKeyWord:0,\r\n                openCreateOptionStaticText:0,\r\n                openCreateOptionSegment:0,\r\n                default_message_text_add:\"\",\r\n                showAddButton:1\r\n            })\r\n        }else{\r\n            let eachBlockText ={\r\n                type:\"text\",\r\n                value:OptText,\r\n                contents:OptText\r\n\r\n            }\r\n            OldTemporaryBlockStorage.push(eachBlockText);\r\n            this.setState({\r\n\r\n                TemporaryBlockStorage:OldTemporaryBlockStorage,\r\n                openCreateOption:0,\r\n                openCreateOptionKeyWord:0,\r\n                openCreateOptionStaticText:0,\r\n                openCreateOptionSegment:0,\r\n                showAddButton:1\r\n            })\r\n        }\r\n        console.log(\"Tis is the set\",this.state.TemporaryBlockStorage);\r\n        \r\n    }\r\n    insertBlockIntoTempStoreEdit    =   async (type,OptId,OptText,event)=>{\r\n\r\n        event.preventDefault();\r\n        let OldTemporaryBlockStorageEdit =this.state.TemporaryBlockStorageEdit;  \r\n        if(type  == 1){\r\n            let eachBlockSegmetEdit ={\r\n                type:\"id\",\r\n                value:OptId,\r\n                contents:\"[\"+OptText+\"]\"\r\n\r\n            }\r\n            OldTemporaryBlockStorageEdit.push(eachBlockSegmetEdit);\r\n            this.setState({\r\n                TemporaryBlockStorageEdit:OldTemporaryBlockStorageEdit,\r\n                openEditOption:0,\r\n                openEditOptionKeyWord:0,\r\n                openEditOptionStaticText:0,\r\n                openEditOptionSegment:0,\r\n                showEditButton:1\r\n            })\r\n        }else if(type  == 2){\r\n            let eachBlockTextEdit ={\r\n                type:\"text\",\r\n                value:OptText,\r\n                contents:OptText\r\n\r\n            }\r\n            OldTemporaryBlockStorageEdit.push(eachBlockTextEdit);\r\n            this.setState({\r\n\r\n                TemporaryBlockStorageEdit:OldTemporaryBlockStorageEdit,\r\n                openEditOption:0,\r\n                openEditOptionKeyWord:0,\r\n                openEditOptionStaticText:0,\r\n                openEditOptionSegment:0,\r\n                default_message_text_edit:\"\",\r\n                showEditButton:1\r\n            })\r\n        }else{\r\n            let eachBlockTextEdit ={\r\n                type:\"text\",\r\n                value:OptText,\r\n                contents:OptText\r\n\r\n            }\r\n            OldTemporaryBlockStorageEdit.push(eachBlockTextEdit);\r\n            this.setState({\r\n\r\n                TemporaryBlockStorageEdit:OldTemporaryBlockStorageEdit,\r\n                openEditOption:0,\r\n                openEditOptionKeyWord:0,\r\n                openEditOptionStaticText:0,\r\n                openEditOptionSegment:0,\r\n                showEditButton:1\r\n            })\r\n        }\r\n        console.log(\"Tis is the set\",this.state.TemporaryBlockStorageEdit);\r\n        \r\n    }\r\n    inputChangeHandller = (event) => {\r\n        this.setState({ [event.target.name]: event.target.value })\r\n    }\r\n    RemoveMessageBlockAdd(block_index,event){\r\n        event.preventDefault();\r\n        console.log(\"this is the Index\",block_index);\r\n        let  TemporaryBlockStorage= this.state.TemporaryBlockStorage;\r\n        TemporaryBlockStorage.splice(block_index, 1);\r\n        this.setState({TemporaryBlockStorage:TemporaryBlockStorage});\r\n\r\n    }\r\n    RemoveMessageBlockEdit(block_index,event){\r\n        event.preventDefault();\r\n        console.log(\"this is the Index\",block_index);\r\n        let  TemporaryBlockStorageEdit= this.state.TemporaryBlockStorageEdit;\r\n        TemporaryBlockStorageEdit.splice(block_index, 1);\r\n        this.setState({TemporaryBlockStorageEdit:TemporaryBlockStorageEdit});\r\n\r\n    }\r\n    storeInMessageBlock = async   (event) =>  {\r\n        event.preventDefault();\r\n        let OldBlockStorage   =   this.state.BlockStorage;\r\n        OldBlockStorage.push(this.state.TemporaryBlockStorage);\r\n\r\n        this.setState({\r\n            BlockStorage:OldBlockStorage,\r\n            TemporaryBlockStorage:[],\r\n            showAddButton:0\r\n        });\r\n        console.log(\"This are the Message Blocks\",this.state.BlockStorage)\r\n    }\r\n    storeInMessageBlockEdit = async   (event) =>  {\r\n        event.preventDefault();\r\n        let OldBlockStorage   =   this.state.BlockStorageEdit;\r\n        OldBlockStorage.push(this.state.TemporaryBlockStorageEdit);\r\n\r\n        this.setState({\r\n            BlockStorageEdit:OldBlockStorage,\r\n            TemporaryBlockStorageEdit:[],\r\n            showEditButton:0\r\n        });\r\n        console.log(\"This are the Message Blocks\",this.state.BlockStorageEdit)\r\n    }\r\n    RemoveMessageSegmentsBlockAdd(block_index,event){\r\n        event.preventDefault();\r\n        console.log(\"this is the Index\",block_index);\r\n        let  presentSegmentBlock= this.state.BlockStorage;\r\n        presentSegmentBlock.splice(block_index, 1);\r\n        this.setState({BlockStorage:presentSegmentBlock});\r\n\r\n    }\r\n    RemoveMessageSegmentsBlockEdit(block_index,event){\r\n        event.preventDefault();\r\n        console.log(\"this is the Index\",block_index);\r\n        let  presentSegmentBlock= this.state.BlockStorageEdit;\r\n        presentSegmentBlock.splice(block_index, 1);\r\n        this.setState({BlockStorageEdit:presentSegmentBlock});\r\n\r\n    }\r\n    submitAddGroup = async  (event) =>{\r\n        this.setState({loader:true});\r\n        event.preventDefault();\r\n        let payload =   {\r\n            BlockStorage:this.state.BlockStorage,\r\n            group_name:this.state.group_name,\r\n            user_id:localStorage.getItem(\"user_id\")\r\n        }\r\n        console.log(\"This I have to save in DB as Group\",payload);\r\n        GroupServices.createGroup(payload).then(result=>{\r\n            if(result.data.code == 1){\r\n                this.setState({\r\n                    message_Group_List:result.data.payload,\r\n                    groupList:1,\r\n                    groupCreate:0,\r\n                    groupEdit:0,\r\n                    openCreateOption:0,\r\n                    openCreateOptionKeyWord:0,\r\n                    openCreateOptionStaticText:0,\r\n                    openCreateOptionSegment:0,\r\n                    loader:false\r\n                })\r\n                //console.log(\"This I got From DDDDBBBBBB EROOOOOO GGGGG\",this.state.message_Group_List);\r\n            }\r\n            //console.log(\"this is more SUUUUUUCCEEEEESSSS\",result);\r\n        }).catch(error=>{\r\n            console.log(\"this is more ERRRRROOOOOORRRRRR\",error);\r\n        })\r\n    }\r\n    submitEditGroup = async  (event) =>{\r\n        this.setState({loader:true});\r\n        event.preventDefault();\r\n        let payload =   {\r\n            BlockStorage:this.state.BlockStorageEdit,\r\n            group_name_edit:this.state.group_name_edit,\r\n            user_id:localStorage.getItem(\"user_id\"),\r\n            group_id_edit:this.state.group_id_edit\r\n        }\r\n        console.log(\"This I have to save in DB as Group\",payload);\r\n        GroupServices.UpdateGroup(payload).then(result=>{\r\n            if(result.data.code == 1){\r\n                console.log(result.data.payload);\r\n                this.setState({\r\n                    message_Group_List:result.data.payload,\r\n                    loader:false,\r\n                    groupList:1,\r\n                    groupCreate:0,\r\n                    groupEdit:0,\r\n                    openEditOption:0,\r\n                    openEditOptionKeyWord:0,\r\n                    openEditOptionStaticText:0,\r\n                    openEditOptionSegment:0\r\n                })\r\n                \r\n            }\r\n            //console.log(\"this is more SUUUUUUCCEEEEESSSS\",result);\r\n        }).catch(error=>{\r\n            console.log(\"this is more ERRRRROOOOOORRRRRR\",error);\r\n            this.setState({\r\n                loader:false,\r\n                groupList:1,\r\n                groupCreate:0,\r\n                groupEdit:0,\r\n                openEditOption:0,\r\n                openEditOptionKeyWord:0,\r\n                openEditOptionStaticText:0,\r\n                openEditOptionSegment:0\r\n            })\r\n        })\r\n    }\r\n    editMessageGroup(group_id,event){\r\n        this.setState({loader:true})\r\n        event.preventDefault();\r\n        let  params ={\r\n            group_id    :   group_id\r\n        };\r\n        GroupServices.editGroup(params).then(result  =>{\r\n            console.log(result);\r\n            if(result.data.code == 1){\r\n                this.setState({\r\n                    group_name_edit:result.data.payload.title,\r\n                    BlockStorageEdit:result.data.payload.associate_blocks,\r\n                    group_id_edit:result.data.payload._id,\r\n                    loader:false,\r\n                    groupList:0,\r\n                    groupCreate:0,\r\n                    groupEdit:1,\r\n                })\r\n          }\r\n        })\r\n    }\r\n    componentDidMount(){\r\n        this.setState({loader:true})\r\n        let  params ={\r\n            user_id    :   localStorage.getItem('user_id')\r\n        };\r\n        SegmentServices.getSegment(params).then(result=>{        \r\n            if(result.data.code == 1){\r\n                this.setState({\r\n                    DefaultSegments:result.data.payload\r\n                })\r\n            }\r\n        }).catch(error=>{\r\n          console.log(\"This I got From DDDDBBBBBB EROOOOOO\",error);\r\n        })\r\n        GroupServices.getGroup(params).then(result=>{\r\n            if(result.data.code == 1){\r\n                this.setState({\r\n                    message_Group_List:result.data.payload,\r\n                    loader:false\r\n                })\r\n                console.log(\"This I got From DDDDBBBBBB EROOOOOO GGGGG\",this.state.message_Group_List);\r\n            }\r\n        }).catch(error=>{\r\n            this.setState({\r\n               loader:false\r\n            })\r\n          console.log(\"This I got From DDDDBBBBBB EROOOOOO\",error);\r\n        })\r\n        //message_Group_List\r\n\r\n    }\r\n      render() {\r\n        return (\r\n        <div>\r\n            {this.state.groupList ?\r\n            <div className=\"subtabcontent\">\r\n                {this.state.loader && (   \r\n                                <div className=\"after_login_refresh\"><img src={LoaderLogo} alt=\"\"/></div>\r\n                )}\r\n                { this.state.message_Group_List.length != 0 \r\n                ?\r\n                <div>\r\n                    <div className=\"headding\">\r\n                        <span>Message Group</span> <a href=\"\" onClick={this.addGroupHandler} className=\"createbtn\"><img src={plusLogo}/> Create New</a>\r\n                    </div>\r\n                    <div className=\"segmentlists\">\r\n                    {this.state.message_Group_List && this.state.message_Group_List.map((data, index) =>\r\n                        <div className=\"segmentlist\">\r\n                            <span className=\"txt\">{data.title}</span>\r\n                            <div className=\"action\">\r\n                            <a href=\"#\" onClick={(event) => this.editMessageGroup(data._id,event)} ><img src={editLogo} alt=\"\"/></a>\r\n                            </div>\r\n                        </div>\r\n                    )}\r\n                    </div>\r\n                </div>\r\n                :\r\n                <div className=\"list_no_record\">\r\n                    <img src=\"images/empty_file.svg\" alt=\"\"/>\r\n                    <p>You haven’t created any Message Group yet.</p>\r\n                    <a onClick={this.addGroupHandler} className=\"createbtn\"><img src={plusLogo} alt=\"\"/> Create New</a>\r\n                </div>\r\n                }\r\n            </div>\r\n            :\r\n            \"\"\r\n            }\r\n            {this.state.groupCreate ?\r\n            <div className=\"subtabcontent\">\r\n                {this.state.loader && (   \r\n                                <div className=\"after_login_refresh\"><img src={LoaderLogo} alt=\"\"/></div>\r\n                )}\r\n                <div class=\"headding gap1\">\r\n                    <span class=\"big\">Create a Message Group</span> \r\n                    <a  onClick={this.listGroupHandler} href=\"#\" className=\"roundarrow\"><img src={backArrowLogo}/></a>\r\n                </div>\r\n                <form>\r\n                    <label>Title</label>\r\n                        <input type=\"text\" name=\"group_name\" value={this.state.group_name} onChange={this.inputChangeHandller}  placeholder=\"Enter your message group title\" className=\"otherstyle\" />\r\n                    <label>Build message set</label>\r\n                    {this.state.BlockStorage && this.state.BlockStorage.map((data, index) =>\r\n                                    <span className=\"selectedBlock\">{ data.map((newdata) =>\r\n                                        newdata.contents\r\n                                    )}<a href=\"#\" onClick={(event) => this.RemoveMessageSegmentsBlockAdd(index,event)} className=\"cross\">X</a></span>\r\n                    )}\r\n                    <div class=\"insert_msg\">\r\n                        {this.state.TemporaryBlockStorage && this.state.TemporaryBlockStorage.map((data, index) =>\r\n\r\n                        <div class=\"addedinsert\">{data.contents}<a href=\"#\"   onClick={(event) => this.RemoveMessageBlockAdd(index,event)} ><img   src={blackCrossLogo}/></a> </div>\r\n                        \r\n                        )}\r\n                        \r\n                        <div class=\"insert\">\r\n                            <a href=\"\" onClick={this.addOpenOptions} ><span ><img src={smallPlusLogo}/></span> Insert {this.state.TemporaryBlockStorage.length > 0 ?\" Another\" : \"\"  }</a>\r\n                            {this.state.openCreateOption ? \r\n                                <div class=\"insertdropdown\">\r\n                                    <ul>\r\n                                        <li><a onClick={this.addOpenOptionsSegment} href=\"#\">Message Segment</a>\r\n                                        {this.state.openCreateOptionSegment ?\r\n                                            <div  class=\"insertdropdown inserone\">\r\n                                                <ul>\r\n                                                    {this.state.DefaultSegments && this.state.DefaultSegments.map((data, index) =>\r\n                                                        <li><a onClick={(event) => this.insertBlockIntoTempStore(1,data._id,data.title,event)}  href=\"#\">{data.title}</a></li>                                                \r\n                                                    )}\r\n                                                </ul>\r\n                                            </div>\r\n                                        :\r\n                                        \"\"\r\n                                        }\r\n                                        </li>                                  \r\n                                        <li><a onClick={this.addOpenOptionsText} href=\"#\">Static Text</a>\r\n                                            {this.state.openCreateOptionStaticText ?\r\n                                                <div class=\"insertdropdown insertwo\">\r\n                                                    <label>Title</label>\r\n                                                    <textarea name=\"default_message_text_add\" value={this.state.default_message_text_add} onChange={this.inputChangeHandller} id=\"default_message_text_add\" className=\"withtag otherstyle\" placeholder=\"Please Provide Your Static Text\"></textarea>\r\n                                                    <button  onClick={(event) => this.insertBlockIntoTempStore(2,\"\",this.state.default_message_text_add,event)} class=\"blue_btn\" type=\"submit\">Done</button> \r\n                                                </div>\r\n                                            :\r\n                                            \"\"\r\n                                            }\r\n                                        </li>\r\n                                        <li><a onClick={this.addOpenOptionsKeyword} href=\"#\">Keywords</a>\r\n                                        {this.state.openCreateOptionKeyWord ?\r\n                                            <div class=\"insertdropdown inserthree\">\r\n                                                <ul>\r\n                                                    <li><a onClick={(event) => this.insertBlockIntoTempStore(3,\"\",\"{user_name}\",event)} href=\"#\">[ User Name ]</a></li>\r\n                                                    <li><a onClick={(event) => this.insertBlockIntoTempStore(3,\"\",\"{date}\",event)} href=\"#\">[ Todays Date ]</a></li>\r\n                                                </ul>\r\n                                            </div>\r\n                                        :\r\n                                        \"\"\r\n                                        }\r\n                                        </li>\r\n                                    </ul>\r\n                                </div>\r\n                            : \r\n                            \"\"\r\n                            }    \r\n                        </div>\r\n                        {this.state.showAddButton\r\n                            ?\r\n                                <a href=\"#\" onClick={this.storeInMessageBlock} className=\"add\">Add</a>\r\n                            :\r\n                                \"\"\r\n                        }\r\n                    </div>\r\n                    <button onClick={this.submitAddGroup} class=\"blue_btn\" type=\"submit\">Save Message Group</button>\r\n                </form>\r\n            </div>\r\n            :\r\n            \"\"\r\n            }\r\n            {this.state.groupEdit ?\r\n                <div className=\"subtabcontent\">\r\n                    {this.state.loader && (   \r\n                                <div className=\"after_login_refresh\"><img src={LoaderLogo} alt=\"\"/></div>\r\n                    )}\r\n                    <div class=\"headding gap1\">\r\n                        <span class=\"big\">Edit a Message Group</span>\r\n                        <a  onClick={this.listGroupHandler} href=\"#\" className=\"roundarrow\"><img src={backArrowLogo}/></a>\r\n                    </div>\r\n                    <form>\r\n                        <label>Title</label>\r\n                        <input type=\"text\" name=\"group_name_edit\" value={this.state.group_name_edit} onChange={this.inputChangeHandller}  placeholder=\"Enter your message group title\" className=\"otherstyle\" />\r\n                        <label>Build message set</label>\r\n                        {this.state.BlockStorageEdit && this.state.BlockStorageEdit.map((data, index) =>\r\n                                    <span className=\"selectedBlock\">{ data.map((newdata) =>\r\n                                        newdata.contents\r\n                                    )}<a href=\"#\" onClick={(event) => this.RemoveMessageSegmentsBlockEdit(index,event)} className=\"cross\">X</a></span>\r\n                        )}\r\n                        <div class=\"insert_msg\">\r\n                        {this.state.TemporaryBlockStorageEdit && this.state.TemporaryBlockStorageEdit.map((data, index) =>\r\n\r\n                            <div class=\"addedinsert\">{data.contents}<a href=\"#\"   onClick={(event) => this.RemoveMessageBlockEdit(index,event)} ><img   src={blackCrossLogo}/></a> </div>\r\n\r\n                        )}\r\n                            <div class=\"insert\">\r\n                                <a href=\"\" onClick={this.editOpenOptions} ><span ><img src={smallPlusLogo}/></span> Insert {this.state.TemporaryBlockStorageEdit.length > 0 ?\" Another\" : \"\"  }</a>\r\n                                {this.state.openEditOption \r\n                                ?\r\n                                <div class=\"insertdropdown\">\r\n                                    <ul>\r\n                                        <li><a onClick={this.editOpenOptionsSegment} href=\"#\">Message Segment</a>\r\n                                        {this.state.openEditOptionSegment ?\r\n                                            <div  class=\"insertdropdown inserone\">\r\n                                                <ul>\r\n                                                    {this.state.DefaultSegments && this.state.DefaultSegments.map((data, index) =>\r\n                                                        <li><a onClick={(event) => this.insertBlockIntoTempStoreEdit(1,data._id,data.title,event)}  href=\"#\">{data.title}</a></li>                                                \r\n                                                    )}\r\n                                                </ul>\r\n                                            </div>\r\n                                        :\r\n                                        \"\"\r\n                                        }\r\n                                        </li>                                  \r\n                                        <li><a onClick={this.editOpenOptionsText} href=\"#\">Static Text</a>\r\n                                            {this.state.openEditOptionStaticText ?\r\n                                                <div class=\"insertdropdown insertwo\">\r\n                                                    <label>Title</label>\r\n                                                    <textarea name=\"default_message_text_edit\" value={this.state.default_message_text_edit} onChange={this.inputChangeHandller} id=\"default_message_text_edit\" className=\"withtag otherstyle\" placeholder=\"Please Provide Your Static Text\"></textarea>\r\n                                                    <button  onClick={(event) => this.insertBlockIntoTempStoreEdit(2,\"\",this.state.default_message_text_edit,event)} class=\"blue_btn\" type=\"submit\">Done</button> \r\n                                                </div>\r\n                                            :\r\n                                            \"\"\r\n                                            }\r\n                                        </li>\r\n                                        <li><a onClick={this.editOpenOptionsKeyword} href=\"#\">Keywords</a>\r\n                                        {this.state.openEditOptionKeyWord ?\r\n                                            <div class=\"insertdropdown inserthree\">\r\n                                                <ul>\r\n                                                    <li><a onClick={(event) => this.insertBlockIntoTempStoreEdit(3,\"\",\"{user_name}\",event)} href=\"#\">[ User Name ]</a></li>\r\n                                                    <li><a onClick={(event) => this.insertBlockIntoTempStoreEdit(3,\"\",\"{date}\",event)} href=\"#\">[ Todays Date ]</a></li>\r\n                                                </ul>\r\n                                            </div>\r\n                                        :\r\n                                        \"\"\r\n                                        }\r\n                                        </li>\r\n                                    </ul>\r\n                                </div>\r\n                                :\r\n                                \"\"\r\n                                }\r\n                            </div>\r\n                            {this.state.showEditButton\r\n                            ?\r\n                                <a href=\"#\" onClick={this.storeInMessageBlockEdit} className=\"add\">Add</a>\r\n                            :\r\n                                \"\"\r\n                            }\r\n                        </div>\r\n                        <button onClick={this.submitEditGroup} class=\"blue_btn\" type=\"submit\">Update Message Group</button>\r\n                    </form>\r\n                </div>\r\n            :\r\n            \"\"\r\n            }\r\n\r\n        </div>\r\n        )\r\n      }\r\n}\r\nexport default  group;","C:\\GrammyWammy\\front-end\\src\\services\\segmentServices.js",["409"],"import axios from 'axios';\r\nimport { host,kyubi } from '../config';\r\n\r\nconst segmentServices = {\r\n    createSegment: function (payload) {\r\n        return new Promise((resolve, reject) => {\r\n            let options = {\r\n                method: 'POST',\r\n                url: host + '/api/segment/create',\r\n                headers: {  'Accept': 'application/json', 'Content-Type': 'application/json' },\r\n                data: payload\r\n            }\r\n            axios(options)\r\n                .then(res => {\r\n                    console.log(\"In Success\");\r\n                    resolve(res)\r\n                })\r\n                .catch(err => {\r\n                    console.log(\"In Error\");\r\n                    reject(err)\r\n                })\r\n        })\r\n    },\r\n    getSegment: function (payload) {\r\n        return new Promise((resolve, reject) => {\r\n            let options = {\r\n                method: 'POST',\r\n                url: host + '/api/segment/list',\r\n                headers: {  'Accept': 'application/json', 'Content-Type': 'application/json' },\r\n                data: payload\r\n            }\r\n            axios(options)\r\n                .then(res => {\r\n                    console.log(\"In Success\");\r\n                    resolve(res)\r\n                })\r\n                .catch(err => {\r\n                    console.log(\"In Error\");\r\n                    reject(err)\r\n                })\r\n        })\r\n    },\r\n    editSegment: function (payload) {\r\n        return new Promise((resolve, reject) => {\r\n            let options = {\r\n                method: 'POST',\r\n                url: host + '/api/segment/edit',\r\n                headers: {  'Accept': 'application/json', 'Content-Type': 'application/json' },\r\n                data: payload\r\n            }\r\n            axios(options)\r\n                .then(res => {\r\n                    console.log(\"In Success\");\r\n                    resolve(res)\r\n                })\r\n                .catch(err => {\r\n                    console.log(\"In Error\");\r\n                    reject(err)\r\n                })\r\n        })\r\n    },\r\n    UpdateSegment: function (payload) {\r\n        return new Promise((resolve, reject) => {\r\n            let options = {\r\n                method: 'POST',\r\n                url: host + '/api/segment/update',\r\n                headers: {  'Accept': 'application/json', 'Content-Type': 'application/json' },\r\n                data: payload\r\n            }\r\n            axios(options)\r\n                .then(res => {\r\n                    console.log(\"In Success\");\r\n                    resolve(res)\r\n                })\r\n                .catch(err => {\r\n                    console.log(\"In Error\");\r\n                    reject(err)\r\n                })\r\n        })\r\n    },\r\n}\r\nexport default segmentServices;","C:\\GrammyWammy\\front-end\\src\\services\\groupServices.js",["410"],"import axios from 'axios';\r\nimport { host,kyubi } from '../config';\r\n\r\nconst groupServices = {\r\n    createGroup: function (payload) {\r\n        return new Promise((resolve, reject) => {\r\n            let options = {\r\n                method: 'POST',\r\n                url: host + '/api/group/create',\r\n                headers: {  'Accept': 'application/json', 'Content-Type': 'application/json' },\r\n                data: payload\r\n            }\r\n            axios(options)\r\n                .then(res => {\r\n                    console.log(\"In Success\");\r\n                    resolve(res)\r\n                })\r\n                .catch(err => {\r\n                    console.log(\"In Error\");\r\n                    reject(err)\r\n                })\r\n        })\r\n    },\r\n    getGroup: function (payload) {\r\n        return new Promise((resolve, reject) => {\r\n            let options = {\r\n                method: 'POST',\r\n                url: host + '/api/group/list',\r\n                headers: {  'Accept': 'application/json', 'Content-Type': 'application/json' },\r\n                data: payload\r\n            }\r\n            axios(options)\r\n                .then(res => {\r\n                    console.log(\"In Success\");\r\n                    resolve(res)\r\n                })\r\n                .catch(err => {\r\n                    console.log(\"In Error\");\r\n                    reject(err)\r\n                })\r\n        })\r\n    },\r\n    editGroup: function (payload) {\r\n        return new Promise((resolve, reject) => {\r\n            let options = {\r\n                method: 'POST',\r\n                url: host + '/api/group/edit',\r\n                headers: {  'Accept': 'application/json', 'Content-Type': 'application/json' },\r\n                data: payload\r\n            }\r\n            axios(options)\r\n                .then(res => {\r\n                    console.log(\"In Success\");\r\n                    resolve(res)\r\n                })\r\n                .catch(err => {\r\n                    console.log(\"In Error\");\r\n                    reject(err)\r\n                })\r\n        })\r\n    },\r\n    UpdateGroup: function (payload) {\r\n        return new Promise((resolve, reject) => {\r\n            let options = {\r\n                method: 'POST',\r\n                url: host + '/api/group/update',\r\n                headers: {  'Accept': 'application/json', 'Content-Type': 'application/json' },\r\n                data: payload\r\n            }\r\n            axios(options)\r\n                .then(res => {\r\n                    console.log(\"In Success\");\r\n                    resolve(res)\r\n                })\r\n                .catch(err => {\r\n                    console.log(\"In Error\");\r\n                    reject(err)\r\n                })\r\n        })\r\n    },\r\n}\r\nexport default groupServices;",{"ruleId":"411","replacedBy":"412"},{"ruleId":"413","replacedBy":"414"},{"ruleId":"415","severity":1,"message":"416","line":11,"column":7,"nodeType":"417","messageId":"418","endLine":11,"endColumn":15},{"ruleId":"415","severity":1,"message":"419","line":2,"column":10,"nodeType":"417","messageId":"418","endLine":2,"endColumn":18},{"ruleId":"415","severity":1,"message":"420","line":2,"column":20,"nodeType":"417","messageId":"418","endLine":2,"endColumn":30},{"ruleId":"415","severity":1,"message":"421","line":12,"column":8,"nodeType":"417","messageId":"418","endLine":12,"endColumn":15},{"ruleId":"415","severity":1,"message":"422","line":16,"column":8,"nodeType":"417","messageId":"418","endLine":16,"endColumn":17},{"ruleId":"423","severity":1,"message":"424","line":66,"column":36,"nodeType":"425","messageId":"426","endLine":66,"endColumn":37,"suggestions":"427"},{"ruleId":"423","severity":1,"message":"424","line":66,"column":61,"nodeType":"425","messageId":"426","endLine":66,"endColumn":62,"suggestions":"428"},{"ruleId":"429","severity":1,"message":"430","line":86,"column":9,"nodeType":"431","messageId":"432","endLine":86,"endColumn":28},{"ruleId":"415","severity":1,"message":"433","line":97,"column":13,"nodeType":"417","messageId":"418","endLine":97,"endColumn":20},{"ruleId":"415","severity":1,"message":"434","line":118,"column":25,"nodeType":"417","messageId":"418","endLine":118,"endColumn":27},{"ruleId":"435","severity":1,"message":"436","line":148,"column":19,"nodeType":"437","messageId":"438","endLine":148,"endColumn":21},{"ruleId":"435","severity":1,"message":"436","line":151,"column":19,"nodeType":"437","messageId":"438","endLine":151,"endColumn":21},{"ruleId":"435","severity":1,"message":"436","line":154,"column":19,"nodeType":"437","messageId":"438","endLine":154,"endColumn":21},{"ruleId":"435","severity":1,"message":"436","line":157,"column":19,"nodeType":"437","messageId":"438","endLine":157,"endColumn":21},{"ruleId":"435","severity":1,"message":"436","line":160,"column":19,"nodeType":"437","messageId":"438","endLine":160,"endColumn":21},{"ruleId":"415","severity":1,"message":"439","line":170,"column":13,"nodeType":"417","messageId":"418","endLine":170,"endColumn":33},{"ruleId":"440","severity":1,"message":"441","line":201,"column":39,"nodeType":"442","endLine":201,"endColumn":57},{"ruleId":"440","severity":1,"message":"441","line":210,"column":43,"nodeType":"442","endLine":210,"endColumn":60},{"ruleId":"440","severity":1,"message":"441","line":220,"column":43,"nodeType":"442","endLine":220,"endColumn":61},{"ruleId":"443","severity":1,"message":"444","line":236,"column":60,"nodeType":"442","endLine":236,"endColumn":130},{"ruleId":"443","severity":1,"message":"444","line":245,"column":39,"nodeType":"442","endLine":245,"endColumn":106},{"ruleId":"443","severity":1,"message":"444","line":245,"column":130,"nodeType":"442","endLine":245,"endColumn":200},{"ruleId":"443","severity":1,"message":"444","line":246,"column":25,"nodeType":"442","endLine":246,"endColumn":94},{"ruleId":"440","severity":1,"message":"441","line":246,"column":94,"nodeType":"442","endLine":246,"endColumn":111},{"ruleId":"443","severity":1,"message":"444","line":246,"column":116,"nodeType":"442","endLine":246,"endColumn":184},{"ruleId":"440","severity":1,"message":"441","line":246,"column":184,"nodeType":"442","endLine":246,"endColumn":206},{"ruleId":"415","severity":1,"message":"419","line":2,"column":10,"nodeType":"417","messageId":"418","endLine":2,"endColumn":18},{"ruleId":"415","severity":1,"message":"420","line":2,"column":20,"nodeType":"417","messageId":"418","endLine":2,"endColumn":30},{"ruleId":"415","severity":1,"message":"445","line":4,"column":9,"nodeType":"417","messageId":"418","endLine":4,"endColumn":25},{"ruleId":"415","severity":1,"message":"446","line":17,"column":13,"nodeType":"417","messageId":"418","endLine":17,"endColumn":15},{"ruleId":"415","severity":1,"message":"447","line":2,"column":10,"nodeType":"417","messageId":"418","endLine":2,"endColumn":17},{"ruleId":"443","severity":1,"message":"444","line":42,"column":25,"nodeType":"442","endLine":42,"endColumn":141},{"ruleId":"443","severity":1,"message":"444","line":43,"column":25,"nodeType":"442","endLine":43,"endColumn":138},{"ruleId":"415","severity":1,"message":"447","line":2,"column":10,"nodeType":"417","messageId":"418","endLine":2,"endColumn":17},{"ruleId":"415","severity":1,"message":"448","line":5,"column":8,"nodeType":"417","messageId":"418","endLine":5,"endColumn":16},{"ruleId":"449","severity":1,"message":"450","line":139,"column":41,"nodeType":"451","endLine":139,"endColumn":82},{"ruleId":"415","severity":1,"message":"419","line":2,"column":10,"nodeType":"417","messageId":"418","endLine":2,"endColumn":18},{"ruleId":"415","severity":1,"message":"420","line":2,"column":20,"nodeType":"417","messageId":"418","endLine":2,"endColumn":30},{"ruleId":"415","severity":1,"message":"447","line":2,"column":10,"nodeType":"417","messageId":"418","endLine":2,"endColumn":17},{"ruleId":"415","severity":1,"message":"448","line":5,"column":8,"nodeType":"417","messageId":"418","endLine":5,"endColumn":16},{"ruleId":"449","severity":1,"message":"450","line":164,"column":41,"nodeType":"451","endLine":164,"endColumn":82},{"ruleId":"415","severity":1,"message":"419","line":3,"column":10,"nodeType":"417","messageId":"418","endLine":3,"endColumn":18},{"ruleId":"415","severity":1,"message":"420","line":3,"column":20,"nodeType":"417","messageId":"418","endLine":3,"endColumn":30},{"ruleId":"415","severity":1,"message":"452","line":4,"column":28,"nodeType":"417","messageId":"418","endLine":4,"endColumn":54},{"ruleId":"415","severity":1,"message":"453","line":7,"column":8,"nodeType":"417","messageId":"418","endLine":7,"endColumn":22},{"ruleId":"415","severity":1,"message":"421","line":9,"column":8,"nodeType":"417","messageId":"418","endLine":9,"endColumn":15},{"ruleId":"435","severity":1,"message":"436","line":74,"column":28,"nodeType":"437","messageId":"438","endLine":74,"endColumn":30},{"ruleId":"435","severity":1,"message":"436","line":141,"column":56,"nodeType":"437","messageId":"438","endLine":141,"endColumn":58},{"ruleId":"443","severity":1,"message":"444","line":150,"column":17,"nodeType":"442","endLine":150,"endColumn":80},{"ruleId":"443","severity":1,"message":"444","line":151,"column":17,"nodeType":"442","endLine":151,"endColumn":76},{"ruleId":"415","severity":1,"message":"419","line":2,"column":10,"nodeType":"417","messageId":"418","endLine":2,"endColumn":18},{"ruleId":"415","severity":1,"message":"420","line":2,"column":20,"nodeType":"417","messageId":"418","endLine":2,"endColumn":30},{"ruleId":"415","severity":1,"message":"454","line":7,"column":8,"nodeType":"417","messageId":"418","endLine":7,"endColumn":19},{"ruleId":"435","severity":1,"message":"436","line":54,"column":23,"nodeType":"437","messageId":"438","endLine":54,"endColumn":25},{"ruleId":"435","severity":1,"message":"436","line":57,"column":23,"nodeType":"437","messageId":"438","endLine":57,"endColumn":25},{"ruleId":"435","severity":1,"message":"436","line":60,"column":23,"nodeType":"437","messageId":"438","endLine":60,"endColumn":25},{"ruleId":"435","severity":1,"message":"436","line":63,"column":23,"nodeType":"437","messageId":"438","endLine":63,"endColumn":25},{"ruleId":"435","severity":1,"message":"436","line":66,"column":23,"nodeType":"437","messageId":"438","endLine":66,"endColumn":25},{"ruleId":"423","severity":1,"message":"424","line":85,"column":36,"nodeType":"425","messageId":"426","endLine":85,"endColumn":37,"suggestions":"455"},{"ruleId":"423","severity":1,"message":"424","line":85,"column":61,"nodeType":"425","messageId":"426","endLine":85,"endColumn":62,"suggestions":"456"},{"ruleId":"429","severity":1,"message":"430","line":101,"column":9,"nodeType":"431","messageId":"432","endLine":101,"endColumn":28},{"ruleId":"415","severity":1,"message":"433","line":112,"column":13,"nodeType":"417","messageId":"418","endLine":112,"endColumn":20},{"ruleId":"440","severity":1,"message":"441","line":186,"column":35,"nodeType":"442","endLine":186,"endColumn":53},{"ruleId":"440","severity":1,"message":"441","line":195,"column":39,"nodeType":"442","endLine":195,"endColumn":56},{"ruleId":"443","severity":1,"message":"444","line":212,"column":56,"nodeType":"442","endLine":212,"endColumn":68},{"ruleId":"443","severity":1,"message":"444","line":223,"column":35,"nodeType":"442","endLine":223,"endColumn":102},{"ruleId":"443","severity":1,"message":"444","line":223,"column":126,"nodeType":"442","endLine":223,"endColumn":196},{"ruleId":"443","severity":1,"message":"444","line":224,"column":21,"nodeType":"442","endLine":224,"endColumn":90},{"ruleId":"440","severity":1,"message":"441","line":224,"column":90,"nodeType":"442","endLine":224,"endColumn":107},{"ruleId":"443","severity":1,"message":"444","line":224,"column":112,"nodeType":"442","endLine":224,"endColumn":180},{"ruleId":"440","severity":1,"message":"441","line":224,"column":180,"nodeType":"442","endLine":224,"endColumn":202},{"ruleId":"435","severity":1,"message":"457","line":22,"column":36,"nodeType":"437","messageId":"438","endLine":22,"endColumn":38},{"ruleId":"443","severity":1,"message":"444","line":39,"column":21,"nodeType":"442","endLine":39,"endColumn":108},{"ruleId":"440","severity":1,"message":"441","line":41,"column":21,"nodeType":"442","endLine":41,"endColumn":70},{"ruleId":"440","severity":1,"message":"441","line":43,"column":21,"nodeType":"442","endLine":43,"endColumn":74},{"ruleId":"443","severity":1,"message":"444","line":48,"column":21,"nodeType":"442","endLine":48,"endColumn":124},{"ruleId":"440","severity":1,"message":"441","line":50,"column":21,"nodeType":"442","endLine":50,"endColumn":68},{"ruleId":"440","severity":1,"message":"441","line":52,"column":21,"nodeType":"442","endLine":52,"endColumn":72},{"ruleId":"415","severity":1,"message":"458","line":4,"column":9,"nodeType":"417","messageId":"418","endLine":4,"endColumn":17},{"ruleId":"443","severity":1,"message":"444","line":37,"column":19,"nodeType":"442","endLine":37,"endColumn":113},{"ruleId":"443","severity":1,"message":"444","line":47,"column":23,"nodeType":"442","endLine":47,"endColumn":59},{"ruleId":"440","severity":1,"message":"441","line":51,"column":27,"nodeType":"442","endLine":51,"endColumn":66},{"ruleId":"415","severity":1,"message":"459","line":2,"column":15,"nodeType":"417","messageId":"418","endLine":2,"endColumn":20},{"ruleId":"415","severity":1,"message":"460","line":2,"column":8,"nodeType":"417","messageId":"418","endLine":2,"endColumn":12},{"ruleId":"415","severity":1,"message":"447","line":3,"column":10,"nodeType":"417","messageId":"418","endLine":3,"endColumn":17},{"ruleId":"435","severity":1,"message":"436","line":16,"column":19,"nodeType":"437","messageId":"438","endLine":16,"endColumn":21},{"ruleId":"435","severity":1,"message":"436","line":19,"column":19,"nodeType":"437","messageId":"438","endLine":19,"endColumn":21},{"ruleId":"435","severity":1,"message":"436","line":22,"column":19,"nodeType":"437","messageId":"438","endLine":22,"endColumn":21},{"ruleId":"435","severity":1,"message":"436","line":25,"column":19,"nodeType":"437","messageId":"438","endLine":25,"endColumn":21},{"ruleId":"435","severity":1,"message":"436","line":28,"column":19,"nodeType":"437","messageId":"438","endLine":28,"endColumn":21},{"ruleId":"443","severity":1,"message":"444","line":38,"column":27,"nodeType":"442","endLine":38,"endColumn":94},{"ruleId":"443","severity":1,"message":"444","line":38,"column":118,"nodeType":"442","endLine":38,"endColumn":186},{"ruleId":"443","severity":1,"message":"444","line":39,"column":13,"nodeType":"442","endLine":39,"endColumn":83},{"ruleId":"440","severity":1,"message":"441","line":39,"column":83,"nodeType":"442","endLine":39,"endColumn":109},{"ruleId":"443","severity":1,"message":"444","line":39,"column":114,"nodeType":"442","endLine":39,"endColumn":184},{"ruleId":"440","severity":1,"message":"441","line":39,"column":184,"nodeType":"442","endLine":39,"endColumn":211},{"ruleId":"415","severity":1,"message":"459","line":2,"column":15,"nodeType":"417","messageId":"418","endLine":2,"endColumn":20},{"ruleId":"415","severity":1,"message":"461","line":91,"column":17,"nodeType":"417","messageId":"418","endLine":91,"endColumn":46},{"ruleId":"415","severity":1,"message":"462","line":100,"column":17,"nodeType":"417","messageId":"418","endLine":100,"endColumn":52},{"ruleId":"415","severity":1,"message":"463","line":8,"column":10,"nodeType":"417","messageId":"418","endLine":8,"endColumn":27},{"ruleId":"415","severity":1,"message":"452","line":8,"column":28,"nodeType":"417","messageId":"418","endLine":8,"endColumn":54},{"ruleId":"415","severity":1,"message":"464","line":8,"column":55,"nodeType":"417","messageId":"418","endLine":8,"endColumn":79},{"ruleId":"415","severity":1,"message":"454","line":10,"column":8,"nodeType":"417","messageId":"418","endLine":10,"endColumn":19},{"ruleId":"435","severity":1,"message":"436","line":57,"column":30,"nodeType":"437","messageId":"438","endLine":57,"endColumn":32},{"ruleId":"435","severity":1,"message":"436","line":89,"column":60,"nodeType":"437","messageId":"438","endLine":89,"endColumn":62},{"ruleId":"435","severity":1,"message":"436","line":89,"column":106,"nodeType":"437","messageId":"438","endLine":89,"endColumn":108},{"ruleId":"435","severity":1,"message":"436","line":89,"column":158,"nodeType":"437","messageId":"438","endLine":89,"endColumn":160},{"ruleId":"435","severity":1,"message":"436","line":89,"column":210,"nodeType":"437","messageId":"438","endLine":89,"endColumn":212},{"ruleId":"415","severity":1,"message":"461","line":103,"column":25,"nodeType":"417","messageId":"418","endLine":103,"endColumn":54},{"ruleId":"435","severity":1,"message":"436","line":273,"column":27,"nodeType":"437","messageId":"438","endLine":273,"endColumn":29},{"ruleId":"435","severity":1,"message":"436","line":283,"column":29,"nodeType":"437","messageId":"438","endLine":283,"endColumn":31},{"ruleId":"435","severity":1,"message":"436","line":314,"column":27,"nodeType":"437","messageId":"438","endLine":314,"endColumn":29},{"ruleId":"435","severity":1,"message":"436","line":324,"column":29,"nodeType":"437","messageId":"438","endLine":324,"endColumn":31},{"ruleId":"435","severity":1,"message":"436","line":345,"column":54,"nodeType":"437","messageId":"438","endLine":345,"endColumn":56},{"ruleId":"435","severity":1,"message":"436","line":345,"column":91,"nodeType":"437","messageId":"438","endLine":345,"endColumn":93},{"ruleId":"449","severity":1,"message":"450","line":347,"column":128,"nodeType":"451","endLine":347,"endColumn":139},{"ruleId":"449","severity":1,"message":"450","line":353,"column":128,"nodeType":"451","endLine":353,"endColumn":139},{"ruleId":"443","severity":1,"message":"444","line":361,"column":19,"nodeType":"442","endLine":361,"endColumn":79},{"ruleId":"440","severity":1,"message":"441","line":361,"column":79,"nodeType":"442","endLine":361,"endColumn":104},{"ruleId":"443","severity":1,"message":"444","line":363,"column":23,"nodeType":"442","endLine":363,"endColumn":77},{"ruleId":"440","severity":1,"message":"441","line":370,"column":55,"nodeType":"442","endLine":370,"endColumn":89},{"ruleId":"440","severity":1,"message":"441","line":371,"column":53,"nodeType":"442","endLine":371,"endColumn":86},{"ruleId":"440","severity":1,"message":"441","line":373,"column":52,"nodeType":"442","endLine":373,"endColumn":85},{"ruleId":"443","severity":1,"message":"444","line":36,"column":21,"nodeType":"442","endLine":36,"endColumn":148},{"ruleId":"440","severity":1,"message":"441","line":37,"column":57,"nodeType":"442","endLine":37,"endColumn":106},{"ruleId":"440","severity":1,"message":"441","line":37,"column":107,"nodeType":"442","endLine":37,"endColumn":158},{"ruleId":"443","severity":1,"message":"444","line":41,"column":21,"nodeType":"442","endLine":41,"endColumn":149},{"ruleId":"440","severity":1,"message":"441","line":42,"column":56,"nodeType":"442","endLine":42,"endColumn":105},{"ruleId":"440","severity":1,"message":"441","line":42,"column":106,"nodeType":"442","endLine":42,"endColumn":157},{"ruleId":"465","severity":1,"message":"466","line":62,"column":34,"nodeType":"417","messageId":"467","endLine":62,"endColumn":42},{"ruleId":"415","severity":1,"message":"468","line":195,"column":13,"nodeType":"417","messageId":"418","endLine":195,"endColumn":22},{"ruleId":"415","severity":1,"message":"469","line":4,"column":8,"nodeType":"417","messageId":"418","endLine":4,"endColumn":18},{"ruleId":"415","severity":1,"message":"470","line":5,"column":8,"nodeType":"417","messageId":"418","endLine":5,"endColumn":16},{"ruleId":"435","severity":1,"message":"436","line":94,"column":40,"nodeType":"437","messageId":"438","endLine":94,"endColumn":42},{"ruleId":"435","severity":1,"message":"457","line":100,"column":40,"nodeType":"437","messageId":"438","endLine":100,"endColumn":42},{"ruleId":"435","severity":1,"message":"436","line":113,"column":45,"nodeType":"437","messageId":"438","endLine":113,"endColumn":47},{"ruleId":"435","severity":1,"message":"436","line":143,"column":45,"nodeType":"437","messageId":"438","endLine":143,"endColumn":47},{"ruleId":"435","severity":1,"message":"436","line":164,"column":45,"nodeType":"437","messageId":"438","endLine":164,"endColumn":47},{"ruleId":"435","severity":1,"message":"457","line":169,"column":45,"nodeType":"437","messageId":"438","endLine":169,"endColumn":47},{"ruleId":"435","severity":1,"message":"436","line":179,"column":37,"nodeType":"437","messageId":"438","endLine":179,"endColumn":39},{"ruleId":"435","severity":1,"message":"436","line":218,"column":77,"nodeType":"437","messageId":"438","endLine":218,"endColumn":79},{"ruleId":"435","severity":1,"message":"436","line":220,"column":24,"nodeType":"437","messageId":"438","endLine":220,"endColumn":26},{"ruleId":"435","severity":1,"message":"436","line":225,"column":31,"nodeType":"437","messageId":"438","endLine":225,"endColumn":33},{"ruleId":"415","severity":1,"message":"471","line":236,"column":34,"nodeType":"417","messageId":"418","endLine":236,"endColumn":48},{"ruleId":"435","severity":1,"message":"436","line":240,"column":24,"nodeType":"437","messageId":"438","endLine":240,"endColumn":26},{"ruleId":"435","severity":1,"message":"436","line":247,"column":31,"nodeType":"437","messageId":"438","endLine":247,"endColumn":33},{"ruleId":"435","severity":1,"message":"436","line":263,"column":73,"nodeType":"437","messageId":"438","endLine":263,"endColumn":75},{"ruleId":"435","severity":1,"message":"436","line":265,"column":20,"nodeType":"437","messageId":"438","endLine":265,"endColumn":22},{"ruleId":"435","severity":1,"message":"436","line":270,"column":27,"nodeType":"437","messageId":"438","endLine":270,"endColumn":29},{"ruleId":"415","severity":1,"message":"471","line":281,"column":30,"nodeType":"417","messageId":"418","endLine":281,"endColumn":44},{"ruleId":"435","severity":1,"message":"436","line":285,"column":20,"nodeType":"437","messageId":"438","endLine":285,"endColumn":22},{"ruleId":"435","severity":1,"message":"436","line":292,"column":27,"nodeType":"437","messageId":"438","endLine":292,"endColumn":29},{"ruleId":"435","severity":1,"message":"436","line":306,"column":37,"nodeType":"437","messageId":"438","endLine":306,"endColumn":39},{"ruleId":"435","severity":1,"message":"436","line":333,"column":37,"nodeType":"437","messageId":"438","endLine":333,"endColumn":39},{"ruleId":"435","severity":1,"message":"457","line":359,"column":64,"nodeType":"437","messageId":"438","endLine":359,"endColumn":66},{"ruleId":"443","severity":1,"message":"472","line":362,"column":67,"nodeType":"442","endLine":362,"endColumn":125},{"ruleId":"440","severity":1,"message":"441","line":362,"column":125,"nodeType":"442","endLine":362,"endColumn":146},{"ruleId":"443","severity":1,"message":"444","line":371,"column":45,"nodeType":"442","endLine":371,"endColumn":120},{"ruleId":"443","severity":1,"message":"472","line":382,"column":33,"nodeType":"442","endLine":382,"endColumn":91},{"ruleId":"443","severity":1,"message":"444","line":397,"column":29,"nodeType":"442","endLine":397,"endColumn":99},{"ruleId":"440","severity":1,"message":"441","line":397,"column":99,"nodeType":"442","endLine":397,"endColumn":125},{"ruleId":"443","severity":1,"message":"444","line":410,"column":75,"nodeType":"442","endLine":410,"endColumn":105},{"ruleId":"443","severity":1,"message":"444","line":415,"column":53,"nodeType":"442","endLine":415,"endColumn":121},{"ruleId":"435","severity":1,"message":"436","line":423,"column":65,"nodeType":"437","messageId":"438","endLine":423,"endColumn":67},{"ruleId":"443","severity":1,"message":"444","line":427,"column":33,"nodeType":"442","endLine":427,"endColumn":96},{"ruleId":"443","severity":1,"message":"444","line":449,"column":29,"nodeType":"442","endLine":449,"endColumn":99},{"ruleId":"440","severity":1,"message":"441","line":449,"column":99,"nodeType":"442","endLine":449,"endColumn":125},{"ruleId":"443","severity":1,"message":"444","line":462,"column":75,"nodeType":"442","endLine":462,"endColumn":176},{"ruleId":"443","severity":1,"message":"444","line":467,"column":53,"nodeType":"442","endLine":467,"endColumn":125},{"ruleId":"435","severity":1,"message":"436","line":474,"column":70,"nodeType":"437","messageId":"438","endLine":474,"endColumn":72},{"ruleId":"443","severity":1,"message":"444","line":478,"column":33,"nodeType":"442","endLine":478,"endColumn":100},{"ruleId":"435","severity":1,"message":"436","line":108,"column":69,"nodeType":"437","messageId":"438","endLine":108,"endColumn":71},{"ruleId":"435","severity":1,"message":"436","line":110,"column":16,"nodeType":"437","messageId":"438","endLine":110,"endColumn":18},{"ruleId":"435","severity":1,"message":"436","line":115,"column":23,"nodeType":"437","messageId":"438","endLine":115,"endColumn":25},{"ruleId":"415","severity":1,"message":"471","line":126,"column":26,"nodeType":"417","messageId":"418","endLine":126,"endColumn":40},{"ruleId":"435","severity":1,"message":"436","line":128,"column":19,"nodeType":"437","messageId":"438","endLine":128,"endColumn":21},{"ruleId":"435","severity":1,"message":"436","line":135,"column":16,"nodeType":"437","messageId":"438","endLine":135,"endColumn":18},{"ruleId":"435","severity":1,"message":"436","line":142,"column":23,"nodeType":"437","messageId":"438","endLine":142,"endColumn":25},{"ruleId":"435","severity":1,"message":"436","line":170,"column":33,"nodeType":"437","messageId":"438","endLine":170,"endColumn":35},{"ruleId":"435","severity":1,"message":"457","line":176,"column":43,"nodeType":"437","messageId":"438","endLine":176,"endColumn":45},{"ruleId":"435","severity":1,"message":"436","line":214,"column":33,"nodeType":"437","messageId":"438","endLine":214,"endColumn":35},{"ruleId":"435","severity":1,"message":"457","line":222,"column":43,"nodeType":"437","messageId":"438","endLine":222,"endColumn":45},{"ruleId":"435","severity":1,"message":"436","line":279,"column":22,"nodeType":"437","messageId":"438","endLine":279,"endColumn":24},{"ruleId":"435","severity":1,"message":"436","line":291,"column":33,"nodeType":"437","messageId":"438","endLine":291,"endColumn":35},{"ruleId":"435","severity":1,"message":"457","line":297,"column":43,"nodeType":"437","messageId":"438","endLine":297,"endColumn":45},{"ruleId":"435","severity":1,"message":"436","line":327,"column":33,"nodeType":"437","messageId":"438","endLine":327,"endColumn":35},{"ruleId":"435","severity":1,"message":"457","line":334,"column":43,"nodeType":"437","messageId":"438","endLine":334,"endColumn":45},{"ruleId":"435","severity":1,"message":"457","line":360,"column":36,"nodeType":"437","messageId":"438","endLine":360,"endColumn":38},{"ruleId":"435","severity":1,"message":"457","line":384,"column":64,"nodeType":"437","messageId":"438","endLine":384,"endColumn":66},{"ruleId":"443","severity":1,"message":"444","line":388,"column":67,"nodeType":"442","endLine":388,"endColumn":139},{"ruleId":"443","severity":1,"message":"444","line":403,"column":49,"nodeType":"442","endLine":403,"endColumn":122},{"ruleId":"443","severity":1,"message":"444","line":404,"column":49,"nodeType":"442","endLine":404,"endColumn":125},{"ruleId":"443","severity":1,"message":"444","line":433,"column":25,"nodeType":"442","endLine":433,"endColumn":97},{"ruleId":"443","severity":1,"message":"444","line":447,"column":29,"nodeType":"442","endLine":447,"endColumn":105},{"ruleId":"440","severity":1,"message":"441","line":447,"column":105,"nodeType":"442","endLine":447,"endColumn":131},{"ruleId":"443","severity":1,"message":"444","line":508,"column":29,"nodeType":"442","endLine":508,"endColumn":105},{"ruleId":"440","severity":1,"message":"441","line":508,"column":105,"nodeType":"442","endLine":508,"endColumn":131},{"ruleId":"435","severity":1,"message":"436","line":61,"column":69,"nodeType":"437","messageId":"438","endLine":61,"endColumn":71},{"ruleId":"435","severity":1,"message":"436","line":63,"column":16,"nodeType":"437","messageId":"438","endLine":63,"endColumn":18},{"ruleId":"435","severity":1,"message":"436","line":68,"column":23,"nodeType":"437","messageId":"438","endLine":68,"endColumn":25},{"ruleId":"415","severity":1,"message":"471","line":79,"column":26,"nodeType":"417","messageId":"418","endLine":79,"endColumn":40},{"ruleId":"435","severity":1,"message":"436","line":83,"column":16,"nodeType":"437","messageId":"438","endLine":83,"endColumn":18},{"ruleId":"435","severity":1,"message":"436","line":90,"column":23,"nodeType":"437","messageId":"438","endLine":90,"endColumn":25},{"ruleId":"435","severity":1,"message":"436","line":111,"column":30,"nodeType":"437","messageId":"438","endLine":111,"endColumn":32},{"ruleId":"435","severity":1,"message":"436","line":205,"column":33,"nodeType":"437","messageId":"438","endLine":205,"endColumn":35},{"ruleId":"473","severity":1,"message":"474","line":208,"column":45,"nodeType":"475","messageId":"476","endLine":208,"endColumn":47},{"ruleId":"435","severity":1,"message":"457","line":214,"column":28,"nodeType":"437","messageId":"438","endLine":214,"endColumn":30},{"ruleId":"435","severity":1,"message":"436","line":214,"column":42,"nodeType":"437","messageId":"438","endLine":214,"endColumn":44},{"ruleId":"415","severity":1,"message":"469","line":4,"column":8,"nodeType":"417","messageId":"418","endLine":4,"endColumn":18},{"ruleId":"415","severity":1,"message":"470","line":5,"column":8,"nodeType":"417","messageId":"418","endLine":5,"endColumn":16},{"ruleId":"435","severity":1,"message":"436","line":150,"column":18,"nodeType":"437","messageId":"438","endLine":150,"endColumn":20},{"ruleId":"435","severity":1,"message":"436","line":166,"column":24,"nodeType":"437","messageId":"438","endLine":166,"endColumn":26},{"ruleId":"435","severity":1,"message":"436","line":209,"column":18,"nodeType":"437","messageId":"438","endLine":209,"endColumn":20},{"ruleId":"435","severity":1,"message":"436","line":225,"column":24,"nodeType":"437","messageId":"438","endLine":225,"endColumn":26},{"ruleId":"435","severity":1,"message":"436","line":333,"column":33,"nodeType":"437","messageId":"438","endLine":333,"endColumn":35},{"ruleId":"435","severity":1,"message":"436","line":363,"column":33,"nodeType":"437","messageId":"438","endLine":363,"endColumn":35},{"ruleId":"435","severity":1,"message":"436","line":401,"column":33,"nodeType":"437","messageId":"438","endLine":401,"endColumn":35},{"ruleId":"435","severity":1,"message":"436","line":420,"column":33,"nodeType":"437","messageId":"438","endLine":420,"endColumn":35},{"ruleId":"435","severity":1,"message":"436","line":429,"column":33,"nodeType":"437","messageId":"438","endLine":429,"endColumn":35},{"ruleId":"435","severity":1,"message":"457","line":453,"column":56,"nodeType":"437","messageId":"438","endLine":453,"endColumn":58},{"ruleId":"443","severity":1,"message":"444","line":457,"column":52,"nodeType":"442","endLine":457,"endColumn":116},{"ruleId":"440","severity":1,"message":"441","line":457,"column":116,"nodeType":"442","endLine":457,"endColumn":137},{"ruleId":"443","severity":1,"message":"444","line":464,"column":29,"nodeType":"442","endLine":464,"endColumn":101},{"ruleId":"443","severity":1,"message":"472","line":474,"column":21,"nodeType":"442","endLine":474,"endColumn":77},{"ruleId":"443","severity":1,"message":"444","line":488,"column":21,"nodeType":"442","endLine":488,"endColumn":89},{"ruleId":"440","severity":1,"message":"441","line":488,"column":89,"nodeType":"442","endLine":488,"endColumn":115},{"ruleId":"443","severity":1,"message":"444","line":497,"column":39,"nodeType":"442","endLine":497,"endColumn":138},{"ruleId":"443","severity":1,"message":"444","line":502,"column":65,"nodeType":"442","endLine":502,"endColumn":141},{"ruleId":"440","severity":1,"message":"441","line":502,"column":141,"nodeType":"442","endLine":502,"endColumn":170},{"ruleId":"443","severity":1,"message":"444","line":507,"column":29,"nodeType":"442","endLine":507,"endColumn":71},{"ruleId":"440","severity":1,"message":"441","line":507,"column":78,"nodeType":"442","endLine":507,"endColumn":104},{"ruleId":"443","severity":1,"message":"444","line":511,"column":45,"nodeType":"442","endLine":511,"endColumn":94},{"ruleId":"443","severity":1,"message":"444","line":516,"column":61,"nodeType":"442","endLine":516,"endColumn":154},{"ruleId":"443","severity":1,"message":"444","line":524,"column":45,"nodeType":"442","endLine":524,"endColumn":91},{"ruleId":"443","severity":1,"message":"444","line":535,"column":45,"nodeType":"442","endLine":535,"endColumn":94},{"ruleId":"443","severity":1,"message":"444","line":539,"column":57,"nodeType":"442","endLine":539,"endColumn":146},{"ruleId":"443","severity":1,"message":"444","line":540,"column":57,"nodeType":"442","endLine":540,"endColumn":141},{"ruleId":"443","severity":1,"message":"444","line":555,"column":33,"nodeType":"442","endLine":555,"endColumn":96},{"ruleId":"443","severity":1,"message":"444","line":573,"column":25,"nodeType":"442","endLine":573,"endColumn":93},{"ruleId":"440","severity":1,"message":"441","line":573,"column":93,"nodeType":"442","endLine":573,"endColumn":119},{"ruleId":"443","severity":1,"message":"444","line":582,"column":39,"nodeType":"442","endLine":582,"endColumn":139},{"ruleId":"443","severity":1,"message":"444","line":587,"column":69,"nodeType":"442","endLine":587,"endColumn":146},{"ruleId":"440","severity":1,"message":"441","line":587,"column":146,"nodeType":"442","endLine":587,"endColumn":175},{"ruleId":"443","severity":1,"message":"444","line":591,"column":33,"nodeType":"442","endLine":591,"endColumn":76},{"ruleId":"440","severity":1,"message":"441","line":591,"column":83,"nodeType":"442","endLine":591,"endColumn":109},{"ruleId":"443","severity":1,"message":"444","line":596,"column":45,"nodeType":"442","endLine":596,"endColumn":95},{"ruleId":"443","severity":1,"message":"444","line":601,"column":61,"nodeType":"442","endLine":601,"endColumn":158},{"ruleId":"443","severity":1,"message":"444","line":609,"column":45,"nodeType":"442","endLine":609,"endColumn":92},{"ruleId":"443","severity":1,"message":"444","line":620,"column":45,"nodeType":"442","endLine":620,"endColumn":95},{"ruleId":"443","severity":1,"message":"444","line":624,"column":57,"nodeType":"442","endLine":624,"endColumn":150},{"ruleId":"443","severity":1,"message":"444","line":625,"column":57,"nodeType":"442","endLine":625,"endColumn":145},{"ruleId":"443","severity":1,"message":"444","line":640,"column":33,"nodeType":"442","endLine":640,"endColumn":100},{"ruleId":"415","severity":1,"message":"459","line":2,"column":15,"nodeType":"417","messageId":"418","endLine":2,"endColumn":20},{"ruleId":"415","severity":1,"message":"459","line":2,"column":15,"nodeType":"417","messageId":"418","endLine":2,"endColumn":20},"no-native-reassign",["477"],"no-negated-in-lhs",["478"],"no-unused-vars","'NotFound' is assigned a value but never used.","Identifier","unusedVar","'Redirect' is defined but never used.","'withRouter' is defined but never used.","'biglogo' is defined but never used.","'instagram' is defined but never used.","no-useless-escape","Unnecessary escape character: \\[.","Literal","unnecessaryEscape",["479","480"],["481","482"],"no-unreachable","Unreachable code.","ReturnStatement","unreachableCode","'payload' is assigned a value but never used.","'LC' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'inBackgroundFetching' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","'kyubiExtensionId' is defined but never used.","'LO' is assigned a value but never used.","'NavLink' is defined but never used.","'ReactDOM' is defined but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'CheckUserInfoFromFaccebook' is defined but never used.","'settingService' is defined but never used.","'loginHelper' is defined but never used.",["483","484"],["485","486"],"Expected '!==' and instead saw '!='.","'Animated' is defined but never used.","'kyubi' is defined but never used.","'logo' is defined but never used.","'CreateInstagramMessageListTab' is assigned a value but never used.","'CreateInstagramMessageIndividualTab' is assigned a value but never used.","'OpenFacebookInTab' is defined but never used.","'OpenFacebookProfileInTab' is defined but never used.","no-use-before-define","'myNewUrl' was used before it was defined.","usedBeforeDefined","'CreateTab' is assigned a value but never used.","'deleteLogo' is defined but never used.","'viewLogo' is defined but never used.","'WelcomeMessage' is assigned a value but never used.","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-global-assign","no-unsafe-negation",{"messageId":"487","fix":"488","desc":"489"},{"messageId":"490","fix":"491","desc":"492"},{"messageId":"487","fix":"493","desc":"489"},{"messageId":"490","fix":"494","desc":"492"},{"messageId":"487","fix":"495","desc":"489"},{"messageId":"490","fix":"496","desc":"492"},{"messageId":"487","fix":"497","desc":"489"},{"messageId":"490","fix":"498","desc":"492"},"removeEscape",{"range":"499","text":"500"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"501","text":"502"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"503","text":"500"},{"range":"504","text":"502"},{"range":"505","text":"500"},{"range":"506","text":"502"},{"range":"507","text":"500"},{"range":"508","text":"502"},[2352,2353],"",[2352,2352],"\\",[2377,2378],[2377,2377],[2704,2705],[2704,2704],[2729,2730],[2729,2729]]